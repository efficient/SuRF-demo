/*
  vim: set ts=8 sts=2 et sw=2 tw=79:
  Copyright (C) 2013

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
*/

// A conforming SIMD.js implementation may contain the following deviations to
// normal JS numeric behavior:
//  - Subnormal numbers may or may not be flushed to zero on input or output of
//    any SIMD operation.

// Many of the operations in SIMD.js have semantics which correspond to scalar
// operations in JS, however there are a few differences:
//  - Vector shifts don't mask the shift count.
//  - Conversions from float to int32 throw on error.
//  - Load and store operations throw when out of bounds.

(function(global) {

if (typeof global.SIMD === "undefined") {
  // SIMD module.
  global.SIMD = {};
}

if (typeof module !== "undefined") {
  // For CommonJS modules
  module.exports = global.SIMD;
}

var SIMD = global.SIMD;

// Buffers for bit casting and coercing lane values to those representable in
// the underlying lane type.
var _f32x4 = new Float32Array(4);
var _f64x2 = new Float64Array(_f32x4.buffer);
var _i32x4 = new Int32Array(_f32x4.buffer);
var _i16x8 = new Int16Array(_f32x4.buffer);
var _i8x16 = new Int8Array(_f32x4.buffer);
var _ui32x4 = new Uint32Array(_f32x4.buffer);
var _ui16x8 = new Uint16Array(_f32x4.buffer);
var _ui8x16 = new Uint8Array(_f32x4.buffer);

function convertValue(buffer, value) {
  buffer[0] = value;
  return buffer[0];
}

function convertArray(buffer, array) {
  for (var i = 0; i < array.length; i++)
    array[i] = convertValue(buffer, array[i]);
  return array;
}

// Utility functions.

function isInt32(o) {
  return (o | 0) === o;
}

function isTypedArray(o) {
  return (o instanceof Int8Array) ||
         (o instanceof Uint8Array) ||
         (o instanceof Uint8ClampedArray) ||
         (o instanceof Int16Array) ||
         (o instanceof Uint16Array) ||
         (o instanceof Int32Array) ||
         (o instanceof Uint32Array) ||
         (o instanceof Float32Array) ||
         (o instanceof Float64Array);
}

function minNum(x, y) {
  return x != x ? y :
         y != y ? x :
         Math.min(x, y);
}

function maxNum(x, y) {
  return x != x ? y :
         y != y ? x :
         Math.max(x, y);
}

function clamp(a, min, max) {
  if (a < min)
    return min;
  if (a > max)
    return max;
  return a;
}

// SIMD implementation functions

function simdCheckLaneIndex(index, lanes) {
  if (!isInt32(index))
    throw new TypeError('Lane index must be an int32');
  if (index < 0 || index >= lanes)
    throw new RangeError('Lane index must be in bounds');
}

// Global lanes array for constructing SIMD values.
var lanes = [];

function simdCreate(type) {
  return type.fn.apply(type.fn, lanes);
}

function simdToString(type, a) {
  a = type.fn.check(a);
  var str = "SIMD." + type.name + "(";
  str += type.fn.extractLane(a, 0);
  for (var i = 1; i < type.lanes; i++) {
    str += ", " + type.fn.extractLane(a, i);
  }
  return str + ")";
}

function simdToLocaleString(type, a) {
  a = type.fn.check(a);
  var str = "SIMD." + type.name + "(";
  str += type.fn.extractLane(a, 0).toLocaleString();
  for (var i = 1; i < type.lanes; i++) {
    str += ", " + type.fn.extractLane(a, i).toLocaleString();
  }
  return str + ")";
}

function simdSplat(type, s) {
  for (var i = 0; i < type.lanes; i++)
    lanes[i] = s;
  return simdCreate(type);
}

function simdReplaceLane(type, a, i, s) {
  a = type.fn.check(a);
  simdCheckLaneIndex(i, type.lanes);
  for (var j = 0; j < type.lanes; j++)
    lanes[j] = type.fn.extractLane(a, j);
  lanes[i] = s;
  return simdCreate(type);
}

function simdFrom(toType, fromType, a) {
  a = fromType.fn.check(a);
  for (var i = 0; i < fromType.lanes; i++) {
    var v = Math.trunc(fromType.fn.extractLane(a, i));
    if (toType.minVal !== undefined &&
        !(toType.minVal <= v && v <= toType.maxVal)) {
      throw new RangeError("Can't convert value");
    }
    lanes[i] = v;
  }
  return simdCreate(toType);
}

function simdFromBits(toType, fromType, a) {
  a = fromType.fn.check(a);
  var newValue = new toType.fn();
  newValue.s_ = new toType.view(a.s_.buffer);
  return newValue;
}

function simdSelect(type, selector, a, b) {
  selector = type.boolType.fn.check(selector);
  a = type.fn.check(a);
  b = type.fn.check(b);
  for (var i = 0; i < type.lanes; i++) {
    lanes[i] = type.boolType.fn.extractLane(selector, i) ?
               type.fn.extractLane(a, i) : type.fn.extractLane(b, i);
  }
  return simdCreate(type);
}

function simdSwizzle(type, a, indices) {
  a = type.fn.check(a);
  for (var i = 0; i < indices.length; i++) {
    simdCheckLaneIndex(indices[i], type.lanes);
    lanes[i] = type.fn.extractLane(a, indices[i]);
  }
  return simdCreate(type);
}

function simdShuffle(type, a, b, indices) {
  a = type.fn.check(a);
  b = type.fn.check(b);
  for (var i = 0; i < indices.length; i++) {
    simdCheckLaneIndex(indices[i], 2 * type.lanes);
    lanes[i] = indices[i] < type.lanes ?
               type.fn.extractLane(a, indices[i]) :
               type.fn.extractLane(b, indices[i] - type.lanes);
  }
  return simdCreate(type);
}

function unaryNeg(a) { return -a; }
function unaryBitwiseNot(a) { return ~a; }
function unaryLogicalNot(a) { return !a; }

function simdUnaryOp(type, op, a) {
  a = type.fn.check(a);
  for (var i = 0; i < type.lanes; i++)
    lanes[i] = op(type.fn.extractLane(a, i));
  return simdCreate(type);
}

function binaryAnd(a, b) { return a & b; }
function binaryOr(a, b) { return a | b; }
function binaryXor(a, b) { return a ^ b; }
function binaryAdd(a, b) { return a + b; }
function binarySub(a, b) { return a - b; }
function binaryMul(a, b) { return a * b; }
function binaryDiv(a, b) { return a / b; }

var binaryImul;
if (typeof Math.imul !== 'undefined') {
  binaryImul = Math.imul;
} else {
  binaryImul = function(a, b) {
    var ah = (a >>> 16) & 0xffff;
    var al = a & 0xffff;
    var bh = (b >>> 16) & 0xffff;
    var bl = b & 0xffff;
    // the shift by 0 fixes the sign on the high part
    // the final |0 converts the unsigned value into a signed value
    return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
  };
}

function simdBinaryOp(type, op, a, b) {
  a = type.fn.check(a);
  b = type.fn.check(b);
  for (var i = 0; i < type.lanes; i++)
    lanes[i] = op(type.fn.extractLane(a, i), type.fn.extractLane(b, i));
  return simdCreate(type);
}

function binaryEqual(a, b) { return a == b; }
function binaryNotEqual(a, b) { return a != b; }
function binaryLess(a, b) { return a < b; }
function binaryLessEqual(a, b) { return a <= b; }
function binaryGreater(a, b) { return a > b; }
function binaryGreaterEqual(a, b) { return a >= b; }

function simdRelationalOp(type, op, a, b) {
  a = type.fn.check(a);
  b = type.fn.check(b);
  for (var i = 0; i < type.lanes; i++)
    lanes[i] = op(type.fn.extractLane(a, i), type.fn.extractLane(b, i));
  return simdCreate(type.boolType);
}

function simdAnyTrue(type, a) {
  a = type.fn.check(a);
  for (var i = 0; i < type.lanes; i++)
    if (type.fn.extractLane(a, i)) return true;
  return false;
}

function simdAllTrue(type, a) {
  a = type.fn.check(a);
  for (var i = 0; i < type.lanes; i++)
    if (!type.fn.extractLane(a, i)) return false;
  return true;
}

function binaryShiftLeft(a, bits) { return a << bits; }
function binaryShiftRightArithmetic(a, bits) { return a >> bits; }
function binaryShiftRightLogical(a, bits) { return a >>> bits; }

function simdShiftOp(type, op, a, bits) {
  a = type.fn.check(a);
  for (var i = 0; i < type.lanes; i++)
    lanes[i] = op(type.fn.extractLane(a, i), bits);
  return simdCreate(type);
}

function simdLoad(type, tarray, index, count) {
  if (!isTypedArray(tarray))
    throw new TypeError("The 1st argument must be a typed array.");
  if (!isInt32(index))
    throw new TypeError("The 2nd argument must be an Int32.");
  var bpe = tarray.BYTES_PER_ELEMENT;
  var bytes = count * type.laneSize;
  if (index < 0 || (index * bpe + bytes) > tarray.byteLength)
    throw new RangeError("The value of index is invalid.");

  var newValue = type.fn();
  var dst = new Uint8Array(newValue.s_.buffer);
  var src = new Uint8Array(tarray.buffer, tarray.byteOffset + index * bpe, bytes);

  for (var i = 0; i < bytes; i++) {
    dst[i] = src[i];
  }
  var typeBytes = type.lanes * type.laneSize;
  for (var i = bytes; i < typeBytes; i++) {
    dst[i] = 0;
  }
  return newValue;
}

function simdStore(type, tarray, index, a, count) {
  if (!isTypedArray(tarray))
    throw new TypeError("The 1st argument must be a typed array.");
  if (!isInt32(index))
    throw new TypeError("The 2nd argument must be an Int32.");
  var bpe = tarray.BYTES_PER_ELEMENT;
  var bytes = count * type.laneSize;
  if (index < 0 || (index * bpe + bytes) > tarray.byteLength)
    throw new RangeError("The value of index is invalid.");

  a = type.fn.check(a);

  // The underlying buffers are copied byte by byte, to avoid float
  // canonicalization.
  var src = new Uint8Array(a.s_.buffer);
  var dst = new Uint8Array(tarray.buffer, tarray.byteOffset + index * bpe, bytes);
  for (var i = 0; i < bytes; i++) {
    dst[i] = src[i];
  }
  return a;
}

// Constructors and extractLane functions are closely related and must be
// polyfilled together.

// Float32x4
if (typeof SIMD.Float32x4 === "undefined" ||
    typeof SIMD.Float32x4.extractLane === "undefined") {
  SIMD.Float32x4 = function(s0, s1, s2, s3) {
    if (!(this instanceof SIMD.Float32x4)) {
      return new SIMD.Float32x4(s0, s1, s2, s3);
    }
    this.s_ = convertArray(_f32x4, new Float32Array([s0, s1, s2, s3]));
  }

  SIMD.Float32x4.extractLane = function(v, i) {
    v = SIMD.Float32x4.check(v);
    simdCheckLaneIndex(i, 4);
    return v.s_[i];
  }
}

// Miscellaneous functions that aren't easily parameterized on type.

if (typeof SIMD.Float32x4.swizzle === "undefined") {
  SIMD.Float32x4.swizzle = function(a, s0, s1, s2, s3) {
    return simdSwizzle(float32x4, a, [s0, s1, s2, s3]);
  }
}

if (typeof SIMD.Float32x4.shuffle === "undefined") {
  SIMD.Float32x4.shuffle = function(a, b, s0, s1, s2, s3) {
    return simdShuffle(float32x4, a, b, [s0, s1, s2, s3]);
  }
}

// Int32x4
if (typeof SIMD.Int32x4 === "undefined" ||
    typeof SIMD.Int32x4.extractLane === "undefined") {
  SIMD.Int32x4 = function(s0, s1, s2, s3) {
    if (!(this instanceof SIMD.Int32x4)) {
      return new SIMD.Int32x4(s0, s1, s2, s3);
    }
    this.s_ = convertArray(_i32x4, new Int32Array([s0, s1, s2, s3]));
  }

  SIMD.Int32x4.extractLane = function(v, i) {
    v = SIMD.Int32x4.check(v);
    simdCheckLaneIndex(i, 4);
    return v.s_[i];
  }
}

if (typeof SIMD.Int32x4.swizzle === "undefined") {
  SIMD.Int32x4.swizzle = function(a, s0, s1, s2, s3) {
    return simdSwizzle(int32x4, a, [s0, s1, s2, s3]);
  }
}

if (typeof SIMD.Int32x4.shuffle === "undefined") {
  SIMD.Int32x4.shuffle = function(a, b, s0, s1, s2, s3) {
    return simdShuffle(int32x4, a, b, [s0, s1, s2, s3]);
  }
}

// Int16x8
if (typeof SIMD.Int16x8 === "undefined" ||
    typeof SIMD.Int16x8.extractLane === "undefined") {
  SIMD.Int16x8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
    if (!(this instanceof SIMD.Int16x8)) {
      return new SIMD.Int16x8(s0, s1, s2, s3, s4, s5, s6, s7);
    }
    this.s_ = convertArray(_i16x8, new Int16Array([s0, s1, s2, s3, s4, s5, s6, s7]));
  }

  SIMD.Int16x8.extractLane = function(v, i) {
    v = SIMD.Int16x8.check(v);
    simdCheckLaneIndex(i, 8);
    return v.s_[i];
  }
}

if (typeof SIMD.Int16x8.swizzle === "undefined") {
  SIMD.Int16x8.swizzle = function(a, s0, s1, s2, s3, s4, s5, s6, s7) {
    return simdSwizzle(int16x8, a, [s0, s1, s2, s3, s4, s5, s6, s7]);
  }
}

if (typeof SIMD.Int16x8.shuffle === "undefined") {
  SIMD.Int16x8.shuffle = function(a, b, s0, s1, s2, s3, s4, s5, s6, s7) {
    return simdShuffle(int16x8, a, b, [s0, s1, s2, s3, s4, s5, s6, s7]);
  }
}

// Int8x16
if (typeof SIMD.Int8x16 === "undefined" ||
    typeof SIMD.Int8x16.extractLane === "undefined") {
  SIMD.Int8x16 = function(s0, s1, s2, s3, s4, s5, s6, s7,
                          s8, s9, s10, s11, s12, s13, s14, s15) {
    if (!(this instanceof SIMD.Int8x16)) {
      return new SIMD.Int8x16(s0, s1, s2, s3, s4, s5, s6, s7,
                              s8, s9, s10, s11, s12, s13, s14, s15);
    }
    this.s_ = convertArray(_i8x16, new Int8Array([s0, s1, s2, s3, s4, s5, s6, s7,
                                    s8, s9, s10, s11, s12, s13, s14, s15]));
  }

  SIMD.Int8x16.extractLane = function(v, i) {
    v = SIMD.Int8x16.check(v);
    simdCheckLaneIndex(i, 16);
    return v.s_[i];
  }
}

if (typeof SIMD.Int8x16.swizzle === "undefined") {
  SIMD.Int8x16.swizzle = function(a, s0, s1, s2, s3, s4, s5, s6, s7,
                                     s8, s9, s10, s11, s12, s13, s14, s15) {
    return simdSwizzle(int8x16, a, [s0, s1, s2, s3, s4, s5, s6, s7,
                                    s8, s9, s10, s11, s12, s13, s14, s15]);
  }
}

if (typeof SIMD.Int8x16.shuffle === "undefined") {
  SIMD.Int8x16.shuffle = function(a, b, s0, s1, s2, s3, s4, s5, s6, s7,
                                        s8, s9, s10, s11, s12, s13, s14, s15) {
    return simdShuffle(int8x16, a, b, [s0, s1, s2, s3, s4, s5, s6, s7,
                                       s8, s9, s10, s11, s12, s13, s14, s15]);
  }
}

// Uint32x4
if (typeof SIMD.Uint32x4 === "undefined" ||
    typeof SIMD.Uint32x4.extractLane === "undefined") {
  SIMD.Uint32x4 = function(s0, s1, s2, s3) {
    if (!(this instanceof SIMD.Uint32x4)) {
      return new SIMD.Uint32x4(s0, s1, s2, s3);
    }
    this.s_ = convertArray(_ui32x4, new Uint32Array([s0, s1, s2, s3]));
  }

  SIMD.Uint32x4.extractLane = function(v, i) {
    v = SIMD.Uint32x4.check(v);
    simdCheckLaneIndex(i, 4);
    return v.s_[i];
  }
}

if (typeof SIMD.Uint32x4.swizzle === "undefined") {
  SIMD.Uint32x4.swizzle = function(a, s0, s1, s2, s3) {
    return simdSwizzle(uint32x4, a, [s0, s1, s2, s3]);
  }
}

if (typeof SIMD.Uint32x4.shuffle === "undefined") {
  SIMD.Uint32x4.shuffle = function(a, b, s0, s1, s2, s3) {
    return simdShuffle(uint32x4, a, b, [s0, s1, s2, s3]);
  }
}

// Uint16x8
if (typeof SIMD.Uint16x8 === "undefined" ||
    typeof SIMD.Uint16x8.extractLane === "undefined") {
  SIMD.Uint16x8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
    if (!(this instanceof SIMD.Uint16x8)) {
      return new SIMD.Uint16x8(s0, s1, s2, s3, s4, s5, s6, s7);
    }
    this.s_ = convertArray(_ui16x8, new Uint16Array([s0, s1, s2, s3, s4, s5, s6, s7]));
  }

  SIMD.Uint16x8.extractLane = function(v, i) {
    v = SIMD.Uint16x8.check(v);
    simdCheckLaneIndex(i, 8);
    return v.s_[i];
  }
}

if (typeof SIMD.Uint16x8.swizzle === "undefined") {
  SIMD.Uint16x8.swizzle = function(a, s0, s1, s2, s3, s4, s5, s6, s7) {
    return simdSwizzle(uint16x8, a, [s0, s1, s2, s3, s4, s5, s6, s7]);
  }
}

if (typeof SIMD.Uint16x8.shuffle === "undefined") {
  SIMD.Uint16x8.shuffle = function(a, b, s0, s1, s2, s3, s4, s5, s6, s7) {
    return simdShuffle(uint16x8, a, b, [s0, s1, s2, s3, s4, s5, s6, s7]);
  }
}

// Uint8x16
if (typeof SIMD.Uint8x16 === "undefined" ||
    typeof SIMD.Uint8x16.extractLane === "undefined") {
  SIMD.Uint8x16 = function(s0, s1, s2, s3, s4, s5, s6, s7,
                           s8, s9, s10, s11, s12, s13, s14, s15) {
    if (!(this instanceof SIMD.Uint8x16)) {
      return new SIMD.Uint8x16(s0, s1, s2, s3, s4, s5, s6, s7,
                               s8, s9, s10, s11, s12, s13, s14, s15);
    }
    this.s_ = convertArray(_ui8x16, new Uint8Array([s0, s1, s2, s3, s4, s5, s6, s7,
                                     s8, s9, s10, s11, s12, s13, s14, s15]));
  }

  SIMD.Uint8x16.extractLane = function(v, i) {
    v = SIMD.Uint8x16.check(v);
    simdCheckLaneIndex(i, 16);
    return v.s_[i];
  }
}

if (typeof SIMD.Uint8x16.swizzle === "undefined") {
  SIMD.Uint8x16.swizzle = function(a, s0, s1, s2, s3, s4, s5, s6, s7,
                                      s8, s9, s10, s11, s12, s13, s14, s15) {
    return simdSwizzle(uint8x16, a, [s0, s1, s2, s3, s4, s5, s6, s7,
                                     s8, s9, s10, s11, s12, s13, s14, s15]);
  }
}

if (typeof SIMD.Uint8x16.shuffle === "undefined") {
  SIMD.Uint8x16.shuffle = function(a, b, s0, s1, s2, s3, s4, s5, s6, s7,
                                         s8, s9, s10, s11, s12, s13, s14, s15) {
    return simdShuffle(uint8x16, a, b, [s0, s1, s2, s3, s4, s5, s6, s7,
                                        s8, s9, s10, s11, s12, s13, s14, s15]);
  }
}

// Bool32x4
if (typeof SIMD.Bool32x4 === "undefined" ||
    typeof SIMD.Bool32x4.extractLane === "undefined") {
  SIMD.Bool32x4 = function(s0, s1, s2, s3) {
    if (!(this instanceof SIMD.Bool32x4)) {
      return new SIMD.Bool32x4(s0, s1, s2, s3);
    }
    this.s_ = [!!s0, !!s1, !!s2, !!s3];
  }

  SIMD.Bool32x4.extractLane = function(v, i) {
    v = SIMD.Bool32x4.check(v);
    simdCheckLaneIndex(i, 4);
    return v.s_[i];
  }
}

// Bool16x8
if (typeof SIMD.Bool16x8 === "undefined" ||
    typeof SIMD.Bool16x8.extractLane === "undefined") {
  SIMD.Bool16x8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
    if (!(this instanceof SIMD.Bool16x8)) {
      return new SIMD.Bool16x8(s0, s1, s2, s3, s4, s5, s6, s7);
    }
    this.s_ = [!!s0, !!s1, !!s2, !!s3, !!s4, !!s5, !!s6, !!s7];
  }

  SIMD.Bool16x8.extractLane = function(v, i) {
    v = SIMD.Bool16x8.check(v);
    simdCheckLaneIndex(i, 8);
    return v.s_[i];
  }
}

// Bool8x16
if (typeof SIMD.Bool8x16 === "undefined" ||
    typeof SIMD.Bool8x16.extractLane === "undefined") {
  SIMD.Bool8x16 = function(s0, s1, s2, s3, s4, s5, s6, s7,
                           s8, s9, s10, s11, s12, s13, s14, s15) {
    if (!(this instanceof SIMD.Bool8x16)) {
      return new SIMD.Bool8x16(s0, s1, s2, s3, s4, s5, s6, s7,
                               s8, s9, s10, s11, s12, s13, s14, s15);
    }
    this.s_ = [!!s0, !!s1, !!s2, !!s3, !!s4, !!s5, !!s6, !!s7,
               !!s8, !!s9, !!s10, !!s11, !!s12, !!s13, !!s14, !!s15];
  }

  SIMD.Bool8x16.extractLane = function(v, i) {
    v = SIMD.Bool8x16.check(v);
    simdCheckLaneIndex(i, 16);
    return v.s_[i];
  }
}

// Type data to generate the remaining functions.

var float32x4 = {
  name: "Float32x4",
  fn: SIMD.Float32x4,
  lanes: 4,
  laneSize: 4,
  buffer: _f32x4,
  view: Float32Array,
  mulFn: binaryMul,
  fns: ["check", "splat", "replaceLane", "select",
        "equal", "notEqual", "lessThan", "lessThanOrEqual", "greaterThan", "greaterThanOrEqual",
        "add", "sub", "mul", "div", "neg", "abs", "min", "max", "minNum", "maxNum",
        "reciprocalApproximation", "reciprocalSqrtApproximation", "sqrt",
        "load", "load1", "load2", "load3", "store", "store1", "store2", "store3"],
}

var int32x4 = {
  name: "Int32x4",
  fn: SIMD.Int32x4,
  lanes: 4,
  laneSize: 4,
  minVal: -0x80000000,
  maxVal: 0x7FFFFFFF,
  buffer: _i32x4,
  notFn: unaryBitwiseNot,
  view: Int32Array,
  mulFn: binaryImul,
  fns: ["check", "splat", "replaceLane", "select",
        "equal", "notEqual", "lessThan", "lessThanOrEqual", "greaterThan", "greaterThanOrEqual",
        "and", "or", "xor", "not",
        "add", "sub", "mul", "neg",
        "shiftLeftByScalar", "shiftRightByScalar",
        "load", "load1", "load2", "load3", "store", "store1", "store2", "store3"],
}

var int16x8 = {
  name: "Int16x8",
  fn: SIMD.Int16x8,
  lanes: 8,
  laneSize: 2,
  minVal: -0x8000,
  maxVal: 0x7FFF,
  buffer: _i16x8,
  notFn: unaryBitwiseNot,
  view: Int16Array,
  mulFn: binaryMul,
  fns: ["check", "splat", "replaceLane", "select",
        "equal", "notEqual", "lessThan", "lessThanOrEqual", "greaterThan", "greaterThanOrEqual",
        "and", "or", "xor", "not",
        "add", "sub", "mul", "neg",
        "shiftLeftByScalar", "shiftRightByScalar",
        "addSaturate", "subSaturate",
        "load", "store"],
}

var int8x16 = {
  name: "Int8x16",
  fn: SIMD.Int8x16,
  lanes: 16,
  laneSize: 1,
  minVal: -0x80,
  maxVal: 0x7F,
  buffer: _i8x16,
  notFn: unaryBitwiseNot,
  view: Int8Array,
  mulFn: binaryMul,
  fns: ["check", "splat", "replaceLane", "select",
        "equal", "notEqual", "lessThan", "lessThanOrEqual", "greaterThan", "greaterThanOrEqual",
        "and", "or", "xor", "not",
        "add", "sub", "mul", "neg",
        "shiftLeftByScalar", "shiftRightByScalar",
        "addSaturate", "subSaturate",
        "load", "store"],
}

var uint32x4 = {
  name: "Uint32x4",
  fn: SIMD.Uint32x4,
  lanes: 4,
  laneSize: 4,
  minVal: 0,
  maxVal: 0xFFFFFFFF,
  unsigned: true,
  buffer: _ui32x4,
  notFn: unaryBitwiseNot,
  view: Uint32Array,
  mulFn: binaryImul,
  fns: ["check", "splat", "replaceLane", "select",
        "equal", "notEqual", "lessThan", "lessThanOrEqual", "greaterThan", "greaterThanOrEqual",
        "and", "or", "xor", "not",
        "add", "sub", "mul",
        "shiftLeftByScalar", "shiftRightByScalar",
        "load", "load1", "load2", "load3", "store", "store1", "store2", "store3"],
}

var uint16x8 = {
  name: "Uint16x8",
  fn: SIMD.Uint16x8,
  lanes: 8,
  laneSize: 2,
  unsigned: true,
  minVal: 0,
  maxVal: 0xFFFF,
  buffer: _ui16x8,
  notFn: unaryBitwiseNot,
  view: Uint16Array,
  mulFn: binaryMul,
  fns: ["check", "splat", "replaceLane", "select",
        "equal", "notEqual", "lessThan", "lessThanOrEqual", "greaterThan", "greaterThanOrEqual",
        "and", "or", "xor", "not",
        "add", "sub", "mul",
        "shiftLeftByScalar", "shiftRightByScalar",
        "addSaturate", "subSaturate",
        "load", "store"],
}

var uint8x16 = {
  name: "Uint8x16",
  fn: SIMD.Uint8x16,
  lanes: 16,
  laneSize: 1,
  unsigned: true,
  minVal: 0,
  maxVal: 0xFF,
  buffer: _ui8x16,
  notFn: unaryBitwiseNot,
  view: Uint8Array,
  mulFn: binaryMul,
  fns: ["check", "splat", "replaceLane", "select",
        "equal", "notEqual", "lessThan", "lessThanOrEqual", "greaterThan", "greaterThanOrEqual",
        "and", "or", "xor", "not",
        "add", "sub", "mul",
        "shiftLeftByScalar", "shiftRightByScalar",
        "addSaturate", "subSaturate",
        "load", "store"],
}

var bool32x4 = {
  name: "Bool32x4",
  fn: SIMD.Bool32x4,
  lanes: 4,
  laneSize: 4,
  notFn: unaryLogicalNot,
  fns: ["check", "splat", "replaceLane",
        "allTrue", "anyTrue", "and", "or", "xor", "not"],
}

var bool16x8 = {
  name: "Bool16x8",
  fn: SIMD.Bool16x8,
  lanes: 8,
  laneSize: 2,
  notFn: unaryLogicalNot,
  fns: ["check", "splat", "replaceLane",
        "allTrue", "anyTrue", "and", "or", "xor", "not"],
}

var bool8x16 = {
  name: "Bool8x16",
  fn: SIMD.Bool8x16,
  lanes: 16,
  laneSize: 1,
  notFn: unaryLogicalNot,
  fns: ["check", "splat", "replaceLane",
        "allTrue", "anyTrue", "and", "or", "xor", "not"],
}

// Each SIMD type has a corresponding Boolean SIMD type, which is returned by
// relational ops.
float32x4.boolType = int32x4.boolType = uint32x4.boolType = bool32x4;
int16x8.boolType = uint16x8.boolType = bool16x8;
int8x16.boolType = uint8x16.boolType = bool8x16;

// SIMD from<type> types.
float32x4.from = [int32x4, uint32x4];
int32x4.from = [float32x4, uint32x4];
int16x8.from = [uint16x8];
int8x16.from = [uint8x16];
uint32x4.from = [float32x4, int32x4];
uint16x8.from = [int16x8];
uint8x16.from = [int8x16];

// SIMD from<type>Bits types.
float32x4.fromBits = [int32x4, int16x8, int8x16, uint32x4, uint16x8, uint8x16];
int32x4.fromBits = [float32x4, int16x8, int8x16, uint32x4, uint16x8, uint8x16];
int16x8.fromBits = [float32x4, int32x4, int8x16, uint32x4, uint16x8, uint8x16];
int8x16.fromBits = [float32x4, int32x4, int16x8, uint32x4, uint16x8, uint8x16];
uint32x4.fromBits = [float32x4, int32x4, int16x8, int8x16, uint16x8, uint8x16];
uint16x8.fromBits = [float32x4, int32x4, int16x8, int8x16, uint32x4, uint8x16];
uint8x16.fromBits = [float32x4, int32x4, int16x8, int8x16, uint32x4, uint16x8];

var simdTypes = [float32x4,
                 int32x4, int16x8, int8x16,
                 uint32x4, uint16x8, uint8x16,
                 bool32x4, bool16x8, bool8x16];

// XXX Emscripten: Enable SIMD phase 2 types for Float64x2 and Bool64x2 to enable targeting SSE2 support.
var simdPhase2 = true;

// SIMD Phase2 types.

if (typeof simdPhase2 !== 'undefined' && simdPhase2) {
  // Float64x2
  if (typeof SIMD.Float64x2 === "undefined" ||
      typeof SIMD.Float64x2.extractLane === "undefined") {
    SIMD.Float64x2 = function(s0, s1) {
      if (!(this instanceof SIMD.Float64x2)) {
        return new SIMD.Float64x2(s0, s1);
      }
      this.s_ = convertArray(_f64x2, new Float64Array([s0, s1]));
    }

    SIMD.Float64x2.extractLane = function(v, i) {
      v = SIMD.Float64x2.check(v);
      simdCheckLaneIndex(i, 2);
      return v.s_[i];
    }
  }

  if (typeof SIMD.Float64x2.swizzle === "undefined") {
    SIMD.Float64x2.swizzle = function(a, s0, s1) {
      return simdSwizzle(float64x2, a, [s0, s1]);
    }
  }

  if (typeof SIMD.Float64x2.shuffle === "undefined") {
    SIMD.Float64x2.shuffle = function(a, b, s0, s1) {
      return simdShuffle(float64x2, a, b, [s0, s1]);
    }
  }

  // Bool64x2
  if (typeof SIMD.Bool64x2 === "undefined" ||
      typeof SIMD.Bool64x2.extractLane === "undefined") {
    SIMD.Bool64x2 = function(s0, s1) {
      if (!(this instanceof SIMD.Bool64x2)) {
        return new SIMD.Bool64x2(s0, s1);
      }
      this.s_ = [!!s0, !!s1];
    }

    SIMD.Bool64x2.extractLane = function(v, i) {
      v = SIMD.Bool64x2.check(v);
      simdCheckLaneIndex(i, 2);
      return v.s_[i];
    }
  }

  var float64x2 = {
    name: "Float64x2",
    fn: SIMD.Float64x2,
    lanes: 2,
    laneSize: 8,
    buffer: _f64x2,
    view: Float64Array,
    mulFn: binaryMul,
    fns: ["check", "splat", "replaceLane", "select",
          "equal", "notEqual", "lessThan", "lessThanOrEqual", "greaterThan", "greaterThanOrEqual",
          "add", "sub", "mul", "div", "neg", "abs", "min", "max", "minNum", "maxNum",
          "reciprocalApproximation", "reciprocalSqrtApproximation", "sqrt",
          "load", "store"],
  }

  // XXX Emscripten: Need these functions for intrinsics, see https://github.com/tc39/ecmascript_simd/issues/316.
  float64x2.fns.push("load1");
  float64x2.fns.push("store1");
  // XXX Emscripten

  var bool64x2 = {
    name: "Bool64x2",
    fn: SIMD.Bool64x2,
    lanes: 2,
    laneSize: 8,
    notFn: unaryLogicalNot,
    fns: ["check", "splat", "replaceLane",
          "allTrue", "anyTrue", "and", "or", "xor", "not"],
  }

  float64x2.boolType = bool64x2;

  float32x4.fromBits.push(float64x2);
  int32x4.fromBits.push(float64x2);
  int16x8.fromBits.push(float64x2);
  int8x16.fromBits.push(float64x2);
  uint32x4.fromBits.push(float64x2);
  uint16x8.fromBits.push(float64x2);
  uint8x16.fromBits.push(float64x2);

  float64x2.fromBits = [float32x4, int32x4, int16x8, int8x16,
                        uint32x4, uint16x8, uint8x16];

/*
  // XXX Emscripten: Removed to fix https://github.com/tc39/ecmascript_simd/issues/314
  int32x4.fromBits = [float32x4, int16x8, int8x16, uint32x4, uint16x8, uint8x16];
  int16x8.fromBits = [float32x4, int32x4, int8x16, uint32x4, uint16x8, uint8x16];
  int8x16.fromBits = [float32x4, int32x4, int16x8, uint32x4, uint16x8, uint8x16];
  uint32x4.fromBits = [float32x4, int32x4, int16x8, int8x16, uint16x8, uint8x16];
  uint16x8.fromBits = [float32x4, int32x4, int16x8, int8x16, uint32x4, uint8x16];
  uint8x16.fromBits = [float32x4, int32x4, int16x8, int8x16, uint32x4, uint16x8];
*/

  simdTypes.push(float64x2);
  simdTypes.push(bool64x2);
}

// SIMD prototype functions.
var prototypeFns = {
  valueOf:
    function(type) {
      return function() {
        throw new TypeError(type.name + " cannot be converted to a number");
      }
    },

  toString:
    function(type) {
      return function() {
        return simdToString(type, this);
      }
    },

  toLocaleString:
    function(type) {
      return function() {
        return simdToLocaleString(type, this);
      }
    },
};

// SIMD constructor functions.

var simdFns = {
  check:
    function(type) {
      return function(a) {
        if (!(a instanceof type.fn)) {
          throw new TypeError("Argument is not a " + type.name + ".");
        }
        return a;
      }
    },

  splat:
    function(type) {
      return function(s) { return simdSplat(type, s); }
    },

  replaceLane:
    function(type) {
      return function(a, i, s) { return simdReplaceLane(type, a, i, s); }
    },

  allTrue:
    function(type) {
      return function(a) { return simdAllTrue(type, a); }
    },

  anyTrue:
    function(type) {
      return function(a) { return simdAnyTrue(type, a); }
    },

  and:
    function(type) {
      return function(a, b) {
        return simdBinaryOp(type, binaryAnd, a, b);
      }
    },

  or:
    function(type) {
      return function(a, b) {
        return simdBinaryOp(type, binaryOr, a, b);
      }
    },

  xor:
    function(type) {
      return function(a, b) {
        return simdBinaryOp(type, binaryXor, a, b);
      }
    },

  not:
    function(type) {
      return function(a) {
        return simdUnaryOp(type, type.notFn, a);
      }
    },

  equal:
    function(type) {
      return function(a, b) {
        return simdRelationalOp(type, binaryEqual, a, b);
      }
    },

  notEqual:
    function(type) {
      return function(a, b) {
        return simdRelationalOp(type, binaryNotEqual, a, b);
      }
    },

  lessThan:
    function(type) {
      return function(a, b) {
        return simdRelationalOp(type, binaryLess, a, b);
      }
    },

  lessThanOrEqual:
    function(type) {
      return function(a, b) {
        return simdRelationalOp(type, binaryLessEqual, a, b);
      }
    },

  greaterThan:
    function(type) {
      return function(a, b) {
        return simdRelationalOp(type, binaryGreater, a, b);
      }
    },

  greaterThanOrEqual:
    function(type) {
      return function(a, b) {
        return simdRelationalOp(type, binaryGreaterEqual, a, b);
      }
    },

  add:
    function(type) {
      return function(a, b) {
        return simdBinaryOp(type, binaryAdd, a, b);
      }
    },

  sub:
    function(type) {
      return function(a, b) {
        return simdBinaryOp(type, binarySub, a, b);
      }
    },

  mul:
    function(type) {
      return function(a, b) {
        return simdBinaryOp(type, type.mulFn, a, b);
      }
    },

  div:
    function(type) {
      return function(a, b) {
        return simdBinaryOp(type, binaryDiv, a, b);
      }
    },

  neg:
    function(type) {
      return function(a) {
        return simdUnaryOp(type, unaryNeg, a);
      }
    },

  abs:
    function(type) {
      return function(a) {
        return simdUnaryOp(type, Math.abs, a);
      }
    },

  min:
    function(type) {
      return function(a, b) {
        return simdBinaryOp(type, Math.min, a, b);
      }
    },

  max:
    function(type) {
      return function(a, b) {
        return simdBinaryOp(type, Math.max, a, b);
      }
    },

  minNum:
    function(type) {
      return function(a, b) {
        return simdBinaryOp(type, minNum, a, b);
      }
    },

  maxNum:
    function(type) {
      return function(a, b) {
        return simdBinaryOp(type, maxNum, a, b);
      }
    },

  load:
    function(type) {
      return function(tarray, index) {
        return simdLoad(type, tarray, index, type.lanes);
      }
    },

  load1:
    function(type) {
      return function(tarray, index) {
        return simdLoad(type, tarray, index, 1);
      }
    },

  load2:
    function(type) {
      return function(tarray, index) {
        return simdLoad(type, tarray, index, 2);
      }
    },

  load3:
    function(type) {
      return function(tarray, index) {
        return simdLoad(type, tarray, index, 3);
      }
    },

  store:
    function(type) {
      return function(tarray, index, a) {
        return simdStore(type, tarray, index, a, type.lanes);
      }
    },

  store1:
    function(type) {
      return function(tarray, index, a) {
        return simdStore(type, tarray, index, a, 1);
      }
    },

  store2:
    function(type) {
      return function(tarray, index, a) {
        return simdStore(type, tarray, index, a, 2);
      }
    },

  store3:
    function(type) {
      return function(tarray, index, a) {
        return simdStore(type, tarray, index, a, 3);
      }
    },

  select:
    function(type) {
      return function(selector, a, b) {
        return simdSelect(type, selector, a, b);
      }
    },


  reciprocalApproximation:
    function(type) {
      return function(a) {
        a = type.fn.check(a);
        return type.fn.div(type.fn.splat(1.0), a);
      }
    },

  reciprocalSqrtApproximation:
    function(type) {
      return function(a) {
        a = type.fn.check(a);
        return type.fn.reciprocalApproximation(type.fn.sqrt(a));
      }
    },

  sqrt:
    function(type) {
      return function(a) {
        return simdUnaryOp(type, Math.sqrt, a);
      }
    },

  shiftLeftByScalar:
    function(type) {
      return function(a, bits) {
        bits &= type.laneSize * 8 - 1;
        return simdShiftOp(type, binaryShiftLeft, a, bits);
      }
    },

  shiftRightByScalar:
    function(type) {
      if (type.unsigned) {
        return function(a, bits) {
          bits &= type.laneSize * 8 - 1;
          return simdShiftOp(type, binaryShiftRightLogical, a, bits);
        }
      } else {
        return function(a, bits) {
          bits &= type.laneSize * 8 - 1;
          return simdShiftOp(type, binaryShiftRightArithmetic, a, bits);
        }
      }
    },

  addSaturate:
    function(type) {
      function addSaturate(a, b) {
        return clamp(a + b, type.minVal, type.maxVal);
      }
      return function(a, b) { return simdBinaryOp(type, addSaturate, a, b); }
    },

  subSaturate:
    function(type) {
      function subSaturate(a, b) {
        return clamp(a - b, type.minVal, type.maxVal);
      }
      return function(a, b) { return simdBinaryOp(type, subSaturate, a, b); }
    },
}

// Install functions.

simdTypes.forEach(function(type) {
  // Install each prototype function on each SIMD prototype.
  var simdFn = type.fn;
  var proto = simdFn.prototype;
  for (var name in prototypeFns) {
    if (!proto.hasOwnProperty(name))
      proto[name] = prototypeFns[name](type);
  }
  // Install regular functions.
  type.fns.forEach(function(name) {
    if (typeof simdFn[name] === "undefined")
      simdFn[name] = simdFns[name](type);
  });
  // Install 'fromTIMD' functions.
  if (type.from) {
    type.from.forEach(function(fromType) {
      var name = "from" + fromType.name;
      var toType = type;  // pull type into closure.
      if (typeof type.fn[name] === "undefined") {
        type.fn[name] =
            function(a) { return simdFrom(toType, fromType, a); }
      }
    });
  }
  // Install 'fromTIMDBits' functions.
  if (type.fromBits) {
    type.fromBits.forEach(function(fromType) {
      var name = "from" + fromType.name + "Bits";
      var toType = type;  // pull type into closure.
      if (typeof type.fn[name] === "undefined") {
        type.fn[name] =
            function(a) { return simdFromBits(toType, fromType, a); }
      }
    });
  }
});

// If we're in a browser, the global namespace is named 'window'. If we're
// in node, it's named 'global'. If we're in a web worker, it's named
// 'self'. If we're in a shell, 'this' might work.
})(typeof window !== "undefined"
   ? window
   : (typeof process === 'object' &&
      typeof require === 'function' &&
      typeof global === 'object')
     ? global
     : typeof self === 'object'
       ? self
       : this);


// XXX Emscripten-specific below XXX

// Work around Firefox Nightly bug that Float64x2 comparison return a Int32x4 instead of a Bool64x2.
try {
  if (SIMD.Int32x4.check(SIMD.Float64x2.equal(SIMD.Float64x2.splat(5.0), SIMD.Float64x2.splat(5.0)))) {
    SIMD.Float64x2.prevEqual = SIMD.Float64x2.equal;
    SIMD.Float64x2.equal = function(a, b) {
      var int32x4 = SIMD.Float64x2.prevEqual(a, b);
      return SIMD.Bool64x2(SIMD.Int32x4.extractLane(int32x4, 1) != 0, SIMD.Int32x4.extractLane(int32x4, 3) != 0);
    }
    console.error('Warning: Patching up SIMD.Float64x2.equal to return a Bool64x2 instead of Int32x4!');
  }
} catch(e) {}
try {
  if (SIMD.Int32x4.check(SIMD.Float64x2.notEqual(SIMD.Float64x2.splat(5.0), SIMD.Float64x2.splat(5.0)))) {
    SIMD.Float64x2.prevNotEqual = SIMD.Float64x2.notEqual;
    SIMD.Float64x2.notEqual = function(a, b) {
      var int32x4 = SIMD.Float64x2.prevNotEqual(a, b);
      return SIMD.Bool64x2(SIMD.Int32x4.extractLane(int32x4, 1) != 0, SIMD.Int32x4.extractLane(int32x4, 3) != 0);
    } 
    console.error('Warning: Patching up SIMD.Float64x2.notEqual to return a Bool64x2 instead of Int32x4!');
  }
} catch(e) {}
try {
  if (SIMD.Int32x4.check(SIMD.Float64x2.greaterThan(SIMD.Float64x2.splat(5.0), SIMD.Float64x2.splat(5.0)))) {
    SIMD.Float64x2.prevGreaterThan = SIMD.Float64x2.greaterThan;
    SIMD.Float64x2.greaterThan = function(a, b) {
      var int32x4 = SIMD.Float64x2.prevGreaterThan(a, b);
      return SIMD.Bool64x2(SIMD.Int32x4.extractLane(int32x4, 1) != 0, SIMD.Int32x4.extractLane(int32x4, 3) != 0);
    } 
    console.error('Warning: Patching up SIMD.Float64x2.greaterThan to return a Bool64x2 instead of Int32x4!');
  }
} catch(e) {}
try {
  if (SIMD.Int32x4.check(SIMD.Float64x2.greaterThanOrEqual(SIMD.Float64x2.splat(5.0), SIMD.Float64x2.splat(5.0)))) {
    SIMD.Float64x2.prevGreaterThanOrEqual = SIMD.Float64x2.greaterThanOrEqual;
    SIMD.Float64x2.greaterThanOrEqual = function(a, b) {
      var int32x4 = SIMD.Float64x2.prevGreaterThanOrEqual(a, b);
      return SIMD.Bool64x2(SIMD.Int32x4.extractLane(int32x4, 1) != 0, SIMD.Int32x4.extractLane(int32x4, 3) != 0);
    } 
    console.error('Warning: Patching up SIMD.Float64x2.greaterThanOrEqual to return a Bool64x2 instead of Int32x4!');
  }
} catch(e) {}
try {
  if (SIMD.Int32x4.check(SIMD.Float64x2.lessThan(SIMD.Float64x2.splat(5.0), SIMD.Float64x2.splat(5.0)))) {
    SIMD.Float64x2.prevLessThan = SIMD.Float64x2.lessThan;
    SIMD.Float64x2.lessThan = function(a, b) {
      var int32x4 = SIMD.Float64x2.prevLessThan(a, b);
      return SIMD.Bool64x2(SIMD.Int32x4.extractLane(int32x4, 1) != 0, SIMD.Int32x4.extractLane(int32x4, 3) != 0);
    } 
    console.error('Warning: Patching up SIMD.Float64x2.lessThan to return a Bool64x2 instead of Int32x4!');
  }
} catch(e) {}
try {
  if (SIMD.Int32x4.check(SIMD.Float64x2.lessThanOrEqual(SIMD.Float64x2.splat(5.0), SIMD.Float64x2.splat(5.0)))) {
    SIMD.Float64x2.prevLessThanOrEqual = SIMD.Float64x2.lessThanOrEqual;
    SIMD.Float64x2.lessThanOrEqual = function(a, b) {
      var int32x4 = SIMD.Float64x2.prevLessThanOrEqual(a, b);
      return SIMD.Bool64x2(SIMD.Int32x4.extractLane(int32x4, 1) != 0, SIMD.Int32x4.extractLane(int32x4, 3) != 0);
    } 
    console.error('Warning: Patching up SIMD.Float64x2.lessThanOrEqual to return a Bool64x2 instead of Int32x4!');
  }
} catch(e) {}


if (!SIMD.Int32x4.fromBool64x2Bits) {
  SIMD.Int32x4.fromBool64x2Bits = function(bool64x2) {
    var lane0 = SIMD.Bool64x2.extractLane(bool64x2, 0)?-1:0;
    var lane1 = SIMD.Bool64x2.extractLane(bool64x2, 1)?-1:0;
    return SIMD.Int32x4(lane0, lane0, lane1, lane1);
  }
}


// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  else if (returnType === 'boolean') ret = Boolean(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 9920;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_js_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
          var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          });
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  
  function runDestructor(handle) {
      var $$ = handle.$$;
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      this.$$.count.value -= 1;
      var toDelete = 0 === this.$$.count.value;
      if (toDelete) {
          runDestructor(this);
      }
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return Object.create(prototype, {
          $$: {
              value: record,
          },
      });
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module["asm"]['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module["asm"]['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  var destructors = [];
                  var args = new Array(argCount);
                  args[0] = rawConstructor;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  function __embind_register_constant(name, type, value) {
      name = readLatin1String(name);
      whenDependentTypesAreResolved([], [type], function(type) {
          type = type[0];
          Module[name] = type['fromWireType'](value);
          return [];
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function enumReadValueFromPointer(name, shift, signed) {
      switch (shift) {
          case 0: return function(pointer) {
              var heap = signed ? HEAP8 : HEAPU8;
              return this['fromWireType'](heap[pointer]);
          };
          case 1: return function(pointer) {
              var heap = signed ? HEAP16 : HEAPU16;
              return this['fromWireType'](heap[pointer >> 1]);
          };
          case 2: return function(pointer) {
              var heap = signed ? HEAP32 : HEAPU32;
              return this['fromWireType'](heap[pointer >> 2]);
          };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_enum(
      rawType,
      name,
      size,
      isSigned
    ) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
  
      function ctor() {
      }
      ctor.values = {};
  
      registerType(rawType, {
          name: name,
          constructor: ctor,
          'fromWireType': function(c) {
              return this.constructor.values[c];
          },
          'toWireType': function(destructors, c) {
              return c.value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': enumReadValueFromPointer(name, shift, isSigned),
          destructorFunction: null,
      });
      exposePublicSymbol(name, ctor);
    }

  
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }function __embind_register_enum_value(
      rawEnumType,
      name,
      enumValue
    ) {
      var enumType = requireRegisteredType(rawEnumType, 'enum');
      name = readLatin1String(name);
  
      var Enum = enumType.constructor;
  
      var Value = Object.create(enumType.constructor.prototype, {
          value: {value: enumValue},
          constructor: {value: createNamedFunction(enumType.name + '_' + name, function() {})},
      });
      Enum.values[enumValue] = Value;
      Enum[name] = Value;
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Uint8ClampedArray) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }


  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }

  function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }

  function _abort() {
      Module['abort']();
    }

   

   



   

   

  
    


  function _llvm_cttz_i64(l, h) {
      var ret = _llvm_cttz_i32(l);
      if (ret == 32) ret += _llvm_cttz_i32(h);
      return ((setTempRet0(0),ret)|0);
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "SIMD": SIMD };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "ClassHandle": ClassHandle, "ClassHandle_clone": ClassHandle_clone, "ClassHandle_delete": ClassHandle_delete, "ClassHandle_deleteLater": ClassHandle_deleteLater, "ClassHandle_isAliasOf": ClassHandle_isAliasOf, "ClassHandle_isDeleted": ClassHandle_isDeleted, "RegisteredClass": RegisteredClass, "RegisteredPointer": RegisteredPointer, "RegisteredPointer_deleteObject": RegisteredPointer_deleteObject, "RegisteredPointer_destructor": RegisteredPointer_destructor, "RegisteredPointer_fromWireType": RegisteredPointer_fromWireType, "RegisteredPointer_getPointee": RegisteredPointer_getPointee, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_throw": ___cxa_throw, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "__embind_register_bool": __embind_register_bool, "__embind_register_class": __embind_register_class, "__embind_register_class_constructor": __embind_register_class_constructor, "__embind_register_class_function": __embind_register_class_function, "__embind_register_constant": __embind_register_constant, "__embind_register_emval": __embind_register_emval, "__embind_register_enum": __embind_register_enum, "__embind_register_enum_value": __embind_register_enum_value, "__embind_register_float": __embind_register_float, "__embind_register_integer": __embind_register_integer, "__embind_register_memory_view": __embind_register_memory_view, "__embind_register_std_string": __embind_register_std_string, "__embind_register_std_wstring": __embind_register_std_wstring, "__embind_register_void": __embind_register_void, "__emval_decref": __emval_decref, "__emval_incref": __emval_incref, "__emval_register": __emval_register, "__emval_take_value": __emval_take_value, "_abort": _abort, "_embind_repr": _embind_repr, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_llvm_cttz_i64": _llvm_cttz_i64, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "constNoSmartPtrRawPointerToWireType": constNoSmartPtrRawPointerToWireType, "count_emval_handles": count_emval_handles, "craftInvokerFunction": craftInvokerFunction, "createNamedFunction": createNamedFunction, "downcastPointer": downcastPointer, "embind__requireFunction": embind__requireFunction, "embind_init_charCodes": embind_init_charCodes, "ensureOverloadTable": ensureOverloadTable, "enumReadValueFromPointer": enumReadValueFromPointer, "exposePublicSymbol": exposePublicSymbol, "extendError": extendError, "floatReadValueFromPointer": floatReadValueFromPointer, "flushPendingDeletes": flushPendingDeletes, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "genericPointerToWireType": genericPointerToWireType, "getBasestPointer": getBasestPointer, "getInheritedInstance": getInheritedInstance, "getInheritedInstanceCount": getInheritedInstanceCount, "getLiveInheritedInstances": getLiveInheritedInstances, "getShiftFromSize": getShiftFromSize, "getTypeName": getTypeName, "get_first_emval": get_first_emval, "heap32VectorToArray": heap32VectorToArray, "init_ClassHandle": init_ClassHandle, "init_RegisteredPointer": init_RegisteredPointer, "init_embind": init_embind, "init_emval": init_emval, "integerReadValueFromPointer": integerReadValueFromPointer, "makeClassHandle": makeClassHandle, "makeLegalFunctionName": makeLegalFunctionName, "new_": new_, "nonConstNoSmartPtrRawPointerToWireType": nonConstNoSmartPtrRawPointerToWireType, "readLatin1String": readLatin1String, "registerType": registerType, "replacePublicSymbol": replacePublicSymbol, "requireRegisteredType": requireRegisteredType, "runDestructor": runDestructor, "runDestructors": runDestructors, "setDelayFunction": setDelayFunction, "shallowCopyInternalPointer": shallowCopyInternalPointer, "simpleReadValueFromPointer": simpleReadValueFromPointer, "throwBindingError": throwBindingError, "throwInstanceAlreadyDeleted": throwInstanceAlreadyDeleted, "throwInternalError": throwInternalError, "throwUnboundTypeError": throwUnboundTypeError, "upcastPointer": upcastPointer, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var Math_fround=global.Math.fround;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var ClassHandle=env.ClassHandle;
  var ClassHandle_clone=env.ClassHandle_clone;
  var ClassHandle_delete=env.ClassHandle_delete;
  var ClassHandle_deleteLater=env.ClassHandle_deleteLater;
  var ClassHandle_isAliasOf=env.ClassHandle_isAliasOf;
  var ClassHandle_isDeleted=env.ClassHandle_isDeleted;
  var RegisteredClass=env.RegisteredClass;
  var RegisteredPointer=env.RegisteredPointer;
  var RegisteredPointer_deleteObject=env.RegisteredPointer_deleteObject;
  var RegisteredPointer_destructor=env.RegisteredPointer_destructor;
  var RegisteredPointer_fromWireType=env.RegisteredPointer_fromWireType;
  var RegisteredPointer_getPointee=env.RegisteredPointer_getPointee;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_throw=env.___cxa_throw;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var __embind_register_bool=env.__embind_register_bool;
  var __embind_register_class=env.__embind_register_class;
  var __embind_register_class_constructor=env.__embind_register_class_constructor;
  var __embind_register_class_function=env.__embind_register_class_function;
  var __embind_register_constant=env.__embind_register_constant;
  var __embind_register_emval=env.__embind_register_emval;
  var __embind_register_enum=env.__embind_register_enum;
  var __embind_register_enum_value=env.__embind_register_enum_value;
  var __embind_register_float=env.__embind_register_float;
  var __embind_register_integer=env.__embind_register_integer;
  var __embind_register_memory_view=env.__embind_register_memory_view;
  var __embind_register_std_string=env.__embind_register_std_string;
  var __embind_register_std_wstring=env.__embind_register_std_wstring;
  var __embind_register_void=env.__embind_register_void;
  var __emval_decref=env.__emval_decref;
  var __emval_incref=env.__emval_incref;
  var __emval_register=env.__emval_register;
  var __emval_take_value=env.__emval_take_value;
  var _abort=env._abort;
  var _embind_repr=env._embind_repr;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _llvm_cttz_i64=env._llvm_cttz_i64;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var constNoSmartPtrRawPointerToWireType=env.constNoSmartPtrRawPointerToWireType;
  var count_emval_handles=env.count_emval_handles;
  var craftInvokerFunction=env.craftInvokerFunction;
  var createNamedFunction=env.createNamedFunction;
  var downcastPointer=env.downcastPointer;
  var embind__requireFunction=env.embind__requireFunction;
  var embind_init_charCodes=env.embind_init_charCodes;
  var ensureOverloadTable=env.ensureOverloadTable;
  var enumReadValueFromPointer=env.enumReadValueFromPointer;
  var exposePublicSymbol=env.exposePublicSymbol;
  var extendError=env.extendError;
  var floatReadValueFromPointer=env.floatReadValueFromPointer;
  var flushPendingDeletes=env.flushPendingDeletes;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var genericPointerToWireType=env.genericPointerToWireType;
  var getBasestPointer=env.getBasestPointer;
  var getInheritedInstance=env.getInheritedInstance;
  var getInheritedInstanceCount=env.getInheritedInstanceCount;
  var getLiveInheritedInstances=env.getLiveInheritedInstances;
  var getShiftFromSize=env.getShiftFromSize;
  var getTypeName=env.getTypeName;
  var get_first_emval=env.get_first_emval;
  var heap32VectorToArray=env.heap32VectorToArray;
  var init_ClassHandle=env.init_ClassHandle;
  var init_RegisteredPointer=env.init_RegisteredPointer;
  var init_embind=env.init_embind;
  var init_emval=env.init_emval;
  var integerReadValueFromPointer=env.integerReadValueFromPointer;
  var makeClassHandle=env.makeClassHandle;
  var makeLegalFunctionName=env.makeLegalFunctionName;
  var new_=env.new_;
  var nonConstNoSmartPtrRawPointerToWireType=env.nonConstNoSmartPtrRawPointerToWireType;
  var readLatin1String=env.readLatin1String;
  var registerType=env.registerType;
  var replacePublicSymbol=env.replacePublicSymbol;
  var requireRegisteredType=env.requireRegisteredType;
  var runDestructor=env.runDestructor;
  var runDestructors=env.runDestructors;
  var setDelayFunction=env.setDelayFunction;
  var shallowCopyInternalPointer=env.shallowCopyInternalPointer;
  var simpleReadValueFromPointer=env.simpleReadValueFromPointer;
  var throwBindingError=env.throwBindingError;
  var throwInstanceAlreadyDeleted=env.throwInstanceAlreadyDeleted;
  var throwInternalError=env.throwInternalError;
  var throwUnboundTypeError=env.throwUnboundTypeError;
  var upcastPointer=env.upcastPointer;
  var whenDependentTypesAreResolved=env.whenDependentTypesAreResolved;
  var SIMD_Int8x16=global.SIMD.Int8x16;
  var SIMD_Int32x4=global.SIMD.Int32x4;
  var SIMD_Bool8x16=global.SIMD.Bool8x16;
  var SIMD_Int8x16_splat=SIMD_Int8x16.splat;
  var SIMD_Int8x16_check=SIMD_Int8x16.check;
  var SIMD_Int8x16_extractLane=SIMD_Int8x16.extractLane;
  var SIMD_Int8x16_replaceLane=SIMD_Int8x16.replaceLane;
  var SIMD_Int8x16_add=SIMD_Int8x16.add;
  var SIMD_Int8x16_sub=SIMD_Int8x16.sub;
  var SIMD_Int8x16_neg=SIMD_Int8x16.neg;
  var SIMD_Int8x16_mul=SIMD_Int8x16.mul;
  var SIMD_Int8x16_equal=SIMD_Int8x16.equal;
  var SIMD_Int8x16_lessThan=SIMD_Int8x16.lessThan;
  var SIMD_Int8x16_greaterThan=SIMD_Int8x16.greaterThan;
  var SIMD_Int8x16_notEqual=SIMD_Int8x16.notEqual;
  var SIMD_Int8x16_lessThanOrEqual=SIMD_Int8x16.lessThanOrEqual;
  var SIMD_Int8x16_greaterThanOrEqual=SIMD_Int8x16.greaterThanOrEqual;
  var SIMD_Int8x16_select=SIMD_Int8x16.select;
  var SIMD_Int8x16_swizzle=SIMD_Int8x16.swizzle;
  var SIMD_Int8x16_shuffle=SIMD_Int8x16.shuffle;
  var SIMD_Int8x16_load=SIMD_Int8x16.load;
  var SIMD_Int8x16_store=SIMD_Int8x16.store;
  var SIMD_Int8x16_fromInt32x4Bits=SIMD_Int8x16.fromInt32x4Bits;
  var SIMD_Int8x16_and=SIMD_Int8x16.and;
  var SIMD_Int8x16_xor=SIMD_Int8x16.xor;
  var SIMD_Int8x16_or=SIMD_Int8x16.or;
  var SIMD_Int8x16_not=SIMD_Int8x16.not;
  var SIMD_Int8x16_shiftLeftByScalar=SIMD_Int8x16.shiftLeftByScalar;
  var SIMD_Int8x16_shiftRightByScalar=SIMD_Int8x16.shiftRightByScalar;
  var SIMD_Int8x16_addSaturate=SIMD_Int8x16.addSaturate;
  var SIMD_Int8x16_subSaturate=SIMD_Int8x16.subSaturate;
  var SIMD_Int32x4_splat=SIMD_Int32x4.splat;
  var SIMD_Int32x4_check=SIMD_Int32x4.check;
  var SIMD_Int32x4_extractLane=SIMD_Int32x4.extractLane;
  var SIMD_Int32x4_replaceLane=SIMD_Int32x4.replaceLane;
  var SIMD_Int32x4_add=SIMD_Int32x4.add;
  var SIMD_Int32x4_sub=SIMD_Int32x4.sub;
  var SIMD_Int32x4_neg=SIMD_Int32x4.neg;
  var SIMD_Int32x4_mul=SIMD_Int32x4.mul;
  var SIMD_Int32x4_equal=SIMD_Int32x4.equal;
  var SIMD_Int32x4_lessThan=SIMD_Int32x4.lessThan;
  var SIMD_Int32x4_greaterThan=SIMD_Int32x4.greaterThan;
  var SIMD_Int32x4_notEqual=SIMD_Int32x4.notEqual;
  var SIMD_Int32x4_lessThanOrEqual=SIMD_Int32x4.lessThanOrEqual;
  var SIMD_Int32x4_greaterThanOrEqual=SIMD_Int32x4.greaterThanOrEqual;
  var SIMD_Int32x4_select=SIMD_Int32x4.select;
  var SIMD_Int32x4_swizzle=SIMD_Int32x4.swizzle;
  var SIMD_Int32x4_shuffle=SIMD_Int32x4.shuffle;
  var SIMD_Int32x4_load=SIMD_Int32x4.load;
  var SIMD_Int32x4_store=SIMD_Int32x4.store;
  var SIMD_Int32x4_load1=SIMD_Int32x4.load1;
  var SIMD_Int32x4_store1=SIMD_Int32x4.store1;
  var SIMD_Int32x4_load2=SIMD_Int32x4.load2;
  var SIMD_Int32x4_store2=SIMD_Int32x4.store2;
  var SIMD_Int32x4_fromInt8x16Bits=SIMD_Int32x4.fromInt8x16Bits;
  var SIMD_Int32x4_and=SIMD_Int32x4.and;
  var SIMD_Int32x4_xor=SIMD_Int32x4.xor;
  var SIMD_Int32x4_or=SIMD_Int32x4.or;
  var SIMD_Int32x4_not=SIMD_Int32x4.not;
  var SIMD_Int32x4_shiftLeftByScalar=SIMD_Int32x4.shiftLeftByScalar;
  var SIMD_Int32x4_shiftRightByScalar=SIMD_Int32x4.shiftRightByScalar;
  var SIMD_Bool8x16_splat=SIMD_Bool8x16.splat;
  var SIMD_Bool8x16_check=SIMD_Bool8x16.check;
  var SIMD_Bool8x16_extractLane=SIMD_Bool8x16.extractLane;
  var SIMD_Bool8x16_replaceLane=SIMD_Bool8x16.replaceLane;
  var SIMD_Bool8x16_and=SIMD_Bool8x16.and;
  var SIMD_Bool8x16_xor=SIMD_Bool8x16.xor;
  var SIMD_Bool8x16_or=SIMD_Bool8x16.or;
  var SIMD_Bool8x16_not=SIMD_Bool8x16.not;
  var SIMD_Bool8x16_anyTrue=SIMD_Bool8x16.anyTrue;
  var SIMD_Bool8x16_allTrue=SIMD_Bool8x16.allTrue;
  var tempFloat = Math_fround(0);
  const f0 = Math_fround(0);

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __ZN4surf9sizeAlignERj($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 7)|0;
 $3 = $2 & -8;
 HEAP32[$0>>2] = $3;
 return;
}
function __ZN4surf9sizeAlignERy($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (_i64Add(($3|0),($6|0),7,0)|0);
 $8 = tempRet0;
 $9 = $7 & -8;
 $10 = $0;
 $11 = $10;
 HEAP32[$11>>2] = $9;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $8;
 return;
}
function __ZNK4surf9Bitvector7readBitEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 >>> 6;
 $3 = $1 & 63;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<3)|0);
 $7 = $6;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (_bitshift64Lshr(0,-2147483648,($3|0))|0);
 $14 = tempRet0;
 $15 = $9 & $13;
 $16 = $12 & $14;
 $17 = ($15|0)!=(0);
 $18 = ($16|0)!=(0);
 $19 = $17 | $18;
 return ($19|0);
}
function __ZNK4surf9Bitvector20distanceToNextSetBitEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$02125 = 0, $$02224 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + 1)|0;
 $3 = $2 >>> 6;
 $4 = (__ZNK4surf9Bitvector8numWordsEv($0)|0);
 $5 = ($3>>>0)<($4>>>0);
 if (!($5)) {
  $$0 = 1;
  return ($$0|0);
 }
 $6 = $2 & 63;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($3<<3)|0);
 $10 = $9;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (_bitshift64Shl(($12|0),($15|0),($6|0))|0);
 $17 = tempRet0;
 $18 = ($16|0)==(0);
 $19 = ($17|0)==(0);
 $20 = $18 & $19;
 if (!($20)) {
  $21 = (_llvm_ctlz_i64(($16|0),($17|0),0)|0);
  $22 = tempRet0;
  $23 = (($21) + 1)|0;
  $$0 = $23;
  return ($$0|0);
 }
 $24 = (__ZNK4surf9Bitvector8numWordsEv($0)|0);
 $25 = (($24) + -1)|0;
 $26 = ($3|0)==($25|0);
 if ($26) {
  $27 = HEAP32[$0>>2]|0;
  $28 = (($27) - ($1))|0;
  $$0 = $28;
  return ($$0|0);
 }
 $29 = (65 - ($6))|0;
 $30 = (__ZNK4surf9Bitvector8numWordsEv($0)|0);
 $31 = ($3>>>0)<($30>>>0);
 if ($31) {
  $$02125 = $3;$$02224 = $29;
 } else {
  $$0 = $29;
  return ($$0|0);
 }
 while(1) {
  $32 = (($$02125) + 1)|0;
  $33 = HEAP32[$7>>2]|0;
  $34 = (($33) + ($32<<3)|0);
  $35 = $34;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + 4)|0;
  $39 = $38;
  $40 = HEAP32[$39>>2]|0;
  $41 = ($37|0)==(0);
  $42 = ($40|0)==(0);
  $43 = $41 & $42;
  if (!($43)) {
   break;
  }
  $47 = (($$02224) + 64)|0;
  $48 = (__ZNK4surf9Bitvector8numWordsEv($0)|0);
  $49 = ($32>>>0)<($48>>>0);
  if ($49) {
   $$02125 = $32;$$02224 = $47;
  } else {
   $$0 = $47;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 $44 = (_llvm_ctlz_i64(($37|0),($40|0),0)|0);
 $45 = tempRet0;
 $46 = (($$02224) + ($44))|0;
 $$0 = $46;
 return ($$0|0);
}
function __ZNK4surf9Bitvector8numWordsEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 63;
 $3 = ($2|0)!=(0);
 $4 = $1 >>> 6;
 $5 = $3&1;
 $$0 = (($4) + ($5))|0;
 return ($$0|0);
}
function __ZNK4surf9Bitvector20distanceToPrevSetBitEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01923 = 0, $$02022 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (($1) + -1)|0;
 $4 = $3 >>> 6;
 $5 = $3 & 63;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4<<3)|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $5 ^ 63;
 $16 = (_bitshift64Lshr(($11|0),($14|0),($15|0))|0);
 $17 = tempRet0;
 $18 = ($16|0)==(0);
 $19 = ($17|0)==(0);
 $20 = $18 & $19;
 if (!($20)) {
  $21 = (_llvm_cttz_i64(($16|0),($17|0),0)|0);
  $22 = tempRet0;
  $23 = (($21) + 1)|0;
  $$0 = $23;
  return ($$0|0);
 }
 $24 = ($4|0)==(0);
 if ($24) {
  $25 = (($5) + 1)|0;
  $$0 = $25;
  return ($$0|0);
 }
 $26 = (($5) + 2)|0;
 $$01923 = $4;$$02022 = $26;
 while(1) {
  $27 = (($$01923) + -1)|0;
  $28 = (($7) + ($27<<3)|0);
  $29 = $28;
  $30 = $29;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($29) + 4)|0;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = ($31|0)==(0);
  $36 = ($34|0)==(0);
  $37 = $35 & $36;
  if (!($37)) {
   break;
  }
  $41 = (($$02022) + 64)|0;
  $42 = ($27|0)==(0);
  if ($42) {
   $$0 = $41;
   label = 10;
   break;
  } else {
   $$01923 = $27;$$02022 = $41;
  }
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 $38 = (_llvm_cttz_i64(($31|0),($34|0),0)|0);
 $39 = tempRet0;
 $40 = (($$02022) + ($38))|0;
 $$0 = $40;
 return ($$0|0);
}
function __ZN4surf9Bitvector12totalNumBitsERKNSt3__26vectorIjNS1_9allocatorIjEEEEjj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$010$lcssa = 0, $$01011 = 0, $$012 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2>>>0)<($3>>>0);
 if (!($4)) {
  $$010$lcssa = 0;
  return ($$010$lcssa|0);
 }
 $5 = HEAP32[$1>>2]|0;
 $$01011 = 0;$$012 = $2;
 while(1) {
  $6 = (($5) + ($$012<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($$01011))|0;
  $9 = (($$012) + 1)|0;
  $exitcond = ($9|0)==($3|0);
  if ($exitcond) {
   $$010$lcssa = $8;
   break;
  } else {
   $$01011 = $8;$$012 = $9;
  }
 }
 return ($$010$lcssa|0);
}
function __ZN4surf9Bitvector21concatenateBitvectorsERKNSt3__26vectorINS2_IyNS1_9allocatorIyEEEENS3_IS5_EEEERKNS2_IjNS3_IjEEEEjj($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$06170 = 0, $$06365 = 0, $$06467 = 0, $$071 = 0, $$1 = 0, $$162$lcssa = 0, $$16266 = 0, $$2 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre76 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond75 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($3>>>0)<($4>>>0);
 if (!($5)) {
  return;
 }
 $6 = ((($0)) + 4|0);
 $$06170 = 0;$$06467 = $3;$$071 = 0;
 while(1) {
  $7 = HEAP32[$2>>2]|0;
  $8 = (($7) + ($$06467<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0);
  do {
   if ($10) {
    $$1 = $$071;$$2 = $$06170;
   } else {
    $11 = $9 >>> 6;
    $12 = ($11|0)==(0);
    if ($12) {
     $$162$lcssa = $$06170;$72 = $9;
    } else {
     $13 = ($$071|0)==(0);
     $14 = (64 - ($$071))|0;
     $$06365 = 0;$$16266 = $$06170;
     while(1) {
      $15 = HEAP32[$1>>2]|0;
      $16 = (($15) + (($$06467*12)|0)|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = (($17) + ($$06365<<3)|0);
      $19 = $18;
      $20 = $19;
      $21 = HEAP32[$20>>2]|0;
      $22 = (($19) + 4)|0;
      $23 = $22;
      $24 = HEAP32[$23>>2]|0;
      $25 = (_bitshift64Lshr(($21|0),($24|0),($$071|0))|0);
      $26 = tempRet0;
      $27 = HEAP32[$6>>2]|0;
      $28 = (($27) + ($$16266<<3)|0);
      $29 = $28;
      $30 = $29;
      $31 = HEAP32[$30>>2]|0;
      $32 = (($29) + 4)|0;
      $33 = $32;
      $34 = HEAP32[$33>>2]|0;
      $35 = $31 | $25;
      $36 = $34 | $26;
      $37 = $28;
      $38 = $37;
      HEAP32[$38>>2] = $35;
      $39 = (($37) + 4)|0;
      $40 = $39;
      HEAP32[$40>>2] = $36;
      $41 = (($$16266) + 1)|0;
      if (!($13)) {
       $42 = HEAP32[$1>>2]|0;
       $43 = (($42) + (($$06467*12)|0)|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = (($44) + ($$06365<<3)|0);
       $46 = $45;
       $47 = $46;
       $48 = HEAP32[$47>>2]|0;
       $49 = (($46) + 4)|0;
       $50 = $49;
       $51 = HEAP32[$50>>2]|0;
       $52 = (_bitshift64Shl(($48|0),($51|0),($14|0))|0);
       $53 = tempRet0;
       $54 = HEAP32[$6>>2]|0;
       $55 = (($54) + ($41<<3)|0);
       $56 = $55;
       $57 = $56;
       $58 = HEAP32[$57>>2]|0;
       $59 = (($56) + 4)|0;
       $60 = $59;
       $61 = HEAP32[$60>>2]|0;
       $62 = $58 | $52;
       $63 = $61 | $53;
       $64 = $55;
       $65 = $64;
       HEAP32[$65>>2] = $62;
       $66 = (($64) + 4)|0;
       $67 = $66;
       HEAP32[$67>>2] = $63;
      }
      $68 = (($$06365) + 1)|0;
      $exitcond = ($68|0)==($11|0);
      if ($exitcond) {
       break;
      } else {
       $$06365 = $68;$$16266 = $41;
      }
     }
     $69 = (($$06170) + ($11))|0;
     $$pre = HEAP32[$2>>2]|0;
     $$phi$trans$insert = (($$pre) + ($$06467<<2)|0);
     $$pre76 = HEAP32[$$phi$trans$insert>>2]|0;
     $$162$lcssa = $69;$72 = $$pre76;
    }
    $70 = $9 & -64;
    $71 = (($72) - ($70))|0;
    $73 = ($71|0)==(0);
    if ($73) {
     $$1 = $$071;$$2 = $$162$lcssa;
    } else {
     $74 = HEAP32[$1>>2]|0;
     $75 = (($74) + (($$06467*12)|0)|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (($76) + ($11<<3)|0);
     $78 = $77;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $81 = (($78) + 4)|0;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $84 = (_bitshift64Lshr(($80|0),($83|0),($$071|0))|0);
     $85 = tempRet0;
     $86 = HEAP32[$6>>2]|0;
     $87 = (($86) + ($$162$lcssa<<3)|0);
     $88 = $87;
     $89 = $88;
     $90 = HEAP32[$89>>2]|0;
     $91 = (($88) + 4)|0;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $94 = $90 | $84;
     $95 = $93 | $85;
     $96 = $87;
     $97 = $96;
     HEAP32[$97>>2] = $94;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = $95;
     $100 = (_i64Add(($71|0),0,($$071|0),0)|0);
     $101 = tempRet0;
     $102 = ($101>>>0)<(0);
     $103 = ($100>>>0)<(64);
     $104 = ($101|0)==(0);
     $105 = $104 & $103;
     $106 = $102 | $105;
     if ($106) {
      $$1 = $100;$$2 = $$162$lcssa;
      break;
     } else {
      $107 = (($$162$lcssa) + 1)|0;
      $108 = (64 - ($$071))|0;
      $109 = (_bitshift64Shl(($80|0),($83|0),($108|0))|0);
      $110 = tempRet0;
      $111 = HEAP32[$6>>2]|0;
      $112 = (($111) + ($107<<3)|0);
      $113 = $112;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = (($113) + 4)|0;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = $115 | $109;
      $120 = $118 | $110;
      $121 = $112;
      $122 = $121;
      HEAP32[$122>>2] = $119;
      $123 = (($121) + 4)|0;
      $124 = $123;
      HEAP32[$124>>2] = $120;
      $125 = (_i64Add(($100|0),($101|0),-64,0)|0);
      $126 = tempRet0;
      $$1 = $125;$$2 = $107;
      break;
     }
    }
   }
  } while(0);
  $127 = (($$06467) + 1)|0;
  $exitcond75 = ($127|0)==($4|0);
  if ($exitcond75) {
   break;
  } else {
   $$06170 = $$2;$$06467 = $127;$$071 = $$1;
  }
 }
 return;
}
function __ZNK4surf15BitvectorSuffix4readEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $40 = 0;$41 = 0;
  tempRet0 = ($40);
  return ($41|0);
 }
 $5 = (__ZNK4surf15BitvectorSuffix12getSuffixLenEv($0)|0);
 $6 = Math_imul($5, $1)|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = ($6>>>0)<($7>>>0);
 if (!($8)) {
  $40 = 0;$41 = 0;
  tempRet0 = ($40);
  return ($41|0);
 }
 $9 = $6 >>> 6;
 $10 = $6 & 63;
 $11 = ((($0)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($9<<3)|0);
 $14 = $13;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (_bitshift64Shl(($16|0),($19|0),($10|0))|0);
 $21 = tempRet0;
 $22 = (64 - ($5))|0;
 $23 = (_bitshift64Lshr(($20|0),($21|0),($22|0))|0);
 $24 = tempRet0;
 $25 = (($10) + ($5))|0;
 $26 = ($25>>>0)>(64);
 if (!($26)) {
  $40 = $24;$41 = $23;
  tempRet0 = ($40);
  return ($41|0);
 }
 $27 = (($22) - ($10))|0;
 $28 = (($9) + 1)|0;
 $29 = (($12) + ($28<<3)|0);
 $30 = $29;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (_bitshift64Lshr(($32|0),($35|0),($27|0))|0);
 $37 = tempRet0;
 $38 = (_i64Add(($36|0),($37|0),($23|0),($24|0))|0);
 $39 = tempRet0;
 $40 = $39;$41 = $38;
 tempRet0 = ($40);
 return ($41|0);
}
function __ZNK4surf15BitvectorSuffix12getSuffixLenEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2))|0;
 return ($5|0);
}
function __ZN4surf15BitvectorSuffix17extractRealSuffixEyj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_bitshift64Shl(1,0,($2|0))|0);
 $4 = tempRet0;
 $5 = (_i64Add(($3|0),($4|0),-1,-1)|0);
 $6 = tempRet0;
 $7 = $5 & $0;
 $8 = $6 & $1;
 tempRet0 = ($8);
 return ($7|0);
}
function __ZNK4surf15BitvectorSuffix13checkEqualityEjRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 1;
  return ($$0|0);
 }
 $7 = (__ZNK4surf15BitvectorSuffix12getSuffixLenEv($0)|0);
 $8 = Math_imul($7, $1)|0;
 $9 = HEAP32[$0>>2]|0;
 $10 = ($8>>>0)<($9>>>0);
 if (!($10)) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = (__ZNK4surf15BitvectorSuffix4readEj($0,$1)|0);
 $12 = tempRet0;
 $13 = HEAP32[$4>>2]|0;
 $14 = ($13|0)==(2);
 if ($14) {
  $15 = ($11|0)==(0);
  $16 = ($12|0)==(0);
  $17 = $15 & $16;
  if ($17) {
   $$0 = 1;
   return ($$0|0);
  }
  $18 = ((($2)) + 11|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $20 & 128;
  $22 = ($21|0)==(0);
  $23 = ((($2)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $22 ? $20 : $24;
  $26 = ($25>>>0)<($3>>>0);
  if ($26) {
   $$0 = 0;
   return ($$0|0);
  }
  $27 = (($25) - ($3))|0;
  $28 = $27 << 3;
  $29 = ((($0)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28>>>0)<($30>>>0);
  if ($31) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $34 = $30;
  }
 } else {
  $$phi$trans$insert = ((($0)) + 16|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $34 = $$pre;
 }
 $32 = ((($0)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $35 = (__ZN4surf15BitvectorSuffix15constructSuffixENS_10SuffixTypeERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEjjj($13,$2,$33,$3,$34)|0);
 $36 = tempRet0;
 $37 = ($11|0)==($35|0);
 $38 = ($12|0)==($36|0);
 $39 = $37 & $38;
 $$0 = $39;
 return ($$0|0);
}
function __ZN4surf15BitvectorSuffix15constructSuffixENS_10SuffixTypeERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEjjj($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($0|0) {
 case 1:  {
  $5 = (__ZN4surf15BitvectorSuffix19constructHashSuffixERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($1,$2)|0);
  $6 = tempRet0;
  $11 = $6;$12 = $5;
  break;
 }
 case 2:  {
  $7 = (__ZN4surf15BitvectorSuffix19constructRealSuffixERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjj($1,$3,$4)|0);
  $8 = tempRet0;
  $11 = $8;$12 = $7;
  break;
 }
 case 3:  {
  $9 = (__ZN4surf15BitvectorSuffix20constructMixedSuffixERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjjj($1,$2,$3,$4)|0);
  $10 = tempRet0;
  $11 = $10;$12 = $9;
  break;
 }
 default: {
  $11 = 0;$12 = 0;
 }
 }
 tempRet0 = ($11);
 return ($12|0);
}
function __ZNK4surf15BitvectorSuffix7compareEjRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $switch = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = (__ZNK4surf15BitvectorSuffix12getSuffixLenEv($0)|0);
 $5 = Math_imul($4, $1)|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = ($5>>>0)<($6>>>0);
 if (!($7)) {
  return 2018;
 }
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $switch = ($9>>>0)<(2);
 if ($switch) {
  return 2018;
 }
 $10 = (__ZNK4surf15BitvectorSuffix4readEj($0,$1)|0);
 $11 = tempRet0;
 $12 = ((($0)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__ZN4surf15BitvectorSuffix19constructRealSuffixERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjj($2,$3,$13)|0);
 $15 = tempRet0;
 $16 = HEAP32[$8>>2]|0;
 $17 = ($16|0)==(3);
 if ($17) {
  $18 = HEAP32[$12>>2]|0;
  $19 = (__ZN4surf15BitvectorSuffix17extractRealSuffixEyj($10,$11,$18)|0);
  $20 = tempRet0;
  $22 = $19;$24 = $20;
 } else {
  $22 = $10;$24 = $11;
 }
 $21 = $22 | $14;
 $23 = $24 | $15;
 $25 = ($21|0)==(0);
 $26 = ($23|0)==(0);
 $27 = $25 & $26;
 if ($27) {
  return 2018;
 } else {
  $28 = ($22|0)==(0);
  $29 = ($24|0)==(0);
  $30 = $28 & $29;
  $31 = ($24>>>0)<($15>>>0);
  $32 = ($22>>>0)<($14>>>0);
  $33 = ($24|0)==($15|0);
  $34 = $33 & $32;
  $35 = $31 | $34;
  $or$cond = $30 | $35;
  $36 = ($22|0)==($14|0);
  $37 = ($24|0)==($15|0);
  $38 = $36 & $37;
  $$ = $38 ? 2018 : 1;
  $$$ = $or$cond ? -1 : $$;
  return ($$$|0);
 }
 return (0)|0;
}
function __ZN4surf15BitvectorSuffix19constructRealSuffixERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0100103 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 & 128;
 $7 = ($6|0)==(0);
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $7 ? $5 : $9;
 $11 = ($10>>>0)<($1>>>0);
 if ($11) {
  $53 = 0;$54 = 0;
  tempRet0 = ($53);
  return ($54|0);
 }
 $12 = (($10) - ($1))|0;
 $13 = $12 << 3;
 $14 = ($13>>>0)<($2>>>0);
 if ($14) {
  $53 = 0;$54 = 0;
  tempRet0 = ($53);
  return ($54|0);
 }
 $15 = $2 >>> 3;
 $16 = ($15|0)==(0);
 if ($16) {
  $37 = 0;$38 = 0;
 } else {
  $17 = ($4<<24>>24)<(0);
  $18 = HEAP32[$0>>2]|0;
  $19 = $17 ? $18 : $0;
  $20 = (($19) + ($1)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = ($15|0)==(1);
  if ($23) {
   $37 = $22;$38 = 0;
  } else {
   $$0100103 = 1;$24 = $22;$25 = 0;
   while(1) {
    $26 = (_bitshift64Shl(($24|0),($25|0),8)|0);
    $27 = tempRet0;
    $28 = (($$0100103) + ($1))|0;
    $29 = (($19) + ($28)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30&255;
    $32 = $26 | $31;
    $33 = (($$0100103) + 1)|0;
    $34 = ($33>>>0)<($15>>>0);
    if ($34) {
     $$0100103 = $33;$24 = $32;$25 = $27;
    } else {
     $37 = $32;$38 = $27;
     break;
    }
   }
  }
 }
 $35 = $2 & 7;
 $36 = ($35|0)==(0);
 if ($36) {
  $53 = $38;$54 = $37;
  tempRet0 = ($53);
  return ($54|0);
 }
 $39 = (_bitshift64Shl(($37|0),($38|0),($35|0))|0);
 $40 = tempRet0;
 $41 = (($15) + ($1))|0;
 $42 = ($4<<24>>24)<(0);
 $43 = HEAP32[$0>>2]|0;
 $44 = $42 ? $43 : $0;
 $45 = (($44) + ($41)|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = (8 - ($35))|0;
 $49 = (_bitshift64Lshr(($47|0),0,($48|0))|0);
 $50 = tempRet0;
 $51 = (_i64Add(($49|0),($50|0),($39|0),($40|0))|0);
 $52 = tempRet0;
 $53 = $52;$54 = $51;
 tempRet0 = ($53);
 return ($54|0);
}
function __ZN4surf11SuRFBuilder5buildERKNSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4surf11SuRFBuilder11buildSparseERKNSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE($0,$1);
 $2 = HEAP8[$0>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  return;
 }
 __ZN4surf11SuRFBuilder20determineCutoffLevelEv($0);
 __ZN4surf11SuRFBuilder10buildDenseEv($0);
 return;
}
function __ZN4surf11SuRFBuilder11buildSparseERKNSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$05053 = 0, $$051 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = $5;
 $7 = ($4|0)==($6|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$05053 = 0;$10 = $5;
 while(1) {
  $8 = ($$05053|0)==(0);
  if ($8) {
   $15 = $10;
   label = 6;
  } else {
   $9 = (($10) + (($$05053*12)|0)|0);
   $11 = (($$05053) + -1)|0;
   $12 = (($10) + (($11*12)|0)|0);
   $13 = (__ZN4surf11SuRFBuilder9isSameKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_($9,$12)|0);
   if (!($13)) {
    $$pre = HEAP32[$1>>2]|0;
    $15 = $$pre;
    label = 6;
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $14 = (($15) + (($$05053*12)|0)|0);
   $16 = (__ZN4surf11SuRFBuilder16skipCommonPrefixERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0,$14)|0);
   $17 = HEAP32[$3>>2]|0;
   $18 = HEAP32[$1>>2]|0;
   $19 = $18;
   $20 = (($17) - ($19))|0;
   $21 = (($20|0) / 12)&-1;
   $22 = (($21) + -1)|0;
   $23 = ($$05053>>>0)<($22>>>0);
   $24 = (($18) + (($$05053*12)|0)|0);
   if ($23) {
    $25 = (($$05053) + 1)|0;
    $26 = (($18) + (($25*12)|0)|0);
    $27 = (__ZN4surf11SuRFBuilder31insertKeyBytesToTrieUntilUniqueERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_j($0,$24,$26,$16)|0);
    $$051 = $27;
   } else {
    ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
    $28 = (__ZN4surf11SuRFBuilder31insertKeyBytesToTrieUntilUniqueERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_j($0,$24,$2,$16)|0);
    __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
    $$051 = $28;
   }
   $29 = HEAP32[$1>>2]|0;
   $30 = (($29) + (($$05053*12)|0)|0);
   __ZN4surf11SuRFBuilder12insertSuffixERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($0,$30,$$051);
  }
  $31 = (($$05053) + 1)|0;
  $32 = HEAP32[$3>>2]|0;
  $33 = HEAP32[$1>>2]|0;
  $34 = $33;
  $35 = (($32) - ($34))|0;
  $36 = (($35|0) / 12)&-1;
  $37 = ($31>>>0)<($36>>>0);
  if ($37) {
   $$05053 = $31;$10 = $33;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN4surf11SuRFBuilder20determineCutoffLevelEv($0) {
 $0 = $0|0;
 var $$sink10$lcssa = 0, $$sink1011 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNK4surf11SuRFBuilder15computeDenseMemEj($0,0)|0);
 $3 = tempRet0;
 $4 = (__ZNK4surf11SuRFBuilder16computeSparseMemEj($0,0)|0);
 $5 = tempRet0;
 $6 = (__ZNK4surf11SuRFBuilder13getTreeHeightEv($0)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$sink10$lcssa = 0;
  $27 = ((($0)) + 8|0);
  HEAP32[$27>>2] = $$sink10$lcssa;
  return;
 } else {
  $$sink1011 = 0;$10 = $3;$14 = $5;$16 = $4;$9 = $2;
 }
 while(1) {
  $8 = HEAP32[$1>>2]|0;
  $11 = (___muldi3(($9|0),($10|0),($8|0),0)|0);
  $12 = tempRet0;
  $13 = ($12>>>0)<($14>>>0);
  $15 = ($11>>>0)<($16>>>0);
  $17 = ($12|0)==($14|0);
  $18 = $17 & $15;
  $19 = $13 | $18;
  if (!($19)) {
   $$sink10$lcssa = $$sink1011;
   label = 4;
   break;
  }
  $20 = (($$sink1011) + 1)|0;
  $21 = (__ZNK4surf11SuRFBuilder15computeDenseMemEj($0,$20)|0);
  $22 = tempRet0;
  $23 = (__ZNK4surf11SuRFBuilder16computeSparseMemEj($0,$20)|0);
  $24 = tempRet0;
  $25 = (__ZNK4surf11SuRFBuilder13getTreeHeightEv($0)|0);
  $26 = ($20>>>0)<($25>>>0);
  if ($26) {
   $$sink1011 = $20;$10 = $22;$14 = $24;$16 = $23;$9 = $21;
  } else {
   $$sink10$lcssa = $20;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $27 = ((($0)) + 8|0);
  HEAP32[$27>>2] = $$sink10$lcssa;
  return;
 }
}
function __ZN4surf11SuRFBuilder10buildDenseEv($0) {
 $0 = $0|0;
 var $$02527 = 0, $$02630 = 0, $$028 = 0, $$1 = 0, $$2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 72|0);
 $$02630 = 0;
 while(1) {
  __ZN4surf11SuRFBuilder16initDenseVectorsEj($0,$$02630);
  $5 = (__ZNK4surf11SuRFBuilder11getNumItemsEj($0,$$02630)|0);
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = (__ZNK4surf11SuRFBuilder12isTerminatorEjj($0,$$02630,0)|0);
   if ($7) {
    $8 = HEAP32[$4>>2]|0;
    $9 = (($8) + (($$02630*12)|0)|0);
    __ZN4surf11SuRFBuilder6setBitERNSt3__26vectorIyNS1_9allocatorIyEEEEj($9,0);
   } else {
    __ZN4surf11SuRFBuilder31setLabelAndChildIndicatorBitmapEjjj($0,$$02630,0,0);
   }
   $10 = (__ZNK4surf11SuRFBuilder11getNumItemsEj($0,$$02630)|0);
   $11 = ($10>>>0)>(1);
   if ($11) {
    $$02527 = 0;$$028 = 1;
    while(1) {
     $12 = (__ZNK4surf11SuRFBuilder13isStartOfNodeEjj($0,$$02630,$$028)|0);
     if ($12) {
      $13 = (($$02527) + 1)|0;
      $14 = (__ZNK4surf11SuRFBuilder12isTerminatorEjj($0,$$02630,$$028)|0);
      if ($14) {
       $15 = HEAP32[$4>>2]|0;
       $16 = (($15) + (($$02630*12)|0)|0);
       __ZN4surf11SuRFBuilder6setBitERNSt3__26vectorIyNS1_9allocatorIyEEEEj($16,$13);
       $$2 = $13;
      } else {
       $$1 = $13;
       label = 11;
      }
     } else {
      $$1 = $$02527;
      label = 11;
     }
     if ((label|0) == 11) {
      label = 0;
      __ZN4surf11SuRFBuilder31setLabelAndChildIndicatorBitmapEjjj($0,$$02630,$$1,$$028);
      $$2 = $$1;
     }
     $17 = (($$028) + 1)|0;
     $18 = (__ZNK4surf11SuRFBuilder11getNumItemsEj($0,$$02630)|0);
     $19 = ($17>>>0)<($18>>>0);
     if ($19) {
      $$02527 = $$2;$$028 = $17;
     } else {
      break;
     }
    }
   }
  }
  $20 = (($$02630) + 1)|0;
  $21 = HEAP32[$1>>2]|0;
  $22 = ($20>>>0)<($21>>>0);
  if ($22) {
   $$02630 = $20;
  } else {
   break;
  }
 }
 return;
}
function __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = (($4|0) / 12)&-1;
 return ($5|0);
}
function __ZN4surf11SuRFBuilder9isSameKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$ = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)<(0);
 $5 = HEAP32[$1>>2]|0;
 $6 = $4 ? $5 : $1;
 $7 = $3&255;
 $8 = $7 & 128;
 $9 = ($8|0)==(0);
 $10 = ((($1)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9 ? $7 : $11;
 $13 = ((($0)) + 11|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 & 128;
 $17 = ($16|0)==(0);
 $18 = ((($0)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $17 ? $15 : $19;
 $21 = ($14<<24>>24)<(0);
 $22 = HEAP32[$0>>2]|0;
 $23 = $21 ? $22 : $0;
 $24 = ($12>>>0)<($20>>>0);
 $$sroa$speculated = $24 ? $12 : $20;
 $25 = (__ZNSt3__211char_traitsIcE7compareEPKcS3_j($23,$6,$$sroa$speculated)|0);
 $26 = ($25|0)==(0);
 $27 = ($12|0)==($20|0);
 $$$ = $26 & $27;
 return ($$$|0);
}
function __ZN4surf11SuRFBuilder16skipCommonPrefixERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$038 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 11|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 128;
 $6 = ($5|0)==(0);
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $6 ? $4 : $8;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $11 = ((($0)) + 24|0);
 $$038 = 0;$12 = $3;
 while(1) {
  $13 = ($12<<24>>24)<(0);
  $14 = HEAP32[$1>>2]|0;
  $15 = $13 ? $14 : $1;
  $16 = (($15) + ($$038)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = (__ZNK4surf11SuRFBuilder18isCharCommonPrefixEhj($0,$17,$$038)|0);
  if (!($18)) {
   $$0$lcssa = $$038;
   label = 5;
   break;
  }
  $19 = HEAP32[$11>>2]|0;
  $20 = (($19) + (($$038*12)|0)|0);
  $21 = (__ZNK4surf11SuRFBuilder11getNumItemsEj($0,$$038)|0);
  $22 = (($21) + -1)|0;
  __ZN4surf11SuRFBuilder6setBitERNSt3__26vectorIyNS1_9allocatorIyEEEEj($20,$22);
  $23 = (($$038) + 1)|0;
  $24 = HEAP8[$2>>0]|0;
  $25 = $24&255;
  $26 = $25 & 128;
  $27 = ($26|0)==(0);
  $28 = HEAP32[$7>>2]|0;
  $29 = $27 ? $25 : $28;
  $30 = ($23>>>0)<($29>>>0);
  if ($30) {
   $$038 = $23;$12 = $24;
  } else {
   $$0$lcssa = $23;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function __ZN4surf11SuRFBuilder31insertKeyBytesToTrieUntilUniqueERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0180 = 0, $$0181$lcssa = 0, $$0181185 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 12|0;
 $5 = sp;
 $6 = (__ZNK4surf11SuRFBuilder12isLevelEmptyEj($0,$3)|0);
 $7 = ((($1)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)<(0);
 $10 = HEAP32[$1>>2]|0;
 $11 = $9 ? $10 : $1;
 $12 = (($11) + ($3)|0);
 $13 = HEAP8[$12>>0]|0;
 __ZN4surf11SuRFBuilder13insertKeyByteEcjb($0,$13,$3,$6);
 $14 = (($3) + 1)|0;
 $15 = ((($2)) + 11|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $17 & 128;
 $19 = ($18|0)==(0);
 $20 = ((($2)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $19 ? $17 : $21;
 $23 = ($14>>>0)>($22>>>0);
 if ($23) {
  $$0180 = $14;
  STACKTOP = sp;return ($$0180|0);
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($4,$1,0,$14,$1);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($5,$2,0,$14,$2);
 $24 = (__ZN4surf11SuRFBuilder9isSameKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_($4,$5)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 if (!($24)) {
  $$0180 = $14;
  STACKTOP = sp;return ($$0180|0);
 }
 $25 = HEAP8[$7>>0]|0;
 $26 = $25&255;
 $27 = $26 & 128;
 $28 = ($27|0)==(0);
 $29 = ((($1)) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $28 ? $26 : $30;
 $32 = ($14>>>0)<($31>>>0);
 L7: do {
  if ($32) {
   $$0181185 = $14;$40 = $25;$73 = $30;
   while(1) {
    $33 = HEAP8[$15>>0]|0;
    $34 = $33&255;
    $35 = $34 & 128;
    $36 = ($35|0)==(0);
    $37 = HEAP32[$20>>2]|0;
    $38 = $36 ? $34 : $37;
    $39 = ($$0181185>>>0)<($38>>>0);
    if (!($39)) {
     $$0181$lcssa = $$0181185;$61 = $40;$64 = $73;
     break L7;
    }
    $41 = ($40<<24>>24)<(0);
    $42 = HEAP32[$1>>2]|0;
    $43 = $41 ? $42 : $1;
    $44 = (($43) + ($$0181185)|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = ($33<<24>>24)<(0);
    $47 = HEAP32[$2>>2]|0;
    $48 = $46 ? $47 : $2;
    $49 = (($48) + ($$0181185)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = ($45<<24>>24)==($50<<24>>24);
    if (!($51)) {
     $$0181$lcssa = $$0181185;$61 = $40;$64 = $73;
     break L7;
    }
    __ZN4surf11SuRFBuilder13insertKeyByteEcjb($0,$45,$$0181185,1);
    $52 = (($$0181185) + 1)|0;
    $53 = HEAP8[$7>>0]|0;
    $54 = $53&255;
    $55 = $54 & 128;
    $56 = ($55|0)==(0);
    $57 = HEAP32[$29>>2]|0;
    $58 = $56 ? $54 : $57;
    $59 = ($52>>>0)<($58>>>0);
    if ($59) {
     $$0181185 = $52;$40 = $53;$73 = $57;
    } else {
     $$0181$lcssa = $52;$61 = $53;$64 = $57;
     break;
    }
   }
  } else {
   $$0181$lcssa = $14;$61 = $25;$64 = $30;
  }
 } while(0);
 $60 = $61&255;
 $62 = $60 & 128;
 $63 = ($62|0)==(0);
 $65 = $63 ? $60 : $64;
 $66 = ($$0181$lcssa>>>0)<($65>>>0);
 if ($66) {
  $67 = ($61<<24>>24)<(0);
  $68 = HEAP32[$1>>2]|0;
  $69 = $67 ? $68 : $1;
  $70 = (($69) + ($$0181$lcssa)|0);
  $71 = HEAP8[$70>>0]|0;
  __ZN4surf11SuRFBuilder13insertKeyByteEcjb($0,$71,$$0181$lcssa,1);
 } else {
  __ZN4surf11SuRFBuilder13insertKeyByteEcjb($0,-1,$$0181$lcssa,1);
 }
 $72 = (($$0181$lcssa) + 1)|0;
 $$0180 = $72;
 STACKTOP = sp;return ($$0180|0);
}
function __ZN4surf11SuRFBuilder12insertSuffixERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZNK4surf11SuRFBuilder13getTreeHeightEv($0)|0);
 $4 = ($3>>>0)>($2>>>0);
 if (!($4)) {
  __ZN4surf11SuRFBuilder8addLevelEv($0);
 }
 $5 = ((($0)) + 84|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 88|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 92|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (__ZN4surf15BitvectorSuffix15constructSuffixENS_10SuffixTypeERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEjjj($6,$1,$8,$2,$10)|0);
 $12 = tempRet0;
 __ZN4surf11SuRFBuilder11storeSuffixEjy($0,$2,$11,$12);
 return;
}
function __ZNK4surf11SuRFBuilder18isCharCommonPrefixEhj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = (__ZNK4surf11SuRFBuilder13getTreeHeightEv($0)|0);
 $4 = ($3>>>0)>($2>>>0);
 if (!($4)) {
  $21 = 0;
  return ($21|0);
 }
 $5 = ((($0)) + 132|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2 >>> 5;
 $8 = (($6) + ($7<<2)|0);
 $9 = $2 & 31;
 $10 = 1 << $9;
 $11 = HEAP32[$8>>2]|0;
 $12 = $11 & $10;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $21 = 0;
  return ($21|0);
 }
 $14 = ((($0)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (((($15) + (($2*12)|0)|0)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + -1|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==($1<<24>>24);
 $21 = $20;
 return ($21|0);
}
function __ZN4surf11SuRFBuilder6setBitERNSt3__26vectorIyNS1_9allocatorIyEEEEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 >>> 6;
 $3 = $1 & 63;
 $4 = (_bitshift64Lshr(0,-2147483648,($3|0))|0);
 $5 = tempRet0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + ($2<<3)|0);
 $8 = $7;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $10 | $4;
 $15 = $13 | $5;
 $16 = $7;
 $17 = $16;
 HEAP32[$17>>2] = $14;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 return;
}
function __ZNK4surf11SuRFBuilder11getNumItemsEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (((($3) + (($1*12)|0)|0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + (($1*12)|0)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 return ($8|0);
}
function __ZNK4surf11SuRFBuilder12isLevelEmptyEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNK4surf11SuRFBuilder13getTreeHeightEv($0)|0);
 $3 = ($2>>>0)>($1>>>0);
 if (!($3)) {
  $11 = 1;
  return ($11|0);
 }
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (((($5) + (($1*12)|0)|0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + (($1*12)|0)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)==($9|0);
 $11 = $10;
 return ($11|0);
}
function __ZN4surf11SuRFBuilder13insertKeyByteEcjb($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZNK4surf11SuRFBuilder13getTreeHeightEv($0)|0);
 $6 = ($5>>>0)>($2>>>0);
 if (!($6)) {
  __ZN4surf11SuRFBuilder8addLevelEv($0);
 }
 $7 = ($2|0)==(0);
 if (!($7)) {
  $8 = (($2) + -1)|0;
  $9 = ((($0)) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + (($8*12)|0)|0);
  $12 = (__ZNK4surf11SuRFBuilder11getNumItemsEj($0,$8)|0);
  $13 = (($12) + -1)|0;
  __ZN4surf11SuRFBuilder6setBitERNSt3__26vectorIyNS1_9allocatorIyEEEEj($11,$13);
 }
 $14 = ((($0)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP8[$4>>0] = $1;
 $16 = (((($15) + (($2*12)|0)|0)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (((($15) + (($2*12)|0)|0)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17>>>0)<($19>>>0);
 if ($20) {
  HEAP8[$17>>0] = $1;
  $21 = HEAP32[$16>>2]|0;
  $22 = ((($21)) + 1|0);
  HEAP32[$16>>2] = $22;
 } else {
  $23 = (($15) + (($2*12)|0)|0);
  __ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIhEEvOT_($23,$4);
 }
 if (!($3)) {
  __ZN4surf11SuRFBuilder18moveToNextItemSlotEj($0,$2);
  STACKTOP = sp;return;
 }
 $24 = ((($0)) + 36|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + (($2*12)|0)|0);
 $27 = (__ZNK4surf11SuRFBuilder11getNumItemsEj($0,$2)|0);
 $28 = (($27) + -1)|0;
 __ZN4surf11SuRFBuilder6setBitERNSt3__26vectorIyNS1_9allocatorIyEEEEj($26,$28);
 $29 = ((($0)) + 120|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($2<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 1)|0;
 HEAP32[$31>>2] = $33;
 __ZN4surf11SuRFBuilder18moveToNextItemSlotEj($0,$2);
 STACKTOP = sp;return;
}
function __ZNK4surf11SuRFBuilder13getTreeHeightEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 $6 = (($5|0) / 12)&-1;
 return ($6|0);
}
function __ZN4surf11SuRFBuilder8addLevelEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $1 = sp + 60|0;
 $2 = sp + 48|0;
 $3 = sp + 36|0;
 $4 = sp + 24|0;
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp + 72|0;
 $8 = sp + 8|0;
 $9 = sp;
 HEAP32[$1>>2] = 0;
 $10 = ((($1)) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($1)) + 8|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($0)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($13>>>0)<($15>>>0);
 if ($16) {
  HEAP32[$13>>2] = 0;
  $17 = ((($13)) + 4|0);
  HEAP32[$17>>2] = 0;
  $18 = ((($13)) + 8|0);
  HEAP32[$18>>2] = 0;
  $19 = HEAP32[$1>>2]|0;
  HEAP32[$13>>2] = $19;
  $20 = HEAP32[$10>>2]|0;
  HEAP32[$17>>2] = $20;
  $21 = HEAP32[$11>>2]|0;
  HEAP32[$18>>2] = $21;
  HEAP32[$11>>2] = 0;
  HEAP32[$10>>2] = 0;
  HEAP32[$1>>2] = 0;
  $22 = HEAP32[$12>>2]|0;
  $23 = ((($22)) + 12|0);
  HEAP32[$12>>2] = $23;
 } else {
  $24 = ((($0)) + 12|0);
  __ZNSt3__26vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE21__push_back_slow_pathIS3_EEvOT_($24,$1);
 }
 __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($1);
 $25 = ((($0)) + 24|0);
 HEAP32[$2>>2] = 0;
 $26 = ((($2)) + 4|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($2)) + 8|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($0)) + 28|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($0)) + 32|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($29>>>0)<($31>>>0);
 if ($32) {
  HEAP32[$29>>2] = 0;
  $33 = ((($29)) + 4|0);
  HEAP32[$33>>2] = 0;
  $34 = ((($29)) + 8|0);
  HEAP32[$34>>2] = 0;
  $35 = HEAP32[$2>>2]|0;
  HEAP32[$29>>2] = $35;
  $36 = HEAP32[$26>>2]|0;
  HEAP32[$33>>2] = $36;
  $37 = HEAP32[$27>>2]|0;
  HEAP32[$34>>2] = $37;
  HEAP32[$27>>2] = 0;
  HEAP32[$26>>2] = 0;
  HEAP32[$2>>2] = 0;
  $38 = HEAP32[$28>>2]|0;
  $39 = ((($38)) + 12|0);
  HEAP32[$28>>2] = $39;
 } else {
  __ZNSt3__26vectorINS0_IyNS_9allocatorIyEEEENS1_IS3_EEE21__push_back_slow_pathIS3_EEvOT_($25,$2);
 }
 __ZNSt3__26vectorIyNS_9allocatorIyEEED2Ev($2);
 $40 = ((($0)) + 36|0);
 HEAP32[$3>>2] = 0;
 $41 = ((($3)) + 4|0);
 HEAP32[$41>>2] = 0;
 $42 = ((($3)) + 8|0);
 HEAP32[$42>>2] = 0;
 $43 = ((($0)) + 40|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($0)) + 44|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($44>>>0)<($46>>>0);
 if ($47) {
  HEAP32[$44>>2] = 0;
  $48 = ((($44)) + 4|0);
  HEAP32[$48>>2] = 0;
  $49 = ((($44)) + 8|0);
  HEAP32[$49>>2] = 0;
  $50 = HEAP32[$3>>2]|0;
  HEAP32[$44>>2] = $50;
  $51 = HEAP32[$41>>2]|0;
  HEAP32[$48>>2] = $51;
  $52 = HEAP32[$42>>2]|0;
  HEAP32[$49>>2] = $52;
  HEAP32[$42>>2] = 0;
  HEAP32[$41>>2] = 0;
  HEAP32[$3>>2] = 0;
  $53 = HEAP32[$43>>2]|0;
  $54 = ((($53)) + 12|0);
  HEAP32[$43>>2] = $54;
 } else {
  __ZNSt3__26vectorINS0_IyNS_9allocatorIyEEEENS1_IS3_EEE21__push_back_slow_pathIS3_EEvOT_($40,$3);
 }
 __ZNSt3__26vectorIyNS_9allocatorIyEEED2Ev($3);
 HEAP32[$4>>2] = 0;
 $55 = ((($4)) + 4|0);
 HEAP32[$55>>2] = 0;
 $56 = ((($4)) + 8|0);
 HEAP32[$56>>2] = 0;
 $57 = ((($0)) + 100|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ((($0)) + 104|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($58>>>0)<($60>>>0);
 if ($61) {
  HEAP32[$58>>2] = 0;
  $62 = ((($58)) + 4|0);
  HEAP32[$62>>2] = 0;
  $63 = ((($58)) + 8|0);
  HEAP32[$63>>2] = 0;
  $64 = HEAP32[$4>>2]|0;
  HEAP32[$58>>2] = $64;
  $65 = HEAP32[$55>>2]|0;
  HEAP32[$62>>2] = $65;
  $66 = HEAP32[$56>>2]|0;
  HEAP32[$63>>2] = $66;
  HEAP32[$56>>2] = 0;
  HEAP32[$55>>2] = 0;
  HEAP32[$4>>2] = 0;
  $67 = HEAP32[$57>>2]|0;
  $68 = ((($67)) + 12|0);
  HEAP32[$57>>2] = $68;
 } else {
  $69 = ((($0)) + 96|0);
  __ZNSt3__26vectorINS0_IyNS_9allocatorIyEEEENS1_IS3_EEE21__push_back_slow_pathIS3_EEvOT_($69,$4);
 }
 __ZNSt3__26vectorIyNS_9allocatorIyEEED2Ev($4);
 HEAP32[$5>>2] = 0;
 $70 = ((($0)) + 112|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ((($0)) + 116|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($71>>>0)<($73>>>0);
 if ($74) {
  HEAP32[$71>>2] = 0;
  $75 = HEAP32[$70>>2]|0;
  $76 = ((($75)) + 4|0);
  HEAP32[$70>>2] = $76;
 } else {
  $77 = ((($0)) + 108|0);
  __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($77,$5);
 }
 HEAP32[$6>>2] = 0;
 $78 = ((($0)) + 124|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ((($0)) + 128|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = ($79>>>0)<($81>>>0);
 if ($82) {
  HEAP32[$79>>2] = 0;
  $83 = HEAP32[$78>>2]|0;
  $84 = ((($83)) + 4|0);
  HEAP32[$78>>2] = $84;
 } else {
  $85 = ((($0)) + 120|0);
  __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($85,$6);
 }
 $86 = ((($0)) + 132|0);
 HEAP8[$7>>0] = 0;
 __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($86,$7);
 $87 = (__ZNK4surf11SuRFBuilder13getTreeHeightEv($0)|0);
 $88 = (($87) + -1)|0;
 $89 = HEAP32[$25>>2]|0;
 $90 = $8;
 $91 = $90;
 HEAP32[$91>>2] = 0;
 $92 = (($90) + 4)|0;
 $93 = $92;
 HEAP32[$93>>2] = 0;
 $94 = (((($89) + (($88*12)|0)|0)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = (((($89) + (($88*12)|0)|0)) + 8|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($95>>>0)<($97>>>0);
 if ($98) {
  $99 = $95;
  $100 = $99;
  HEAP32[$100>>2] = 0;
  $101 = (($99) + 4)|0;
  $102 = $101;
  HEAP32[$102>>2] = 0;
  $103 = HEAP32[$94>>2]|0;
  $104 = ((($103)) + 8|0);
  HEAP32[$94>>2] = $104;
 } else {
  $105 = (($89) + (($88*12)|0)|0);
  __ZNSt3__26vectorIyNS_9allocatorIyEEE21__push_back_slow_pathIyEEvOT_($105,$8);
 }
 $106 = (__ZNK4surf11SuRFBuilder13getTreeHeightEv($0)|0);
 $107 = (($106) + -1)|0;
 $108 = HEAP32[$40>>2]|0;
 $109 = $9;
 $110 = $109;
 HEAP32[$110>>2] = 0;
 $111 = (($109) + 4)|0;
 $112 = $111;
 HEAP32[$112>>2] = 0;
 $113 = (((($108) + (($107*12)|0)|0)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (((($108) + (($107*12)|0)|0)) + 8|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($114>>>0)<($116>>>0);
 if ($117) {
  $118 = $114;
  $119 = $118;
  HEAP32[$119>>2] = 0;
  $120 = (($118) + 4)|0;
  $121 = $120;
  HEAP32[$121>>2] = 0;
  $122 = HEAP32[$113>>2]|0;
  $123 = ((($122)) + 8|0);
  HEAP32[$113>>2] = $123;
  STACKTOP = sp;return;
 } else {
  $124 = (($108) + (($107*12)|0)|0);
  __ZNSt3__26vectorIyNS_9allocatorIyEEE21__push_back_slow_pathIyEEvOT_($124,$9);
  STACKTOP = sp;return;
 }
}
function __ZN4surf11SuRFBuilder18moveToNextItemSlotEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 8|0;
 $3 = sp;
 $4 = (__ZNK4surf11SuRFBuilder11getNumItemsEj($0,$1)|0);
 $5 = $4 & 63;
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = ((($0)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 $13 = (((($8) + (($1*12)|0)|0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (((($8) + (($1*12)|0)|0)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($14>>>0)<($16>>>0);
 if ($17) {
  $18 = $14;
  $19 = $18;
  HEAP32[$19>>2] = 0;
  $20 = (($18) + 4)|0;
  $21 = $20;
  HEAP32[$21>>2] = 0;
  $22 = HEAP32[$13>>2]|0;
  $23 = ((($22)) + 8|0);
  HEAP32[$13>>2] = $23;
 } else {
  $24 = (($8) + (($1*12)|0)|0);
  __ZNSt3__26vectorIyNS_9allocatorIyEEE21__push_back_slow_pathIyEEvOT_($24,$2);
 }
 $25 = ((($0)) + 36|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $3;
 $28 = $27;
 HEAP32[$28>>2] = 0;
 $29 = (($27) + 4)|0;
 $30 = $29;
 HEAP32[$30>>2] = 0;
 $31 = (((($26) + (($1*12)|0)|0)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (((($26) + (($1*12)|0)|0)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($32>>>0)<($34>>>0);
 if ($35) {
  $36 = $32;
  $37 = $36;
  HEAP32[$37>>2] = 0;
  $38 = (($36) + 4)|0;
  $39 = $38;
  HEAP32[$39>>2] = 0;
  $40 = HEAP32[$31>>2]|0;
  $41 = ((($40)) + 8|0);
  HEAP32[$31>>2] = $41;
  STACKTOP = sp;return;
 } else {
  $42 = (($26) + (($1*12)|0)|0);
  __ZNSt3__26vectorIyNS_9allocatorIyEEE21__push_back_slow_pathIyEEvOT_($42,$3);
  STACKTOP = sp;return;
 }
}
function __ZN4surf11SuRFBuilder16initDenseVectorsEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0306326 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp + 48|0;
 $3 = sp + 36|0;
 $4 = sp + 24|0;
 $5 = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp;
 $8 = ((($0)) + 48|0);
 HEAP32[$2>>2] = 0;
 $9 = ((($2)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($2)) + 8|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 52|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 56|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12>>>0)<($14>>>0);
 if ($15) {
  HEAP32[$12>>2] = 0;
  $16 = ((($12)) + 4|0);
  HEAP32[$16>>2] = 0;
  $17 = ((($12)) + 8|0);
  HEAP32[$17>>2] = 0;
  $18 = HEAP32[$2>>2]|0;
  HEAP32[$12>>2] = $18;
  $19 = HEAP32[$9>>2]|0;
  HEAP32[$16>>2] = $19;
  $20 = HEAP32[$10>>2]|0;
  HEAP32[$17>>2] = $20;
  HEAP32[$10>>2] = 0;
  HEAP32[$9>>2] = 0;
  HEAP32[$2>>2] = 0;
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($21)) + 12|0);
  HEAP32[$11>>2] = $22;
 } else {
  __ZNSt3__26vectorINS0_IyNS_9allocatorIyEEEENS1_IS3_EEE21__push_back_slow_pathIS3_EEvOT_($8,$2);
 }
 __ZNSt3__26vectorIyNS_9allocatorIyEEED2Ev($2);
 $23 = ((($0)) + 60|0);
 HEAP32[$3>>2] = 0;
 $24 = ((($3)) + 4|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($3)) + 8|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($0)) + 64|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($0)) + 68|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($27>>>0)<($29>>>0);
 if ($30) {
  HEAP32[$27>>2] = 0;
  $31 = ((($27)) + 4|0);
  HEAP32[$31>>2] = 0;
  $32 = ((($27)) + 8|0);
  HEAP32[$32>>2] = 0;
  $33 = HEAP32[$3>>2]|0;
  HEAP32[$27>>2] = $33;
  $34 = HEAP32[$24>>2]|0;
  HEAP32[$31>>2] = $34;
  $35 = HEAP32[$25>>2]|0;
  HEAP32[$32>>2] = $35;
  HEAP32[$25>>2] = 0;
  HEAP32[$24>>2] = 0;
  HEAP32[$3>>2] = 0;
  $36 = HEAP32[$26>>2]|0;
  $37 = ((($36)) + 12|0);
  HEAP32[$26>>2] = $37;
 } else {
  __ZNSt3__26vectorINS0_IyNS_9allocatorIyEEEENS1_IS3_EEE21__push_back_slow_pathIS3_EEvOT_($23,$3);
 }
 __ZNSt3__26vectorIyNS_9allocatorIyEEED2Ev($3);
 $38 = ((($0)) + 72|0);
 HEAP32[$4>>2] = 0;
 $39 = ((($4)) + 4|0);
 HEAP32[$39>>2] = 0;
 $40 = ((($4)) + 8|0);
 HEAP32[$40>>2] = 0;
 $41 = ((($0)) + 76|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($0)) + 80|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($42>>>0)<($44>>>0);
 if ($45) {
  HEAP32[$42>>2] = 0;
  $46 = ((($42)) + 4|0);
  HEAP32[$46>>2] = 0;
  $47 = ((($42)) + 8|0);
  HEAP32[$47>>2] = 0;
  $48 = HEAP32[$4>>2]|0;
  HEAP32[$42>>2] = $48;
  $49 = HEAP32[$39>>2]|0;
  HEAP32[$46>>2] = $49;
  $50 = HEAP32[$40>>2]|0;
  HEAP32[$47>>2] = $50;
  HEAP32[$40>>2] = 0;
  HEAP32[$39>>2] = 0;
  HEAP32[$4>>2] = 0;
  $51 = HEAP32[$41>>2]|0;
  $52 = ((($51)) + 12|0);
  HEAP32[$41>>2] = $52;
 } else {
  __ZNSt3__26vectorINS0_IyNS_9allocatorIyEEEENS1_IS3_EEE21__push_back_slow_pathIS3_EEvOT_($38,$4);
 }
 __ZNSt3__26vectorIyNS_9allocatorIyEEED2Ev($4);
 $53 = ((($0)) + 120|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + ($1<<2)|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)==(0);
 if ($57) {
  STACKTOP = sp;return;
 }
 $$0306326 = 0;
 while(1) {
  $58 = HEAP32[$8>>2]|0;
  $59 = $5;
  $60 = $59;
  HEAP32[$60>>2] = 0;
  $61 = (($59) + 4)|0;
  $62 = $61;
  HEAP32[$62>>2] = 0;
  $63 = (((($58) + (($1*12)|0)|0)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (((($58) + (($1*12)|0)|0)) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ($64>>>0)<($66>>>0);
  if ($67) {
   $68 = $64;
   $69 = $68;
   HEAP32[$69>>2] = 0;
   $70 = (($68) + 4)|0;
   $71 = $70;
   HEAP32[$71>>2] = 0;
   $72 = HEAP32[$63>>2]|0;
   $73 = ((($72)) + 8|0);
   HEAP32[$63>>2] = $73;
  } else {
   $74 = (($58) + (($1*12)|0)|0);
   __ZNSt3__26vectorIyNS_9allocatorIyEEE21__push_back_slow_pathIyEEvOT_($74,$5);
  }
  $75 = HEAP32[$23>>2]|0;
  $76 = $6;
  $77 = $76;
  HEAP32[$77>>2] = 0;
  $78 = (($76) + 4)|0;
  $79 = $78;
  HEAP32[$79>>2] = 0;
  $80 = (((($75) + (($1*12)|0)|0)) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (((($75) + (($1*12)|0)|0)) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($81>>>0)<($83>>>0);
  if ($84) {
   $85 = $81;
   $86 = $85;
   HEAP32[$86>>2] = 0;
   $87 = (($85) + 4)|0;
   $88 = $87;
   HEAP32[$88>>2] = 0;
   $89 = HEAP32[$80>>2]|0;
   $90 = ((($89)) + 8|0);
   HEAP32[$80>>2] = $90;
  } else {
   $91 = (($75) + (($1*12)|0)|0);
   __ZNSt3__26vectorIyNS_9allocatorIyEEE21__push_back_slow_pathIyEEvOT_($91,$6);
  }
  $92 = HEAP32[$8>>2]|0;
  $93 = $5;
  $94 = $93;
  HEAP32[$94>>2] = 0;
  $95 = (($93) + 4)|0;
  $96 = $95;
  HEAP32[$96>>2] = 0;
  $97 = (((($92) + (($1*12)|0)|0)) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (((($92) + (($1*12)|0)|0)) + 8|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = ($98>>>0)<($100>>>0);
  if ($101) {
   $125 = $98;
   $126 = $125;
   HEAP32[$126>>2] = 0;
   $127 = (($125) + 4)|0;
   $128 = $127;
   HEAP32[$128>>2] = 0;
   $129 = HEAP32[$97>>2]|0;
   $130 = ((($129)) + 8|0);
   HEAP32[$97>>2] = $130;
  } else {
   $124 = (($92) + (($1*12)|0)|0);
   __ZNSt3__26vectorIyNS_9allocatorIyEEE21__push_back_slow_pathIyEEvOT_($124,$5);
  }
  $131 = HEAP32[$23>>2]|0;
  $132 = $6;
  $133 = $132;
  HEAP32[$133>>2] = 0;
  $134 = (($132) + 4)|0;
  $135 = $134;
  HEAP32[$135>>2] = 0;
  $136 = (((($131) + (($1*12)|0)|0)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (((($131) + (($1*12)|0)|0)) + 8|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ($137>>>0)<($139>>>0);
  if ($140) {
   $142 = $137;
   $143 = $142;
   HEAP32[$143>>2] = 0;
   $144 = (($142) + 4)|0;
   $145 = $144;
   HEAP32[$145>>2] = 0;
   $146 = HEAP32[$136>>2]|0;
   $147 = ((($146)) + 8|0);
   HEAP32[$136>>2] = $147;
  } else {
   $141 = (($131) + (($1*12)|0)|0);
   __ZNSt3__26vectorIyNS_9allocatorIyEEE21__push_back_slow_pathIyEEvOT_($141,$6);
  }
  $148 = HEAP32[$8>>2]|0;
  $149 = $5;
  $150 = $149;
  HEAP32[$150>>2] = 0;
  $151 = (($149) + 4)|0;
  $152 = $151;
  HEAP32[$152>>2] = 0;
  $153 = (((($148) + (($1*12)|0)|0)) + 4|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (((($148) + (($1*12)|0)|0)) + 8|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = ($154>>>0)<($156>>>0);
  if ($157) {
   $159 = $154;
   $160 = $159;
   HEAP32[$160>>2] = 0;
   $161 = (($159) + 4)|0;
   $162 = $161;
   HEAP32[$162>>2] = 0;
   $163 = HEAP32[$153>>2]|0;
   $164 = ((($163)) + 8|0);
   HEAP32[$153>>2] = $164;
  } else {
   $158 = (($148) + (($1*12)|0)|0);
   __ZNSt3__26vectorIyNS_9allocatorIyEEE21__push_back_slow_pathIyEEvOT_($158,$5);
  }
  $165 = HEAP32[$23>>2]|0;
  $166 = $6;
  $167 = $166;
  HEAP32[$167>>2] = 0;
  $168 = (($166) + 4)|0;
  $169 = $168;
  HEAP32[$169>>2] = 0;
  $170 = (((($165) + (($1*12)|0)|0)) + 4|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = (((($165) + (($1*12)|0)|0)) + 8|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = ($171>>>0)<($173>>>0);
  if ($174) {
   $176 = $171;
   $177 = $176;
   HEAP32[$177>>2] = 0;
   $178 = (($176) + 4)|0;
   $179 = $178;
   HEAP32[$179>>2] = 0;
   $180 = HEAP32[$170>>2]|0;
   $181 = ((($180)) + 8|0);
   HEAP32[$170>>2] = $181;
  } else {
   $175 = (($165) + (($1*12)|0)|0);
   __ZNSt3__26vectorIyNS_9allocatorIyEEE21__push_back_slow_pathIyEEvOT_($175,$6);
  }
  $182 = HEAP32[$8>>2]|0;
  $183 = $5;
  $184 = $183;
  HEAP32[$184>>2] = 0;
  $185 = (($183) + 4)|0;
  $186 = $185;
  HEAP32[$186>>2] = 0;
  $187 = (((($182) + (($1*12)|0)|0)) + 4|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = (((($182) + (($1*12)|0)|0)) + 8|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = ($188>>>0)<($190>>>0);
  if ($191) {
   $193 = $188;
   $194 = $193;
   HEAP32[$194>>2] = 0;
   $195 = (($193) + 4)|0;
   $196 = $195;
   HEAP32[$196>>2] = 0;
   $197 = HEAP32[$187>>2]|0;
   $198 = ((($197)) + 8|0);
   HEAP32[$187>>2] = $198;
  } else {
   $192 = (($182) + (($1*12)|0)|0);
   __ZNSt3__26vectorIyNS_9allocatorIyEEE21__push_back_slow_pathIyEEvOT_($192,$5);
  }
  $199 = HEAP32[$23>>2]|0;
  $200 = $6;
  $201 = $200;
  HEAP32[$201>>2] = 0;
  $202 = (($200) + 4)|0;
  $203 = $202;
  HEAP32[$203>>2] = 0;
  $204 = (((($199) + (($1*12)|0)|0)) + 4|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = (((($199) + (($1*12)|0)|0)) + 8|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = ($205>>>0)<($207>>>0);
  if ($208) {
   $210 = $205;
   $211 = $210;
   HEAP32[$211>>2] = 0;
   $212 = (($210) + 4)|0;
   $213 = $212;
   HEAP32[$213>>2] = 0;
   $214 = HEAP32[$204>>2]|0;
   $215 = ((($214)) + 8|0);
   HEAP32[$204>>2] = $215;
  } else {
   $209 = (($199) + (($1*12)|0)|0);
   __ZNSt3__26vectorIyNS_9allocatorIyEEE21__push_back_slow_pathIyEEvOT_($209,$6);
  }
  $216 = $$0306326 & 63;
  $217 = ($216|0)==(0);
  do {
   if ($217) {
    $102 = HEAP32[$38>>2]|0;
    $103 = $7;
    $104 = $103;
    HEAP32[$104>>2] = 0;
    $105 = (($103) + 4)|0;
    $106 = $105;
    HEAP32[$106>>2] = 0;
    $107 = (((($102) + (($1*12)|0)|0)) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (((($102) + (($1*12)|0)|0)) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ($108>>>0)<($110>>>0);
    if ($111) {
     $112 = $108;
     $113 = $112;
     HEAP32[$113>>2] = 0;
     $114 = (($112) + 4)|0;
     $115 = $114;
     HEAP32[$115>>2] = 0;
     $116 = HEAP32[$107>>2]|0;
     $117 = ((($116)) + 8|0);
     HEAP32[$107>>2] = $117;
     break;
    } else {
     $118 = (($102) + (($1*12)|0)|0);
     __ZNSt3__26vectorIyNS_9allocatorIyEEE21__push_back_slow_pathIyEEvOT_($118,$7);
     break;
    }
   }
  } while(0);
  $119 = (($$0306326) + 1)|0;
  $120 = HEAP32[$53>>2]|0;
  $121 = (($120) + ($1<<2)|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ($119>>>0)<($122>>>0);
  if ($123) {
   $$0306326 = $119;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNK4surf11SuRFBuilder12isTerminatorEjj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + (($1*12)|0)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($2)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(-1);
 if (!($9)) {
  $15 = 0;
  return ($15|0);
 }
 $10 = ((($0)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($1*12)|0)|0);
 $13 = (__ZN4surf11SuRFBuilder7readBitERKNSt3__26vectorIyNS1_9allocatorIyEEEEj($12,$2)|0);
 $14 = $13 ^ 1;
 $15 = $14;
 return ($15|0);
}
function __ZN4surf11SuRFBuilder31setLabelAndChildIndicatorBitmapEjjj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + (($1*12)|0)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($3)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ((($0)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + (($1*12)|0)|0);
 $13 = $2 << 8;
 $14 = $9&255;
 $15 = $13 | $14;
 __ZN4surf11SuRFBuilder6setBitERNSt3__26vectorIyNS1_9allocatorIyEEEEj($12,$15);
 $16 = ((($0)) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + (($1*12)|0)|0);
 $19 = (__ZN4surf11SuRFBuilder7readBitERKNSt3__26vectorIyNS1_9allocatorIyEEEEj($18,$3)|0);
 if (!($19)) {
  return;
 }
 $20 = ((($0)) + 60|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + (($1*12)|0)|0);
 __ZN4surf11SuRFBuilder6setBitERNSt3__26vectorIyNS1_9allocatorIyEEEEj($22,$15);
 return;
}
function __ZNK4surf11SuRFBuilder13isStartOfNodeEjj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + (($1*12)|0)|0);
 $6 = (__ZN4surf11SuRFBuilder7readBitERKNSt3__26vectorIyNS1_9allocatorIyEEEEj($5,$2)|0);
 return ($6|0);
}
function __ZNSt3__26vectorIyNS_9allocatorIyEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213__vector_baseIyNS_9allocatorIyEEED2Ev($0);
 return;
}
function __ZN4surf11SuRFBuilder7readBitERKNSt3__26vectorIyNS1_9allocatorIyEEEEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 >>> 6;
 $3 = $1 & 63;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + ($2<<3)|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (_bitshift64Lshr(0,-2147483648,($3|0))|0);
 $13 = tempRet0;
 $14 = $8 & $12;
 $15 = $11 & $13;
 $16 = ($14|0)!=(0);
 $17 = ($15|0)!=(0);
 $18 = $16 | $17;
 return ($18|0);
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($0);
 return;
}
function __ZNSt3__26vectorIbNS_9allocatorIbEEE9push_backERKb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$sroa$speculated = 0, $$sroa$speculated$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 << 5;
 $7 = ($3|0)==($6|0);
 do {
  if ($7) {
   $8 = (($3) + 1)|0;
   $9 = (__ZNKSt3__26vectorIbNS_9allocatorIbEEE8max_sizeEv($0)|0);
   $10 = ($8>>>0)>($9>>>0);
   if ($10) {
    __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
    // unreachable;
   } else {
    $11 = HEAP32[$4>>2]|0;
    $12 = $11 << 5;
    $13 = $9 >>> 1;
    $14 = ($12>>>0)<($13>>>0);
    $15 = $11 << 6;
    $16 = (($3) + 32)|0;
    $17 = $16 & -32;
    $18 = ($15>>>0)<($17>>>0);
    $$sroa$speculated = $18 ? $17 : $15;
    $$sroa$speculated$ = $14 ? $$sroa$speculated : $9;
    __ZNSt3__26vectorIbNS_9allocatorIbEEE7reserveEj($0,$$sroa$speculated$);
    $$pre = HEAP32[$2>>2]|0;
    $20 = $$pre;
    break;
   }
  } else {
   $20 = $3;
  }
 } while(0);
 $19 = (($20) + 1)|0;
 HEAP32[$2>>2] = $19;
 $21 = HEAP8[$1>>0]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 $24 = HEAP32[$0>>2]|0;
 $25 = $20 >>> 5;
 $26 = (($24) + ($25<<2)|0);
 $27 = $20 & 31;
 $28 = 1 << $27;
 if ($23) {
  $31 = $28 ^ -1;
  $32 = HEAP32[$26>>2]|0;
  $33 = $32 & $31;
  $storemerge = $33;
  HEAP32[$26>>2] = $storemerge;
  return;
 } else {
  $29 = HEAP32[$26>>2]|0;
  $30 = $29 | $28;
  $storemerge = $30;
  HEAP32[$26>>2] = $storemerge;
  return;
 }
}
function __ZN4surf10LoudsDenseC2EPKNS_11SuRFBuilderE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0101114 = 0, $$0113 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = (__ZNK4surf11SuRFBuilder19getSparseStartLevelEv($1)|0);
 HEAP32[$0>>2] = $6;
 HEAP32[$2>>2] = 0;
 $7 = ((($2)) + 4|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($2)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = ($6|0)==(0);
 if (!($9)) {
  $$0101114 = 0;
  while(1) {
   $10 = (__ZNK4surf11SuRFBuilder15getBitmapLabelsEv($1)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (((($11) + (($$0101114*12)|0)|0)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($11) + (($$0101114*12)|0)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($13) - ($15))|0;
   $17 = $16 << 3;
   HEAP32[$3>>2] = $17;
   $18 = HEAP32[$7>>2]|0;
   $19 = HEAP32[$8>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    HEAP32[$18>>2] = $17;
    $21 = HEAP32[$7>>2]|0;
    $22 = ((($21)) + 4|0);
    HEAP32[$7>>2] = $22;
   } else {
    __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($2,$3);
   }
   $23 = (($$0101114) + 1)|0;
   $24 = HEAP32[$0>>2]|0;
   $25 = ($23>>>0)<($24>>>0);
   if ($25) {
    $$0101114 = $23;
   } else {
    break;
   }
  }
 }
 $26 = (__Znwj(16)|0);
 $27 = (__ZNK4surf11SuRFBuilder15getBitmapLabelsEv($1)|0);
 $28 = HEAP32[$0>>2]|0;
 __ZN4surf13BitvectorRankC2EjRKNSt3__26vectorINS2_IyNS1_9allocatorIyEEEENS3_IS5_EEEERKNS2_IjNS3_IjEEEEjj($26,512,$27,$2,0,$28);
 $29 = ((($0)) + 4|0);
 HEAP32[$29>>2] = $26;
 $30 = (__Znwj(16)|0);
 $31 = (__ZNK4surf11SuRFBuilder27getBitmapChildIndicatorBitsEv($1)|0);
 $32 = HEAP32[$0>>2]|0;
 __ZN4surf13BitvectorRankC2EjRKNSt3__26vectorINS2_IyNS1_9allocatorIyEEEENS3_IS5_EEEERKNS2_IjNS3_IjEEEEjj($30,512,$31,$2,0,$32);
 $33 = ((($0)) + 8|0);
 HEAP32[$33>>2] = $30;
 $34 = (__Znwj(16)|0);
 $35 = (__ZNK4surf11SuRFBuilder25getPrefixkeyIndicatorBitsEv($1)|0);
 $36 = (__ZNK4surf11SuRFBuilder13getNodeCountsEv($1)|0);
 $37 = HEAP32[$0>>2]|0;
 __ZN4surf13BitvectorRankC2EjRKNSt3__26vectorINS2_IyNS1_9allocatorIyEEEENS3_IS5_EEEERKNS2_IjNS3_IjEEEEjj($34,512,$35,$36,0,$37);
 $38 = ((($0)) + 12|0);
 HEAP32[$38>>2] = $34;
 $39 = (__ZNK4surf11SuRFBuilder13getSuffixTypeEv($1)|0);
 $40 = ($39|0)==(0);
 if ($40) {
  $41 = (__Znwj(20)|0);
  __ZN4surf15BitvectorSuffixC2Ev($41);
  $42 = ((($0)) + 16|0);
  HEAP32[$42>>2] = $41;
  __ZNSt3__26vectorIjNS_9allocatorIjEEED2Ev($2);
  STACKTOP = sp;return;
 }
 $43 = (__ZNK4surf11SuRFBuilder16getHashSuffixLenEv($1)|0);
 $44 = (__ZNK4surf11SuRFBuilder16getRealSuffixLenEv($1)|0);
 $45 = (($44) + ($43))|0;
 HEAP32[$4>>2] = 0;
 $46 = ((($4)) + 4|0);
 HEAP32[$46>>2] = 0;
 $47 = ((($4)) + 8|0);
 HEAP32[$47>>2] = 0;
 $48 = HEAP32[$0>>2]|0;
 $49 = ($48|0)==(0);
 if (!($49)) {
  $$0113 = 0;
  while(1) {
   $50 = (__ZNK4surf11SuRFBuilder15getSuffixCountsEv($1)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + ($$0113<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = Math_imul($53, $45)|0;
   HEAP32[$5>>2] = $54;
   $55 = HEAP32[$46>>2]|0;
   $56 = HEAP32[$47>>2]|0;
   $57 = ($55>>>0)<($56>>>0);
   if ($57) {
    HEAP32[$55>>2] = $54;
    $58 = HEAP32[$46>>2]|0;
    $59 = ((($58)) + 4|0);
    HEAP32[$46>>2] = $59;
   } else {
    __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($4,$5);
   }
   $60 = (($$0113) + 1)|0;
   $61 = HEAP32[$0>>2]|0;
   $62 = ($60>>>0)<($61>>>0);
   if ($62) {
    $$0113 = $60;
   } else {
    break;
   }
  }
 }
 $63 = (__Znwj(20)|0);
 $64 = (__ZNK4surf11SuRFBuilder13getSuffixTypeEv($1)|0);
 $65 = (__ZNK4surf11SuRFBuilder11getSuffixesEv($1)|0);
 $66 = HEAP32[$0>>2]|0;
 __ZN4surf15BitvectorSuffixC2ENS_10SuffixTypeEjjRKNSt3__26vectorINS3_IyNS2_9allocatorIyEEEENS4_IS6_EEEERKNS3_IjNS4_IjEEEEjj($63,$64,$43,$44,$65,$4,0,$66);
 $67 = ((($0)) + 16|0);
 HEAP32[$67>>2] = $63;
 __ZNSt3__26vectorIjNS_9allocatorIjEEED2Ev($4);
 __ZNSt3__26vectorIjNS_9allocatorIjEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNK4surf11SuRFBuilder19getSparseStartLevelEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNK4surf11SuRFBuilder15getBitmapLabelsEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 return ($1|0);
}
function __ZN4surf13BitvectorRankC2EjRKNSt3__26vectorINS2_IyNS1_9allocatorIyEEEENS3_IS5_EEEERKNS2_IjNS3_IjEEEEjj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4surf9BitvectorC2ERKNSt3__26vectorINS2_IyNS1_9allocatorIyEEEENS3_IS5_EEEERKNS2_IjNS3_IjEEEEjj($0,$2,$3,$4,$5);
 $6 = ((($0)) + 8|0);
 HEAP32[$6>>2] = $1;
 __ZN4surf13BitvectorRank11initRankLutEv($0);
 return;
}
function __ZNK4surf11SuRFBuilder27getBitmapChildIndicatorBitsEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 60|0);
 return ($1|0);
}
function __ZNK4surf11SuRFBuilder25getPrefixkeyIndicatorBitsEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 72|0);
 return ($1|0);
}
function __ZNK4surf11SuRFBuilder13getNodeCountsEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 120|0);
 return ($1|0);
}
function __ZNK4surf11SuRFBuilder13getSuffixTypeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 84|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN4surf15BitvectorSuffixC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4surf9BitvectorC2Ev($0);
 $1 = ((($0)) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = 0;
 return;
}
function __ZNK4surf11SuRFBuilder16getHashSuffixLenEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 88|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNK4surf11SuRFBuilder16getRealSuffixLenEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 92|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNK4surf11SuRFBuilder15getSuffixCountsEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 108|0);
 return ($1|0);
}
function __ZNK4surf11SuRFBuilder11getSuffixesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 96|0);
 return ($1|0);
}
function __ZN4surf15BitvectorSuffixC2ENS_10SuffixTypeEjjRKNSt3__26vectorINS3_IyNS2_9allocatorIyEEEENS4_IS6_EEEERKNS3_IjNS4_IjEEEEjj($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4surf9BitvectorC2ERKNSt3__26vectorINS2_IyNS1_9allocatorIyEEEENS3_IS5_EEEERKNS2_IjNS3_IjEEEEjj($0,$4,$5,$6,$7);
 $8 = ((($0)) + 8|0);
 HEAP32[$8>>2] = $1;
 $9 = ((($0)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = ((($0)) + 16|0);
 HEAP32[$10>>2] = $3;
 return;
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213__vector_baseIjNS_9allocatorIjEEED2Ev($0);
 return;
}
function __ZNK4surf10LoudsDense9lookupKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$047$lcssa = 0, $$04759 = 0, $$048 = 0, $$060 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $$047$lcssa = 0;
  } else {
   $5 = ((($1)) + 11|0);
   $6 = ((($1)) + 4|0);
   $7 = ((($0)) + 4|0);
   $8 = ((($0)) + 8|0);
   $$04759 = 0;$$060 = 0;
   while(1) {
    $9 = $$04759 << 8;
    $10 = HEAP8[$5>>0]|0;
    $11 = $10&255;
    $12 = $11 & 128;
    $13 = ($12|0)==(0);
    $14 = HEAP32[$6>>2]|0;
    $15 = $13 ? $11 : $14;
    $16 = ($$060>>>0)<($15>>>0);
    if (!($16)) {
     label = 4;
     break;
    }
    $25 = ($10<<24>>24)<(0);
    $26 = HEAP32[$1>>2]|0;
    $27 = $25 ? $26 : $1;
    $28 = (($27) + ($$060)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29&255;
    $31 = $9 | $30;
    $32 = HEAP32[$7>>2]|0;
    $33 = (__ZNK4surf9Bitvector7readBitEj($32,$31)|0);
    if (!($33)) {
     $$048 = 0;
     label = 11;
     break;
    }
    $34 = HEAP32[$8>>2]|0;
    $35 = (__ZNK4surf9Bitvector7readBitEj($34,$31)|0);
    if (!($35)) {
     label = 8;
     break;
    }
    $41 = (__ZNK4surf10LoudsDense15getChildNodeNumEj($0,$31)|0);
    $42 = (($$060) + 1)|0;
    $43 = HEAP32[$0>>2]|0;
    $44 = ($42>>>0)<($43>>>0);
    if ($44) {
     $$04759 = $41;$$060 = $42;
    } else {
     $$047$lcssa = $41;
     break L1;
    }
   }
   if ((label|0) == 4) {
    $17 = ((($0)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (__ZNK4surf9Bitvector7readBitEj($18,$$04759)|0);
    if (!($19)) {
     $$048 = 0;
     return ($$048|0);
    }
    $20 = (($$060) + 1)|0;
    $21 = ((($0)) + 16|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (__ZNK4surf10LoudsDense12getSuffixPosEjb($0,$9,1)|0);
    $24 = (__ZNK4surf15BitvectorSuffix13checkEqualityEjRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($22,$23,$1,$20)|0);
    $$048 = $24;
    return ($$048|0);
   }
   else if ((label|0) == 8) {
    $36 = ((($0)) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (__ZNK4surf10LoudsDense12getSuffixPosEjb($0,$31,0)|0);
    $39 = (($$060) + 1)|0;
    $40 = (__ZNK4surf15BitvectorSuffix13checkEqualityEjRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($37,$38,$1,$39)|0);
    $$048 = $40;
    return ($$048|0);
   }
   else if ((label|0) == 11) {
    return ($$048|0);
   }
  }
 } while(0);
 HEAP32[$2>>2] = $$047$lcssa;
 $$048 = 1;
 return ($$048|0);
}
function __ZNK4surf10LoudsDense12getSuffixPosEjb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = $1 >>> 8;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZNK4surf13BitvectorRank4rankEj($5,$1)|0);
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNK4surf13BitvectorRank4rankEj($8,$1)|0);
 $10 = (($6) - ($9))|0;
 $11 = ((($0)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__ZNK4surf13BitvectorRank4rankEj($12,$3)|0);
 $14 = (($13) + ($10))|0;
 $15 = (($14) + -1)|0;
 if (!($2)) {
  return ($15|0);
 }
 $16 = HEAP32[$4>>2]|0;
 $17 = (__ZNK4surf9Bitvector7readBitEj($16,$1)|0);
 if ($17) {
  $18 = HEAP32[$7>>2]|0;
  $19 = (__ZNK4surf9Bitvector7readBitEj($18,$1)|0);
  $20 = (($14) + -2)|0;
  $$ = $19 ? $15 : $20;
  return ($$|0);
 } else {
  return ($15|0);
 }
 return (0)|0;
}
function __ZNK4surf10LoudsDense15getChildNodeNumEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK4surf13BitvectorRank4rankEj($3,$1)|0);
 return ($4|0);
}
function __ZNK4surf10LoudsDense20moveToKeyGreaterThanERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbRNS0_4IterE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$054$lcssa = 0, $$05466 = 0, $$055 = 0, $$067 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $$054$lcssa = 0;
  } else {
   $6 = ((($1)) + 11|0);
   $7 = ((($1)) + 4|0);
   $8 = ((($0)) + 4|0);
   $9 = ((($0)) + 8|0);
   $$05466 = 0;$$067 = 0;
   while(1) {
    $10 = $$05466 << 8;
    $11 = HEAP8[$6>>0]|0;
    $12 = $11&255;
    $13 = $12 & 128;
    $14 = ($13|0)==(0);
    $15 = HEAP32[$7>>2]|0;
    $16 = $14 ? $12 : $15;
    $17 = ($$067>>>0)<($16>>>0);
    if (!($17)) {
     label = 4;
     break;
    }
    $24 = ($11<<24>>24)<(0);
    $25 = HEAP32[$1>>2]|0;
    $26 = $24 ? $25 : $1;
    $27 = (($26) + ($$067)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28&255;
    $30 = $10 | $29;
    __ZN4surf10LoudsDense4Iter6appendEj($3,$30);
    $31 = HEAP32[$8>>2]|0;
    $32 = (__ZNK4surf9Bitvector7readBitEj($31,$30)|0);
    if (!($32)) {
     label = 9;
     break;
    }
    $33 = HEAP32[$9>>2]|0;
    $34 = (__ZNK4surf9Bitvector7readBitEj($33,$30)|0);
    if (!($34)) {
     label = 11;
     break;
    }
    $37 = (__ZNK4surf10LoudsDense15getChildNodeNumEj($0,$30)|0);
    $38 = (($$067) + 1)|0;
    $39 = HEAP32[$0>>2]|0;
    $40 = ($38>>>0)<($39>>>0);
    if ($40) {
     $$05466 = $37;$$067 = $38;
    } else {
     $$054$lcssa = $37;
     break L1;
    }
   }
   if ((label|0) == 4) {
    $18 = (($10) + -1)|0;
    $19 = (__ZNK4surf10LoudsDense10getNextPosEj($0,$18)|0);
    __ZN4surf10LoudsDense4Iter6appendEj($3,$19);
    $20 = ((($0)) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (__ZNK4surf9Bitvector7readBitEj($21,$$05466)|0);
    if ($22) {
     $23 = ((($3)) + 40|0);
     HEAP8[$23>>0] = 1;
    } else {
     __ZN4surf10LoudsDense4Iter17moveToLeftMostKeyEv($3);
    }
    __ZN4surf10LoudsDense4Iter8setFlagsEbbbb($3,1,1,1,1);
    $$055 = 1;
    return ($$055|0);
   }
   else if ((label|0) == 9) {
    __ZN4surf10LoudsDense4IterppEi($3,0);
    $$055 = 0;
    return ($$055|0);
   }
   else if ((label|0) == 11) {
    $35 = (($$067) + 1)|0;
    $36 = (__ZNK4surf10LoudsDense24compareSuffixGreaterThanEjRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjbRNS0_4IterE($0,$30,$1,$35,0,$3)|0);
    $$055 = $36;
    return ($$055|0);
   }
  }
 } while(0);
 __ZN4surf10LoudsDense4Iter17setSendOutNodeNumEj($3,$$054$lcssa);
 __ZN4surf10LoudsDense4Iter8setFlagsEbbbb($3,1,0,1,1);
 $$055 = 1;
 return ($$055|0);
}
function __ZN4surf10LoudsDense4Iter6appendEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1&255;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4)|0);
 HEAP8[$7>>0] = $2;
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 HEAP32[$11>>2] = $1;
 $12 = HEAP32[$3>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[$3>>2] = $13;
 return;
}
function __ZNK4surf10LoudsDense10getNextPosEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK4surf9Bitvector20distanceToNextSetBitEj($3,$1)|0);
 $5 = (($4) + ($1))|0;
 return ($5|0);
}
function __ZN4surf10LoudsDense4Iter17moveToLeftMostKeyEv($0) {
 $0 = $0|0;
 var $$014 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZNK4surf9Bitvector7readBitEj($11,$7)|0);
 if (!($12)) {
  __ZN4surf10LoudsDense4Iter8setFlagsEbbbb($0,1,1,1,1);
  return;
 }
 $13 = (__ZNK4surf10LoudsDense9getHeightEv($9)|0);
 $14 = tempRet0;
 $15 = (_i64Add(($13|0),($14|0),-1,-1)|0);
 $16 = tempRet0;
 $17 = ($16>>>0)>(0);
 $18 = ($15>>>0)>($3>>>0);
 $19 = ($16|0)==(0);
 $20 = $19 & $18;
 $21 = $17 | $20;
 $22 = HEAP32[$8>>2]|0;
 $23 = (__ZNK4surf10LoudsDense15getChildNodeNumEj($22,$7)|0);
 L5: do {
  if ($21) {
   $$014 = $3;$41 = $23;
   while(1) {
    $38 = HEAP32[$8>>2]|0;
    $39 = ((($38)) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $42 = (__ZNK4surf9Bitvector7readBitEj($40,$41)|0);
    $43 = $41 << 8;
    $44 = (($43) + -1)|0;
    $36 = (__ZNK4surf10LoudsDense10getNextPosEj($38,$44)|0);
    __ZN4surf10LoudsDense4Iter6appendEj($0,$36);
    if ($42) {
     label = 6;
     break;
    }
    $24 = HEAP32[$8>>2]|0;
    $46 = ((($24)) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (__ZNK4surf9Bitvector7readBitEj($47,$36)|0);
    $31 = (($$014) + 1)|0;
    if (!($48)) {
     label = 8;
     break;
    }
    $25 = (__ZNK4surf10LoudsDense9getHeightEv($24)|0);
    $26 = tempRet0;
    $27 = (_i64Add(($25|0),($26|0),-1,-1)|0);
    $28 = tempRet0;
    $29 = ($28>>>0)>(0);
    $30 = ($27>>>0)>($31>>>0);
    $32 = ($28|0)==(0);
    $33 = $32 & $30;
    $34 = $29 | $33;
    $35 = HEAP32[$8>>2]|0;
    $37 = (__ZNK4surf10LoudsDense15getChildNodeNumEj($35,$36)|0);
    if ($34) {
     $$014 = $31;$41 = $37;
    } else {
     $$lcssa = $37;
     break L5;
    }
   }
   if ((label|0) == 6) {
    $45 = ((($0)) + 40|0);
    HEAP8[$45>>0] = 1;
    __ZN4surf10LoudsDense4Iter8setFlagsEbbbb($0,1,1,1,1);
    return;
   }
   else if ((label|0) == 8) {
    __ZN4surf10LoudsDense4Iter8setFlagsEbbbb($0,1,1,1,1);
    return;
   }
  } else {
   $$lcssa = $23;
  }
 } while(0);
 $49 = ((($0)) + 8|0);
 HEAP32[$49>>2] = $$lcssa;
 __ZN4surf10LoudsDense4Iter8setFlagsEbbbb($0,1,1,0,1);
 return;
}
function __ZN4surf10LoudsDense4Iter8setFlagsEbbbb($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = $1&1;
 $6 = $2&1;
 $7 = $3&1;
 $8 = $4&1;
 HEAP8[$0>>0] = $5;
 $9 = ((($0)) + 1|0);
 HEAP8[$9>>0] = $6;
 $10 = ((($0)) + 2|0);
 HEAP8[$10>>0] = $7;
 $11 = ((($0)) + 3|0);
 HEAP8[$11>>0] = $8;
 return;
}
function __ZN4surf10LoudsDense4IterppEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lcssa = 0, $$lcssa12 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 40|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  HEAP8[$2>>0] = 0;
  __ZN4surf10LoudsDense4Iter17moveToLeftMostKeyEv($0);
  return;
 }
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -1)|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (__ZNK4surf10LoudsDense10getNextPosEj($14,$12)|0);
 $16 = $15 >>> 8;
 $17 = $12 >>> 8;
 $18 = ($16>>>0)>($17>>>0);
 $19 = HEAP32[$6>>2]|0;
 $20 = (($19) + -1)|0;
 L5: do {
  if ($18) {
   $21 = $20;$24 = $19;
   while(1) {
    HEAP32[$6>>2] = $21;
    $22 = ($21|0)==(0);
    if ($22) {
     break;
    }
    $23 = (($24) + -2)|0;
    $25 = HEAP32[$9>>2]|0;
    $26 = (($25) + ($23<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = HEAP32[$13>>2]|0;
    $29 = (__ZNK4surf10LoudsDense10getNextPosEj($28,$27)|0);
    $30 = $29 >>> 8;
    $31 = $27 >>> 8;
    $32 = ($30>>>0)>($31>>>0);
    $33 = HEAP32[$6>>2]|0;
    $34 = (($33) + -1)|0;
    if ($32) {
     $21 = $34;$24 = $33;
    } else {
     $$lcssa = $34;$$lcssa12 = $29;
     break L5;
    }
   }
   HEAP8[$0>>0] = 0;
   return;
  } else {
   $$lcssa = $20;$$lcssa12 = $15;
  }
 } while(0);
 __ZN4surf10LoudsDense4Iter3setEjj($0,$$lcssa,$$lcssa12);
 __ZN4surf10LoudsDense4Iter17moveToLeftMostKeyEv($0);
 return;
}
function __ZNK4surf10LoudsDense24compareSuffixGreaterThanEjRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjbRNS0_4IterE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (__ZNK4surf10LoudsDense12getSuffixPosEjb($0,$1,0)|0);
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNK4surf15BitvectorSuffix7compareEjRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($8,$6,$2,$3)|0);
 $10 = ($9|0)<(0);
 if ($10) {
  __ZN4surf10LoudsDense4IterppEi($5,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  __ZN4surf10LoudsDense4Iter8setFlagsEbbbb($5,1,1,1,1);
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN4surf10LoudsDense4Iter17setSendOutNodeNumEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZNK4surf10LoudsDense14serializedSizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK4surf13BitvectorRank14serializedSizeEv($3)|0);
 $5 = (($4) + 4)|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZNK4surf13BitvectorRank14serializedSizeEv($7)|0);
 $9 = (($5) + ($8))|0;
 $10 = ((($0)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZNK4surf13BitvectorRank14serializedSizeEv($11)|0);
 $13 = (($9) + ($12))|0;
 $14 = ((($0)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (__ZNK4surf15BitvectorSuffix14serializedSizeEv($15)|0);
 $17 = (($13) + ($16))|0;
 $18 = $1;
 $19 = $18;
 HEAP32[$19>>2] = $17;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = 0;
 __ZN4surf9sizeAlignERy($1);
 $22 = $1;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 tempRet0 = ($27);
 STACKTOP = sp;return ($24|0);
}
function __ZNK4surf13BitvectorRank14serializedSizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (__ZNK4surf9Bitvector8bitsSizeEv($0)|0);
 $3 = (($2) + 8)|0;
 $4 = (__ZNK4surf13BitvectorRank11rankLutSizeEv($0)|0);
 $5 = (($3) + ($4))|0;
 HEAP32[$1>>2] = $5;
 __ZN4surf9sizeAlignERj($1);
 $6 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNK4surf15BitvectorSuffix14serializedSizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (__ZNK4surf9Bitvector8bitsSizeEv($0)|0);
 $3 = (($2) + 16)|0;
 HEAP32[$1>>2] = $3;
 __ZN4surf9sizeAlignERj($1);
 $4 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZNK4surf10LoudsDense14getMemoryUsageEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZNK4surf13BitvectorRank4sizeEv($2)|0);
 $4 = (($3) + 20)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZNK4surf13BitvectorRank4sizeEv($6)|0);
 $8 = (($4) + ($7))|0;
 $9 = ((($0)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (__ZNK4surf13BitvectorRank4sizeEv($10)|0);
 $12 = (($8) + ($11))|0;
 $13 = ((($0)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (__ZNK4surf15BitvectorSuffix4sizeEv($14)|0);
 $16 = (($12) + ($15))|0;
 tempRet0 = (0);
 return ($16|0);
}
function __ZNK4surf13BitvectorRank4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNK4surf9Bitvector8bitsSizeEv($0)|0);
 $2 = (($1) + 16)|0;
 $3 = (__ZNK4surf13BitvectorRank11rankLutSizeEv($0)|0);
 $4 = (($2) + ($3))|0;
 return ($4|0);
}
function __ZNK4surf15BitvectorSuffix4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNK4surf9Bitvector8bitsSizeEv($0)|0);
 $2 = (($1) + 20)|0;
 return ($2|0);
}
function __ZNK4surf13BitvectorRank4rankEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 6;
 $5 = (($1>>>0) / ($3>>>0))&-1;
 $6 = (($3) + -1)|0;
 $7 = $6 & $1;
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($5<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = Math_imul($5, $4)|0;
 $15 = (($7) + 1)|0;
 $16 = (__ZN4surf14popcountLinearEPyyy($13,$14,0,$15,0)|0);
 $17 = tempRet0;
 $18 = (_i64Add(($16|0),($17|0),($11|0),0)|0);
 $19 = tempRet0;
 return ($18|0);
}
function __ZNK4surf10LoudsDense10getPrevPosEjPb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZNK4surf9Bitvector20distanceToPrevSetBitEj($4,$1)|0);
 $6 = ($5>>>0)<($1>>>0);
 if ($6) {
  HEAP8[$2>>0] = 0;
  $7 = (($1) - ($5))|0;
  $$0 = $7;
  return ($$0|0);
 } else {
  HEAP8[$2>>0] = 1;
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN4surf10LoudsDense4Iter5clearEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0] = 0;
 $1 = ((($0)) + 12|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 40|0);
 HEAP8[$2>>0] = 0;
 return;
}
function __ZNK4surf10LoudsDense4Iter7compareERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$0109 = 0, $$1 = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 12|0;
 $3 = sp;
 $4 = ((($0)) + 40|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + -1)|0;
  $11 = ((($1)) + 11|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $13 & 128;
  $15 = ($14|0)==(0);
  $16 = ((($1)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $15 ? $13 : $17;
  $19 = ($10>>>0)<($18>>>0);
  if ($19) {
   $$1 = -1;
   STACKTOP = sp;return ($$1|0);
  }
 }
 __ZNK4surf10LoudsDense4Iter6getKeyEv($2,$0);
 $20 = ((($2)) + 11|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 & 128;
 $24 = ($23|0)==(0);
 $25 = ((($2)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $24 ? $22 : $26;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($3,$1,0,$27,$1);
 $28 = ((($3)) + 11|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = ($29<<24>>24)<(0);
 $31 = HEAP32[$3>>2]|0;
 $32 = $30 ? $31 : $3;
 $33 = $29&255;
 $34 = $33 & 128;
 $35 = ($34|0)==(0);
 $36 = ((($3)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35 ? $33 : $37;
 $39 = HEAP8[$20>>0]|0;
 $40 = $39&255;
 $41 = $40 & 128;
 $42 = ($41|0)==(0);
 $43 = HEAP32[$25>>2]|0;
 $44 = $42 ? $40 : $43;
 $45 = ($39<<24>>24)<(0);
 $46 = HEAP32[$2>>2]|0;
 $47 = $45 ? $46 : $2;
 $48 = ($38>>>0)<($44>>>0);
 $$sroa$speculated = $48 ? $38 : $44;
 $49 = (__ZNSt3__211char_traitsIcE7compareEPKcS3_j($47,$32,$$sroa$speculated)|0);
 $50 = ($49|0)==(0);
 $51 = ($44>>>0)<($38>>>0);
 $$ = $48&1;
 $$$ = $51 ? -1 : $$;
 if ($50) {
  $52 = ($$$|0)==(0);
  if ($52) {
   $53 = (__ZNK4surf10LoudsDense4Iter10isCompleteEv($0)|0);
   if ($53) {
    $54 = ((($0)) + 4|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($0)) + 12|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($57) + -1)|0;
    $59 = ((($0)) + 28|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (($60) + ($58<<2)|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = HEAP8[$4>>0]|0;
    $64 = $63 & 1;
    $65 = ($64<<24>>24)!=(0);
    $66 = (__ZNK4surf10LoudsDense12getSuffixPosEjb($55,$62,$65)|0);
    $67 = HEAP32[$54>>2]|0;
    $68 = ((($67)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = HEAP32[$56>>2]|0;
    $71 = (__ZNK4surf15BitvectorSuffix7compareEjRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($69,$66,$1,$70)|0);
    $$0109 = $71;
   } else {
    $$0109 = 0;
   }
  } else {
   $$0109 = $$$;
  }
 } else {
  $$0109 = $49;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 $$1 = $$0109;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK4surf10LoudsDense4Iter6getKeyEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$078 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
  STACKTOP = sp;return;
 }
 $6 = ((($1)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 40|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9 << 7)&255;
 $sext = ($10<<24>>24) >> 7;
 $11 = $sext << 24 >> 24;
 $$ = (($7) + ($11))|0;
 $12 = ((($1)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $14 = ($$>>>0)>(4294967279);
 if ($14) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $15 = ($$>>>0)<(11);
 if ($15) {
  $16 = $$&255;
  $17 = ((($0)) + 11|0);
  HEAP8[$17>>0] = $16;
  $$078 = $0;
 } else {
  $18 = (($$) + 16)|0;
  $19 = $18 & -16;
  $20 = (__Znwj($19)|0);
  HEAP32[$0>>2] = $20;
  $21 = $19 | -2147483648;
  $22 = ((($0)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($0)) + 4|0);
  HEAP32[$23>>2] = $$;
  $$078 = $20;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$078,$13,$$)|0);
 $24 = (($$078) + ($$)|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($24,$2);
 STACKTOP = sp;return;
}
function __ZNK4surf10LoudsDense4Iter10isCompleteEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $13 = 0;
  return ($13|0);
 }
 $5 = ((($0)) + 2|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $13 = 0;
  return ($13|0);
 }
 $9 = ((($0)) + 3|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)!=(0);
 $13 = $12;
 return ($13|0);
}
function __ZN4surf10LoudsDense4Iter21setToFirstLabelInRootEv($0) {
 $0 = $0|0;
 var $$sink = 0, $$sink1 = 0, $$sink1$in = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZNK4surf9Bitvector7readBitEj($4,0)|0);
 if ($5) {
  $6 = ((($0)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$7>>2] = 0;
  $$sink = 0;
 } else {
  $8 = (__ZNK4surf10LoudsDense10getNextPosEj($2,0)|0);
  $9 = ((($0)) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$10>>2] = $8;
  $11 = HEAP32[$9>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = $12&255;
  $$sink = $13;
 }
 $$sink1$in = ((($0)) + 16|0);
 $$sink1 = HEAP32[$$sink1$in>>2]|0;
 HEAP8[$$sink1>>0] = $$sink;
 $14 = ((($0)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 1)|0;
 HEAP32[$14>>2] = $16;
 return;
}
function __ZN4surf10LoudsDense4Iter20setToLastLabelInRootEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK4surf10LoudsDense10getPrevPosEjPb($3,256,$1)|0);
 $5 = ((($0)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$6>>2] = $4;
 $7 = HEAP32[$5>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&255;
 $10 = ((($0)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP8[$11>>0] = $9;
 $12 = ((($0)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$12>>2] = $14;
 STACKTOP = sp;return;
}
function __ZNK4surf10LoudsDense9getHeightEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 tempRet0 = (0);
 return ($1|0);
}
function __ZN4surf10LoudsDense4Iter18moveToRightMostKeyEv($0) {
 $0 = $0|0;
 var $$013 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 $5 = ((($0)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($10)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__ZNK4surf9Bitvector7readBitEj($12,$8)|0);
 if (!($13)) {
  __ZN4surf10LoudsDense4Iter8setFlagsEbbbb($0,1,1,1,1);
  STACKTOP = sp;return;
 }
 $14 = (__ZNK4surf10LoudsDense9getHeightEv($10)|0);
 $15 = tempRet0;
 $16 = (_i64Add(($14|0),($15|0),-1,-1)|0);
 $17 = tempRet0;
 $18 = ($17>>>0)>(0);
 $19 = ($16>>>0)>($4>>>0);
 $20 = ($17|0)==(0);
 $21 = $20 & $19;
 $22 = $18 | $21;
 $23 = HEAP32[$9>>2]|0;
 $24 = (__ZNK4surf10LoudsDense15getChildNodeNumEj($23,$8)|0);
 L5: do {
  if ($22) {
   $$013 = $4;$41 = $24;
   while(1) {
    $39 = HEAP32[$9>>2]|0;
    $40 = $41 << 8;
    $42 = (($40) + 256)|0;
    $37 = (__ZNK4surf10LoudsDense10getPrevPosEjPb($39,$42,$1)|0);
    $43 = HEAP8[$1>>0]|0;
    $44 = $43 & 1;
    $45 = ($44<<24>>24)==(0);
    if (!($45)) {
     label = 6;
     break;
    }
    __ZN4surf10LoudsDense4Iter6appendEj($0,$37);
    $25 = HEAP32[$9>>2]|0;
    $46 = ((($25)) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (__ZNK4surf9Bitvector7readBitEj($47,$37)|0);
    $32 = (($$013) + 1)|0;
    if (!($48)) {
     label = 8;
     break;
    }
    $26 = (__ZNK4surf10LoudsDense9getHeightEv($25)|0);
    $27 = tempRet0;
    $28 = (_i64Add(($26|0),($27|0),-1,-1)|0);
    $29 = tempRet0;
    $30 = ($29>>>0)>(0);
    $31 = ($28>>>0)>($32>>>0);
    $33 = ($29|0)==(0);
    $34 = $33 & $31;
    $35 = $30 | $34;
    $36 = HEAP32[$9>>2]|0;
    $38 = (__ZNK4surf10LoudsDense15getChildNodeNumEj($36,$37)|0);
    if ($35) {
     $$013 = $32;$41 = $38;
    } else {
     $$lcssa = $38;
     break L5;
    }
   }
   if ((label|0) == 6) {
    HEAP8[$0>>0] = 0;
    STACKTOP = sp;return;
   }
   else if ((label|0) == 8) {
    __ZN4surf10LoudsDense4Iter8setFlagsEbbbb($0,1,1,1,1);
    STACKTOP = sp;return;
   }
  } else {
   $$lcssa = $24;
  }
 } while(0);
 $49 = ((($0)) + 8|0);
 HEAP32[$49>>2] = $$lcssa;
 __ZN4surf10LoudsDense4Iter8setFlagsEbbbb($0,1,1,1,0);
 STACKTOP = sp;return;
}
function __ZN4surf10LoudsDense4Iter3setEjj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2&255;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($1)|0);
 HEAP8[$6>>0] = $3;
 $7 = ((($0)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($1<<2)|0);
 HEAP32[$9>>2] = $2;
 return;
}
function __ZN4surf10LoudsDense4ItermmEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$011 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 40|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 & 1;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $$phi$trans$insert = ((($0)) + 12|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$pre$phiZ2D = $$phi$trans$insert;$11 = $$pre;
 } else {
  HEAP8[$3>>0] = 0;
  $7 = ((($0)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + -1)|0;
  HEAP32[$7>>2] = $9;
  $$pre$phiZ2D = $7;$11 = $9;
 }
 $10 = (($11) + -1)|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($10<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($0)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (__ZNK4surf10LoudsDense10getPrevPosEjPb($17,$15,$2)|0);
 $19 = HEAP8[$2>>0]|0;
 $20 = $19 & 1;
 $21 = ($20<<24>>24)==(0);
 if ($21) {
  $$0 = $15;$$011 = $18;
 } else {
  HEAP8[$0>>0] = 0;
  STACKTOP = sp;return;
 }
 while(1) {
  $22 = $$011 >>> 8;
  $23 = $$0 >>> 8;
  $24 = ($22>>>0)<($23>>>0);
  if (!($24)) {
   label = 13;
   break;
  }
  $25 = HEAP32[$16>>2]|0;
  $26 = ((($25)) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (__ZNK4surf9Bitvector7readBitEj($27,$23)|0);
  if ($28) {
   label = 8;
   break;
  }
  $29 = HEAP32[$$pre$phiZ2D>>2]|0;
  $30 = (($29) + -1)|0;
  HEAP32[$$pre$phiZ2D>>2] = $30;
  $31 = ($30|0)==(0);
  if ($31) {
   label = 10;
   break;
  }
  $32 = (($29) + -2)|0;
  $33 = HEAP32[$12>>2]|0;
  $34 = (($33) + ($32<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (__ZNK4surf10LoudsDense10getPrevPosEjPb($25,$35,$2)|0);
  $37 = HEAP8[$2>>0]|0;
  $38 = $37 & 1;
  $39 = ($38<<24>>24)==(0);
  if ($39) {
   $$0 = $35;$$011 = $36;
  } else {
   label = 12;
   break;
  }
 }
 if ((label|0) == 8) {
  HEAP8[$3>>0] = 1;
  __ZN4surf10LoudsDense4Iter8setFlagsEbbbb($0,1,1,1,1);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 10) {
  HEAP8[$0>>0] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  HEAP8[$0>>0] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 13) {
  $40 = HEAP32[$$pre$phiZ2D>>2]|0;
  $41 = (($40) + -1)|0;
  __ZN4surf10LoudsDense4Iter3setEjj($0,$41,$$011);
  __ZN4surf10LoudsDense4Iter18moveToRightMostKeyEv($0);
  STACKTOP = sp;return;
 }
}
function __ZNK4surf11LabelVector6searchEhRjj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$013 = 0, $$014 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3>>>0)>(1);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$2>>2]|0;
  $8 = (($6) + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)==(-1);
  if ($10) {
   $11 = (($3) + -1)|0;
   $12 = (($7) + 1)|0;
   HEAP32[$2>>2] = $12;
   $$0 = $11;
  } else {
   $$0 = $3;
  }
  $13 = ($$0>>>0)<(3);
  if ($13) {
   $$014 = $$0;
  } else {
   $15 = ($$0>>>0)<(12);
   if ($15) {
    $16 = (__ZNK4surf11LabelVector12binarySearchEhRjj($0,$1,$2,$$0)|0);
    $$013 = $16;
    return ($$013|0);
   } else {
    $17 = (__ZNK4surf11LabelVector10simdSearchEhRjj($0,$1,$2,$$0)|0);
    $$013 = $17;
    return ($$013|0);
   }
  }
 } else {
  $$014 = $3;
 }
 $14 = (__ZNK4surf11LabelVector12linearSearchEhRjj($0,$1,$2,$$014)|0);
 $$013 = $14;
 return ($$013|0);
}
function __ZNK4surf11LabelVector12linearSearchEhRjj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$08 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)==(0);
 if ($4) {
  $$08 = 0;
  return ($$08|0);
 }
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $$09 = 0;
 while(1) {
  $10 = (($7) + ($$09))|0;
  $11 = (($6) + ($10)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==($1<<24>>24);
  $8 = (($$09) + 1)|0;
  if ($13) {
   break;
  }
  $9 = ($8>>>0)<($3>>>0);
  if ($9) {
   $$09 = $8;
  } else {
   $$08 = 0;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$08|0);
 }
 HEAP32[$2>>2] = $10;
 $$08 = 1;
 return ($$08|0);
}
function __ZNK4surf11LabelVector12binarySearchEhRjj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$015 = 0, $$015$ph = 0, $$016$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$2>>2]|0;
 $5 = (($4) + ($3))|0;
 $6 = ((($0)) + 4|0);
 $$015$ph = $5;$$016$ph = $4;
 L1: while(1) {
  $$015 = $$015$ph;
  while(1) {
   $7 = ($$016$ph>>>0)<($$015>>>0);
   if (!($7)) {
    $$0 = 0;
    label = 8;
    break L1;
   }
   $8 = (($$015) + ($$016$ph))|0;
   $9 = $8 >>> 1;
   $10 = HEAP32[$6>>2]|0;
   $11 = (($10) + ($9)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12&255)>($1&255);
   if ($13) {
    $$015 = $9;
   } else {
    break;
   }
  }
  $14 = ($12<<24>>24)==($1<<24>>24);
  if ($14) {
   break;
  }
  $15 = (($9) + 1)|0;
  $$015$ph = $$015;$$016$ph = $15;
 }
 if ((label|0) == 8) {
  return ($$0|0);
 }
 HEAP32[$2>>2] = $9;
 $$0 = 1;
 return ($$0|0);
}
function __ZNK4surf11LabelVector10simdSearchEhRjj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$082 = 0, $$083$lcssa = 0, $$08392 = 0, $$084$lcssa = 0, $$08491 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = SIMD_Int8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), $110 = SIMD_Int8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), $111 = SIMD_Int8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), $112 = SIMD_Bool8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);
 var $113 = SIMD_Int8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = SIMD_Int8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = SIMD_Bool8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = SIMD_Int8x16(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0), $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $bc = SIMD_Int32x4(0,0,0,0), $bc99 = SIMD_Int32x4(0,0,0,0), label = 0, sp = 0, temp_Int8x16_ptr = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $5 = sp;
 $6 = ($3>>>0)>(15);
 L1: do {
  if ($6) {
   $7 = ((($0)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$2>>2]|0;
   $10 = (($8) + ($9)|0);
   ;
   $11 = SIMD_Int8x16_splat($1);
   $12 = ((($4)) + 13|0);
   $13 = ((($4)) + 14|0);
   $14 = ((($4)) + 15|0);
   $$08392 = 0;$$08491 = $3;
   while(1) {
    $15 = (($10) + ($$08392)|0);
    $16 = SIMD_Int8x16_load(HEAPU8, $15);
    $17 = SIMD_Int8x16_equal($11,$16);
    $18 = SIMD_Int8x16_select($17,SIMD_Int8x16_splat(-1), SIMD_Int8x16_splat(0));
    temp_Int8x16_ptr = $4;SIMD_Int8x16_store(HEAPU8, temp_Int8x16_ptr, $18);
    $bc99 = SIMD_Int32x4_fromInt8x16Bits($18);
    $19 = SIMD_Int32x4_extractLane($bc99,0)|0;
    $20 = $19 >>> 7;
    $21 = $20 & 1;
    $22 = SIMD_Int8x16_extractLane($18,1)<<24>>24;
    $23 = $22&255;
    $24 = $23 >>> 7;
    $25 = $24 << 1;
    $26 = $25 | $21;
    $27 = SIMD_Int8x16_extractLane($18,2)<<24>>24;
    $28 = $27&255;
    $29 = $28 >>> 7;
    $30 = $29 << 2;
    $31 = $30 | $26;
    $32 = SIMD_Int8x16_extractLane($18,3)<<24>>24;
    $33 = $32&255;
    $34 = $33 >>> 7;
    $35 = $34 << 3;
    $36 = $35 | $31;
    $37 = SIMD_Int8x16_extractLane($18,4)<<24>>24;
    $38 = $37&255;
    $39 = $38 >>> 7;
    $40 = $39 << 4;
    $41 = $40 | $36;
    $42 = SIMD_Int8x16_extractLane($18,5)<<24>>24;
    $43 = $42&255;
    $44 = $43 >>> 7;
    $45 = $44 << 5;
    $46 = $45 | $41;
    $47 = SIMD_Int8x16_extractLane($18,6)<<24>>24;
    $48 = $47&255;
    $49 = $48 >>> 7;
    $50 = $49 << 6;
    $51 = $50 | $46;
    $52 = SIMD_Int8x16_extractLane($18,7)<<24>>24;
    $53 = $52 & -128;
    $54 = $53&255;
    $55 = $51 | $54;
    $56 = SIMD_Int8x16_extractLane($18,8)<<24>>24;
    $57 = $56&255;
    $58 = $57 >>> 7;
    $59 = $58 << 8;
    $60 = $59 | $55;
    $61 = SIMD_Int8x16_extractLane($18,9)<<24>>24;
    $62 = $61&255;
    $63 = $62 >>> 7;
    $64 = $63 << 9;
    $65 = $64 | $60;
    $66 = SIMD_Int8x16_extractLane($18,10)<<24>>24;
    $67 = $66&255;
    $68 = $67 >>> 7;
    $69 = $68 << 10;
    $70 = $69 | $65;
    $71 = SIMD_Int8x16_extractLane($18,11)<<24>>24;
    $72 = $71&255;
    $73 = $72 >>> 7;
    $74 = $73 << 11;
    $75 = $74 | $70;
    $76 = SIMD_Int8x16_extractLane($18,12)<<24>>24;
    $77 = $76&255;
    $78 = $77 >>> 7;
    $79 = $78 << 12;
    $80 = $79 | $75;
    $81 = HEAP8[$12>>0]|0;
    $82 = $81&255;
    $83 = $82 >>> 7;
    $84 = $83 << 13;
    $85 = $84 | $80;
    $86 = HEAP8[$13>>0]|0;
    $87 = $86&255;
    $88 = $87 >>> 7;
    $89 = $88 << 14;
    $90 = $89 | $85;
    $91 = HEAP8[$14>>0]|0;
    $92 = $91&255;
    $93 = $92 >>> 7;
    $94 = $93 << 15;
    $95 = $94 | $90;
    $96 = ($95|0)==(0);
    if (!($96)) {
     break;
    }
    $101 = (($$08392) + 16)|0;
    $102 = (($$08491) + -16)|0;
    $103 = ($102>>>0)>(15);
    if ($103) {
     $$08392 = $101;$$08491 = $102;
    } else {
     $$083$lcssa = $101;$$084$lcssa = $102;
     break L1;
    }
   }
   $97 = (_llvm_cttz_i32(($95|0))|0);
   $98 = (($97) + ($$08392))|0;
   $99 = HEAP32[$2>>2]|0;
   $100 = (($98) + ($99))|0;
   HEAP32[$2>>2] = $100;
   $$082 = 1;
   STACKTOP = sp;return ($$082|0);
  } else {
   $$083$lcssa = 0;$$084$lcssa = $3;
  }
 } while(0);
 $104 = ($$084$lcssa|0)==(0);
 if ($104) {
  $$082 = 0;
  STACKTOP = sp;return ($$082|0);
 }
 $105 = ((($0)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = HEAP32[$2>>2]|0;
 $108 = (($106) + ($107)|0);
 $109 = (($108) + ($$083$lcssa)|0);
 ;
 $110 = SIMD_Int8x16_splat($1);
 $111 = SIMD_Int8x16_load(HEAPU8, $109);
 $112 = SIMD_Int8x16_equal($110,$111);
 $113 = SIMD_Int8x16_select($112,SIMD_Int8x16_splat(-1), SIMD_Int8x16_splat(0));
 $114 = 1 << $$084$lcssa;
 temp_Int8x16_ptr = $5;SIMD_Int8x16_store(HEAPU8, temp_Int8x16_ptr, $113);
 $bc = SIMD_Int32x4_fromInt8x16Bits($113);
 $115 = SIMD_Int32x4_extractLane($bc,0)|0;
 $116 = $115 >>> 7;
 $117 = $116 & 1;
 $118 = SIMD_Int8x16_extractLane($113,1)<<24>>24;
 $119 = $118&255;
 $120 = $119 >>> 7;
 $121 = $120 << 1;
 $122 = $121 | $117;
 $123 = SIMD_Int8x16_extractLane($113,2)<<24>>24;
 $124 = $123&255;
 $125 = $124 >>> 7;
 $126 = $125 << 2;
 $127 = $126 | $122;
 $128 = SIMD_Int8x16_extractLane($113,3)<<24>>24;
 $129 = $128&255;
 $130 = $129 >>> 7;
 $131 = $130 << 3;
 $132 = $131 | $127;
 $133 = SIMD_Int8x16_extractLane($113,4)<<24>>24;
 $134 = $133&255;
 $135 = $134 >>> 7;
 $136 = $135 << 4;
 $137 = $136 | $132;
 $138 = SIMD_Int8x16_extractLane($113,5)<<24>>24;
 $139 = $138&255;
 $140 = $139 >>> 7;
 $141 = $140 << 5;
 $142 = $141 | $137;
 $143 = SIMD_Int8x16_extractLane($113,6)<<24>>24;
 $144 = $143&255;
 $145 = $144 >>> 7;
 $146 = $145 << 6;
 $147 = $146 | $142;
 $148 = SIMD_Int8x16_extractLane($113,7)<<24>>24;
 $149 = $148 & -128;
 $150 = $149&255;
 $151 = $147 | $150;
 $152 = SIMD_Int8x16_extractLane($113,8)<<24>>24;
 $153 = $152&255;
 $154 = $153 >>> 7;
 $155 = $154 << 8;
 $156 = $155 | $151;
 $157 = SIMD_Int8x16_extractLane($113,9)<<24>>24;
 $158 = $157&255;
 $159 = $158 >>> 7;
 $160 = $159 << 9;
 $161 = $160 | $156;
 $162 = SIMD_Int8x16_extractLane($113,10)<<24>>24;
 $163 = $162&255;
 $164 = $163 >>> 7;
 $165 = $164 << 10;
 $166 = $165 | $161;
 $167 = SIMD_Int8x16_extractLane($113,11)<<24>>24;
 $168 = $167&255;
 $169 = $168 >>> 7;
 $170 = $169 << 11;
 $171 = $170 | $166;
 $172 = SIMD_Int8x16_extractLane($113,12)<<24>>24;
 $173 = $172&255;
 $174 = $173 >>> 7;
 $175 = $174 << 12;
 $176 = $175 | $171;
 $177 = ((($5)) + 13|0);
 $178 = HEAP8[$177>>0]|0;
 $179 = $178&255;
 $180 = $179 >>> 7;
 $181 = $180 << 13;
 $182 = $181 | $176;
 $183 = ((($5)) + 14|0);
 $184 = HEAP8[$183>>0]|0;
 $185 = $184&255;
 $186 = $185 >>> 7;
 $187 = $186 << 14;
 $188 = $187 | $182;
 $189 = ((($5)) + 15|0);
 $190 = HEAP8[$189>>0]|0;
 $191 = $190&255;
 $192 = $191 >>> 7;
 $193 = $192 << 15;
 $194 = $193 | $188;
 $195 = (($114) + -1)|0;
 $196 = $194 & $195;
 $197 = ($196|0)==(0);
 if ($197) {
  $$082 = 0;
  STACKTOP = sp;return ($$082|0);
 }
 $198 = (_llvm_cttz_i32(($196|0))|0);
 $199 = (($198) + ($$083$lcssa))|0;
 $200 = HEAP32[$2>>2]|0;
 $201 = (($199) + ($200))|0;
 HEAP32[$2>>2] = $201;
 $$082 = 1;
 STACKTOP = sp;return ($$082|0);
}
function __ZNK4surf11LabelVector17searchGreaterThanEhRjj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$010 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3>>>0)>(1);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$2>>2]|0;
  $8 = (($6) + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)==(-1);
  if ($10) {
   $11 = (($3) + -1)|0;
   $12 = (($7) + 1)|0;
   HEAP32[$2>>2] = $12;
   $$0 = $11;
  } else {
   $$0 = $3;
  }
  $13 = ($$0>>>0)<(3);
  if ($13) {
   $$010 = $$0;
  } else {
   $15 = (__ZNK4surf11LabelVector23binarySearchGreaterThanEhRjj($0,$1,$2,$$0)|0);
   $$09 = $15;
   return ($$09|0);
  }
 } else {
  $$010 = $3;
 }
 $14 = (__ZNK4surf11LabelVector23linearSearchGreaterThanEhRjj($0,$1,$2,$$010)|0);
 $$09 = $14;
 return ($$09|0);
}
function __ZNK4surf11LabelVector23linearSearchGreaterThanEhRjj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$08 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)==(0);
 if ($4) {
  $$08 = 0;
  return ($$08|0);
 }
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$2>>2]|0;
 $$09 = 0;
 while(1) {
  $10 = (($7) + ($$09))|0;
  $11 = (($6) + ($10)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12&255)>($1&255);
  $8 = (($$09) + 1)|0;
  if ($13) {
   break;
  }
  $9 = ($8>>>0)<($3>>>0);
  if ($9) {
   $$09 = $8;
  } else {
   $$08 = 0;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$08|0);
 }
 HEAP32[$2>>2] = $10;
 $$08 = 1;
 return ($$08|0);
}
function __ZNK4surf11LabelVector23binarySearchGreaterThanEhRjj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$022 = 0, $$022$ph = 0, $$023$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$2>>2]|0;
 $5 = (($4) + ($3))|0;
 $6 = ((($0)) + 4|0);
 $$022$ph = $5;$$023$ph = $4;
 L1: while(1) {
  $$022 = $$022$ph;
  while(1) {
   $7 = ($$023$ph>>>0)<($$022>>>0);
   if (!($7)) {
    label = 9;
    break L1;
   }
   $8 = (($$022) + ($$023$ph))|0;
   $9 = $8 >>> 1;
   $10 = HEAP32[$6>>2]|0;
   $11 = (($10) + ($9)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12&255)>($1&255);
   if ($13) {
    $$022 = $9;
   } else {
    break;
   }
  }
  $14 = ($12<<24>>24)==($1<<24>>24);
  if ($14) {
   label = 6;
   break;
  }
  $19 = (($9) + 1)|0;
  $$022$ph = $$022;$$023$ph = $19;
 }
 if ((label|0) == 6) {
  $15 = (($3) + -1)|0;
  $16 = (($15) + ($4))|0;
  $17 = ($9>>>0)<($16>>>0);
  if (!($17)) {
   $$0 = 0;
   return ($$0|0);
  }
  $18 = (($9) + 1)|0;
  HEAP32[$2>>2] = $18;
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 9) {
  $20 = ($$023$ph>>>0)<($5>>>0);
  if (!($20)) {
   $$0 = 0;
   return ($$0|0);
  }
  HEAP32[$2>>2] = $$023$ph;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN4surf11LoudsSparseC2EPKNS_11SuRFBuilderE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0112131 = 0, $$0117127 = 0, $$0126 = 0, $$pr = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = (__ZNK4surf11SuRFBuilder9getLabelsEv($1)|0);
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$6>>2]|0;
 $10 = (($8) - ($9))|0;
 $11 = (($10|0) / 12)&-1;
 HEAP32[$0>>2] = $11;
 $12 = (__ZNK4surf11SuRFBuilder19getSparseStartLevelEv($1)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = ($12|0)==(0);
 if ($15) {
  $$sink = 0;
 } else {
  $$0112131 = 0;
  while(1) {
   $16 = (__ZNK4surf11SuRFBuilder13getNodeCountsEv($1)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + ($$0112131<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = HEAP32[$14>>2]|0;
   $21 = (($20) + ($19))|0;
   HEAP32[$14>>2] = $21;
   $22 = (($$0112131) + 1)|0;
   $$pr = HEAP32[$13>>2]|0;
   $23 = ($22>>>0)<($$pr>>>0);
   if ($23) {
    $$0112131 = $22;
   } else {
    break;
   }
  }
  $24 = ($$pr|0)==(0);
  if ($24) {
   $$sink = 0;
  } else {
   $25 = (__ZNK4surf11SuRFBuilder13getNodeCountsEv($1)|0);
   $26 = HEAP32[$13>>2]|0;
   $27 = HEAP32[$25>>2]|0;
   $28 = (($27) + ($26<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($21) + -1)|0;
   $31 = (($30) + ($29))|0;
   $$sink = $31;
  }
 }
 $32 = ((($0)) + 12|0);
 HEAP32[$32>>2] = $$sink;
 $33 = (__Znwj(8)|0);
 $34 = (__ZNK4surf11SuRFBuilder9getLabelsEv($1)|0);
 $35 = HEAP32[$13>>2]|0;
 $36 = HEAP32[$0>>2]|0;
 __ZN4surf11LabelVectorC2ERKNSt3__26vectorINS2_IhNS1_9allocatorIhEEEENS3_IS5_EEEEjj($33,$34,$35,$36);
 $37 = ((($0)) + 16|0);
 HEAP32[$37>>2] = $33;
 HEAP32[$2>>2] = 0;
 $38 = ((($2)) + 4|0);
 HEAP32[$38>>2] = 0;
 $39 = ((($2)) + 8|0);
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$0>>2]|0;
 $41 = ($40|0)==(0);
 if (!($41)) {
  $$0117127 = 0;
  while(1) {
   $42 = (__ZNK4surf11SuRFBuilder9getLabelsEv($1)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (((($43) + (($$0117127*12)|0)|0)) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($43) + (($$0117127*12)|0)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($45) - ($47))|0;
   HEAP32[$3>>2] = $48;
   $49 = HEAP32[$38>>2]|0;
   $50 = HEAP32[$39>>2]|0;
   $51 = ($49>>>0)<($50>>>0);
   if ($51) {
    HEAP32[$49>>2] = $48;
    $52 = HEAP32[$38>>2]|0;
    $53 = ((($52)) + 4|0);
    HEAP32[$38>>2] = $53;
   } else {
    __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($2,$3);
   }
   $54 = (($$0117127) + 1)|0;
   $55 = HEAP32[$0>>2]|0;
   $56 = ($54>>>0)<($55>>>0);
   if ($56) {
    $$0117127 = $54;
   } else {
    break;
   }
  }
 }
 $57 = (__Znwj(16)|0);
 $58 = (__ZNK4surf11SuRFBuilder21getChildIndicatorBitsEv($1)|0);
 $59 = HEAP32[$13>>2]|0;
 $60 = HEAP32[$0>>2]|0;
 __ZN4surf13BitvectorRankC2EjRKNSt3__26vectorINS2_IyNS1_9allocatorIyEEEENS3_IS5_EEEERKNS2_IjNS3_IjEEEEjj($57,512,$58,$2,$59,$60);
 $61 = ((($0)) + 20|0);
 HEAP32[$61>>2] = $57;
 $62 = (__Znwj(20)|0);
 $63 = (__ZNK4surf11SuRFBuilder12getLoudsBitsEv($1)|0);
 $64 = HEAP32[$13>>2]|0;
 $65 = HEAP32[$0>>2]|0;
 __ZN4surf15BitvectorSelectC2EjRKNSt3__26vectorINS2_IyNS1_9allocatorIyEEEENS3_IS5_EEEERKNS2_IjNS3_IjEEEEjj($62,64,$63,$2,$64,$65);
 $66 = ((($0)) + 24|0);
 HEAP32[$66>>2] = $62;
 $67 = (__ZNK4surf11SuRFBuilder13getSuffixTypeEv($1)|0);
 $68 = ($67|0)==(0);
 if ($68) {
  $69 = (__Znwj(20)|0);
  __ZN4surf15BitvectorSuffixC2Ev($69);
  $70 = ((($0)) + 28|0);
  HEAP32[$70>>2] = $69;
  __ZNSt3__26vectorIjNS_9allocatorIjEEED2Ev($2);
  STACKTOP = sp;return;
 }
 $71 = (__ZNK4surf11SuRFBuilder16getHashSuffixLenEv($1)|0);
 $72 = (__ZNK4surf11SuRFBuilder16getRealSuffixLenEv($1)|0);
 $73 = (($72) + ($71))|0;
 HEAP32[$4>>2] = 0;
 $74 = ((($4)) + 4|0);
 HEAP32[$74>>2] = 0;
 $75 = ((($4)) + 8|0);
 HEAP32[$75>>2] = 0;
 $76 = HEAP32[$0>>2]|0;
 $77 = ($76|0)==(0);
 if (!($77)) {
  $$0126 = 0;
  while(1) {
   $78 = (__ZNK4surf11SuRFBuilder15getSuffixCountsEv($1)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($79) + ($$0126<<2)|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = Math_imul($81, $73)|0;
   HEAP32[$5>>2] = $82;
   $83 = HEAP32[$74>>2]|0;
   $84 = HEAP32[$75>>2]|0;
   $85 = ($83>>>0)<($84>>>0);
   if ($85) {
    HEAP32[$83>>2] = $82;
    $86 = HEAP32[$74>>2]|0;
    $87 = ((($86)) + 4|0);
    HEAP32[$74>>2] = $87;
   } else {
    __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($4,$5);
   }
   $88 = (($$0126) + 1)|0;
   $89 = HEAP32[$0>>2]|0;
   $90 = ($88>>>0)<($89>>>0);
   if ($90) {
    $$0126 = $88;
   } else {
    break;
   }
  }
 }
 $91 = (__Znwj(20)|0);
 $92 = (__ZNK4surf11SuRFBuilder13getSuffixTypeEv($1)|0);
 $93 = (__ZNK4surf11SuRFBuilder11getSuffixesEv($1)|0);
 $94 = HEAP32[$13>>2]|0;
 $95 = HEAP32[$0>>2]|0;
 __ZN4surf15BitvectorSuffixC2ENS_10SuffixTypeEjjRKNSt3__26vectorINS3_IyNS2_9allocatorIyEEEENS4_IS6_EEEERKNS3_IjNS4_IjEEEEjj($91,$92,$71,$72,$93,$4,$94,$95);
 $96 = ((($0)) + 28|0);
 HEAP32[$96>>2] = $91;
 __ZNSt3__26vectorIjNS_9allocatorIjEEED2Ev($4);
 __ZNSt3__26vectorIjNS_9allocatorIjEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNK4surf11SuRFBuilder9getLabelsEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 return ($1|0);
}
function __ZN4surf11LabelVectorC2ERKNSt3__26vectorINS2_IhNS1_9allocatorIhEEEENS3_IS5_EEEEjj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$03239 = 0, $$03338 = 0, $$03442 = 0, $$035 = 0, $$037 = 0, $$1$lcssa = 0, $$136 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($1)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$1>>2]|0;
  $8 = (($6) - ($7))|0;
  $9 = (($8|0) / 12)&-1;
  $$035 = $9;
 } else {
  $$035 = $3;
 }
 HEAP32[$0>>2] = 1;
 $10 = ($$035>>>0)>($2>>>0);
 if (!($10)) {
  $11 = (__Znaj(1)|0);
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = $11;
  return;
 }
 $$03442 = $2;$20 = 1;
 while(1) {
  $13 = HEAP32[$1>>2]|0;
  $14 = (((($13) + (($$03442*12)|0)|0)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + (($$03442*12)|0)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) - ($17))|0;
  $19 = (($18) + ($20))|0;
  HEAP32[$0>>2] = $19;
  $21 = (($$03442) + 1)|0;
  $exitcond46 = ($21|0)==($$035|0);
  if ($exitcond46) {
   break;
  } else {
   $$03442 = $21;$20 = $19;
  }
 }
 $22 = (__Znaj($19)|0);
 $23 = ((($0)) + 4|0);
 HEAP32[$23>>2] = $22;
 if (!($10)) {
  return;
 }
 $$pre = HEAP32[$1>>2]|0;
 $$03239 = $2;$$03338 = 0;$25 = $$pre;
 while(1) {
  $24 = (((($25) + (($$03239*12)|0)|0)) + 4|0);
  $26 = HEAP32[$24>>2]|0;
  $27 = (($25) + (($$03239*12)|0)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28;
  $30 = ($26|0)==($29|0);
  if ($30) {
   $$1$lcssa = $$03338;$47 = $25;
  } else {
   $$037 = 0;$$136 = $$03338;$32 = $28;
   while(1) {
    $31 = (($32) + ($$037)|0);
    $33 = HEAP8[$31>>0]|0;
    $34 = HEAP32[$23>>2]|0;
    $35 = (($34) + ($$136)|0);
    HEAP8[$35>>0] = $33;
    $36 = (($$136) + 1)|0;
    $37 = (($$037) + 1)|0;
    $38 = HEAP32[$1>>2]|0;
    $39 = (((($38) + (($$03239*12)|0)|0)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($38) + (($$03239*12)|0)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $42;
    $44 = (($40) - ($43))|0;
    $45 = ($37>>>0)<($44>>>0);
    if ($45) {
     $$037 = $37;$$136 = $36;$32 = $42;
    } else {
     $$1$lcssa = $36;$47 = $38;
     break;
    }
   }
  }
  $46 = (($$03239) + 1)|0;
  $exitcond = ($46|0)==($$035|0);
  if ($exitcond) {
   break;
  } else {
   $$03239 = $46;$$03338 = $$1$lcssa;$25 = $47;
  }
 }
 return;
}
function __ZNK4surf11SuRFBuilder21getChildIndicatorBitsEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 return ($1|0);
}
function __ZNK4surf11SuRFBuilder12getLoudsBitsEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 36|0);
 return ($1|0);
}
function __ZN4surf15BitvectorSelectC2EjRKNSt3__26vectorINS2_IyNS1_9allocatorIyEEEENS3_IS5_EEEERKNS2_IjNS3_IjEEEEjj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4surf9BitvectorC2ERKNSt3__26vectorINS2_IyNS1_9allocatorIyEEEENS3_IS5_EEEERKNS2_IjNS3_IjEEEEjj($0,$2,$3,$4,$5);
 $6 = ((($0)) + 8|0);
 HEAP32[$6>>2] = $1;
 __ZN4surf15BitvectorSelect13initSelectLutEv($0);
 return;
}
function __ZNK4surf11LoudsSparse9lookupKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$040 = 0, $$046 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZNK4surf11LoudsSparse16getFirstLabelPosEj($0,$2)|0);
 HEAP32[$3>>2] = $4;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 11|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 & 128;
 $11 = ($10|0)==(0);
 $12 = ((($1)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $11 ? $9 : $13;
 $15 = ($6>>>0)<($14>>>0);
 $16 = ((($0)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 L1: do {
  if ($15) {
   $18 = ((($0)) + 20|0);
   $$046 = $6;$19 = $8;$25 = $4;$27 = $17;
   while(1) {
    $20 = ($19<<24>>24)<(0);
    $21 = HEAP32[$1>>2]|0;
    $22 = $20 ? $21 : $1;
    $23 = (($22) + ($$046)|0);
    $24 = HEAP8[$23>>0]|0;
    $26 = (__ZNK4surf11LoudsSparse8nodeSizeEj($0,$25)|0);
    $28 = (__ZNK4surf11LabelVector6searchEhRjj($27,$24,$3,$26)|0);
    if (!($28)) {
     $$040 = 0;
     label = 10;
     break;
    }
    $29 = HEAP32[$18>>2]|0;
    $30 = HEAP32[$3>>2]|0;
    $31 = (__ZNK4surf9Bitvector7readBitEj($29,$30)|0);
    if (!($31)) {
     break;
    }
    $37 = (__ZNK4surf11LoudsSparse15getChildNodeNumEj($0,$30)|0);
    $38 = (__ZNK4surf11LoudsSparse16getFirstLabelPosEj($0,$37)|0);
    HEAP32[$3>>2] = $38;
    $39 = (($$046) + 1)|0;
    $40 = HEAP8[$7>>0]|0;
    $41 = $40&255;
    $42 = $41 & 128;
    $43 = ($42|0)==(0);
    $44 = HEAP32[$12>>2]|0;
    $45 = $43 ? $41 : $44;
    $46 = ($39>>>0)<($45>>>0);
    $47 = HEAP32[$16>>2]|0;
    if ($46) {
     $$046 = $39;$19 = $40;$25 = $38;$27 = $47;
    } else {
     $$0$lcssa = $39;$$lcssa = $47;$48 = $38;
     break L1;
    }
   }
   if ((label|0) == 10) {
    STACKTOP = sp;return ($$040|0);
   }
   $32 = ((($0)) + 28|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (__ZNK4surf11LoudsSparse12getSuffixPosEj($0,$30)|0);
   $35 = (($$046) + 1)|0;
   $36 = (__ZNK4surf15BitvectorSuffix13checkEqualityEjRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($33,$34,$1,$35)|0);
   $$040 = $36;
   STACKTOP = sp;return ($$040|0);
  } else {
   $$0$lcssa = $6;$$lcssa = $17;$48 = $4;
  }
 } while(0);
 $49 = (__ZNK4surf11LabelVector4readEj($$lcssa,$48)|0);
 $50 = ($49<<24>>24)==(-1);
 if (!($50)) {
  $$040 = 0;
  STACKTOP = sp;return ($$040|0);
 }
 $51 = ((($0)) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (__ZNK4surf9Bitvector7readBitEj($52,$48)|0);
 if ($53) {
  $$040 = 0;
  STACKTOP = sp;return ($$040|0);
 }
 $54 = (($$0$lcssa) + 1)|0;
 $55 = ((($0)) + 28|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (__ZNK4surf11LoudsSparse12getSuffixPosEj($0,$48)|0);
 $58 = (__ZNK4surf15BitvectorSuffix13checkEqualityEjRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($56,$57,$1,$54)|0);
 $$040 = $58;
 STACKTOP = sp;return ($$040|0);
}
function __ZNK4surf11LoudsSparse16getFirstLabelPosEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 1)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = (__ZNK4surf15BitvectorSelect6selectEj($3,$7)|0);
 return ($8|0);
}
function __ZNK4surf11LoudsSparse8nodeSizeEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK4surf9Bitvector20distanceToNextSetBitEj($3,$1)|0);
 return ($4|0);
}
function __ZNK4surf11LoudsSparse12getSuffixPosEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK4surf13BitvectorRank4rankEj($3,$1)|0);
 $5 = (($1) - ($4))|0;
 return ($5|0);
}
function __ZNK4surf11LoudsSparse15getChildNodeNumEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK4surf13BitvectorRank4rankEj($3,$1)|0);
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4))|0;
 return ($7|0);
}
function __ZNK4surf11LabelVector4readEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1)|0);
 $5 = HEAP8[$4>>0]|0;
 return ($5|0);
}
function __ZNK4surf11LoudsSparse20moveToKeyGreaterThanERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbRNS0_4IterE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$099$lcssa = 0, $$099114 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZNK4surf11LoudsSparse4Iter15getStartNodeNumEv($3)|0);
 $6 = (__ZNK4surf11LoudsSparse16getFirstLabelPosEj($0,$5)|0);
 HEAP32[$4>>2] = $6;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($1)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 & 128;
 $13 = ($12|0)==(0);
 $14 = ((($1)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $13 ? $11 : $15;
 $17 = ($8>>>0)<($16>>>0);
 $18 = ((($0)) + 16|0);
 L1: do {
  if ($17) {
   $19 = ((($0)) + 20|0);
   $$099114 = $8;$20 = $6;
   while(1) {
    $21 = (__ZNK4surf11LoudsSparse8nodeSizeEj($0,$20)|0);
    $22 = HEAP32[$18>>2]|0;
    $23 = HEAP8[$9>>0]|0;
    $24 = ($23<<24>>24)<(0);
    $25 = HEAP32[$1>>2]|0;
    $26 = $24 ? $25 : $1;
    $27 = (($26) + ($$099114)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = (__ZNK4surf11LabelVector6searchEhRjj($22,$28,$4,$21)|0);
    if (!($29)) {
     label = 4;
     break;
    }
    $37 = HEAP8[$9>>0]|0;
    $38 = ($37<<24>>24)<(0);
    $39 = HEAP32[$1>>2]|0;
    $40 = $38 ? $39 : $1;
    $41 = (($40) + ($$099114)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = HEAP32[$4>>2]|0;
    __ZN4surf11LoudsSparse4Iter6appendEhj($3,$42,$43);
    $44 = HEAP32[$19>>2]|0;
    $45 = (__ZNK4surf9Bitvector7readBitEj($44,$43)|0);
    if (!($45)) {
     label = 6;
     break;
    }
    $48 = (__ZNK4surf11LoudsSparse15getChildNodeNumEj($0,$43)|0);
    $49 = (__ZNK4surf11LoudsSparse16getFirstLabelPosEj($0,$48)|0);
    HEAP32[$4>>2] = $49;
    $50 = (($$099114) + 1)|0;
    $51 = HEAP8[$9>>0]|0;
    $52 = $51&255;
    $53 = $52 & 128;
    $54 = ($53|0)==(0);
    $55 = HEAP32[$14>>2]|0;
    $56 = $54 ? $52 : $55;
    $57 = ($50>>>0)<($56>>>0);
    if ($57) {
     $$099114 = $50;$20 = $49;
    } else {
     $$099$lcssa = $50;$59 = $49;
     break L1;
    }
   }
   if ((label|0) == 4) {
    $30 = HEAP32[$4>>2]|0;
    $31 = HEAP8[$9>>0]|0;
    $32 = ($31<<24>>24)<(0);
    $33 = HEAP32[$1>>2]|0;
    $34 = $32 ? $33 : $1;
    $35 = (($34) + ($$099114)|0);
    $36 = HEAP8[$35>>0]|0;
    __ZNK4surf11LoudsSparse23moveToLeftInNextSubtrieEjjhRNS0_4IterE($0,$30,$21,$36,$3);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 6) {
    $46 = (($$099114) + 1)|0;
    $47 = (__ZNK4surf11LoudsSparse24compareSuffixGreaterThanEjRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjbRNS0_4IterE($0,$43,$1,$46,0,$3)|0);
    $$0 = $47;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $$099$lcssa = $8;$59 = $6;
  }
 } while(0);
 $58 = HEAP32[$18>>2]|0;
 $60 = (__ZNK4surf11LabelVector4readEj($58,$59)|0);
 $61 = ($60<<24>>24)==(-1);
 if ($61) {
  $62 = ((($0)) + 20|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (__ZNK4surf9Bitvector7readBitEj($63,$59)|0);
  if (!($64)) {
   $65 = ((($0)) + 24|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($59) + 1)|0;
   $68 = (__ZNK4surf9Bitvector7readBitEj($66,$67)|0);
   if (!($68)) {
    __ZN4surf11LoudsSparse4Iter6appendEhj($3,-1,$59);
    $69 = ((($3)) + 44|0);
    HEAP8[$69>>0] = 1;
    if (!($2)) {
     __ZN4surf11LoudsSparse4IterppEi($3,0);
    }
    HEAP8[$3>>0] = 1;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $70 = HEAP8[$9>>0]|0;
 $71 = $70&255;
 $72 = $71 & 128;
 $73 = ($72|0)==(0);
 $74 = HEAP32[$14>>2]|0;
 $75 = $73 ? $71 : $74;
 $76 = ($75>>>0)>($$099$lcssa>>>0);
 if ($76) {
  HEAP8[$3>>0] = 1;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  __ZN4surf11LoudsSparse4Iter17moveToLeftMostKeyEv($3);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNK4surf11LoudsSparse4Iter15getStartNodeNumEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNK4surf11LoudsSparse23moveToLeftInNextSubtrieEjjhRNS0_4IterE($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZNK4surf11LabelVector17searchGreaterThanEhRjj($7,$3,$5,$2)|0);
 $9 = HEAP32[$5>>2]|0;
 if ($8) {
  __ZN4surf11LoudsSparse4Iter6appendEj($4,$9);
  __ZN4surf11LoudsSparse4Iter17moveToLeftMostKeyEv($4);
  STACKTOP = sp;return;
 } else {
  $10 = (($2) + -1)|0;
  $11 = (($10) + ($9))|0;
  __ZN4surf11LoudsSparse4Iter6appendEj($4,$11);
  __ZN4surf11LoudsSparse4IterppEi($4,0);
  STACKTOP = sp;return;
 }
}
function __ZN4surf11LoudsSparse4Iter6appendEhj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4)|0);
 HEAP8[$7>>0] = $1;
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($0)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 HEAP32[$11>>2] = $2;
 $12 = HEAP32[$3>>2]|0;
 $13 = (($12) + 1)|0;
 HEAP32[$3>>2] = $13;
 return;
}
function __ZNK4surf11LoudsSparse24compareSuffixGreaterThanEjRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjbRNS0_4IterE($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (__ZNK4surf11LoudsSparse12getSuffixPosEj($0,$1)|0);
 $7 = ((($0)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNK4surf15BitvectorSuffix7compareEjRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($8,$6,$2,$3)|0);
 $10 = ($9|0)<(0);
 if ($10) {
  __ZN4surf11LoudsSparse4IterppEi($5,0);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP8[$5>>0] = 1;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN4surf11LoudsSparse4IterppEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $$sink9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 44|0);
 HEAP8[$2>>0] = 0;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 $6 = ((($0)) + 32|0);
 $7 = ((($0)) + 4|0);
 $$sink9 = $5;
 while(1) {
  $8 = HEAP32[$6>>2]|0;
  $9 = (($8) + ($$sink9<<2)|0);
  $$0$in = HEAP32[$9>>2]|0;
  $$0 = (($$0$in) + 1)|0;
  $10 = HEAP32[$7>>2]|0;
  $11 = ((($10)) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (__ZNK4surf9Bitvector7numBitsEv($12)|0);
  $14 = ($$0>>>0)<($13>>>0);
  if ($14) {
   $17 = HEAP32[$7>>2]|0;
   $18 = ((($17)) + 24|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (__ZNK4surf9Bitvector7readBitEj($19,$$0)|0);
   $21 = HEAP32[$3>>2]|0;
   $22 = (($21) + -1)|0;
   if ($20) {
    $23 = $22;$26 = $21;
   } else {
    label = 7;
    break;
   }
  } else {
   $15 = HEAP32[$3>>2]|0;
   $16 = (($15) + -1)|0;
   $23 = $16;$26 = $15;
  }
  HEAP32[$3>>2] = $23;
  $24 = ($23|0)==(0);
  $25 = (($26) + -2)|0;
  if ($24) {
   label = 6;
   break;
  } else {
   $$sink9 = $25;
  }
 }
 if ((label|0) == 6) {
  HEAP8[$0>>0] = 0;
  return;
 }
 else if ((label|0) == 7) {
  __ZN4surf11LoudsSparse4Iter3setEjj($0,$22,$$0);
  __ZN4surf11LoudsSparse4Iter17moveToLeftMostKeyEv($0);
  return;
 }
}
function __ZN4surf11LoudsSparse4Iter17moveToLeftMostKeyEv($0) {
 $0 = $0|0;
 var $$02022 = 0, $$023 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $4 = ((($0)) + 4|0);
 if ($3) {
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (__ZNK4surf11LoudsSparse16getFirstLabelPosEj($5,$7)|0);
  $9 = HEAP32[$4>>2]|0;
  $10 = ((($9)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (__ZNK4surf11LabelVector4readEj($11,$8)|0);
  __ZN4surf11LoudsSparse4Iter6appendEhj($0,$12,$8);
  $$pre = HEAP32[$1>>2]|0;
  $14 = $$pre;
 } else {
  $14 = $2;
 }
 $13 = (($14) + -1)|0;
 $15 = ((($0)) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($13<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$4>>2]|0;
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (__ZNK4surf11LabelVector4readEj($21,$18)|0);
 $23 = HEAP32[$4>>2]|0;
 $24 = ((($23)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (__ZNK4surf9Bitvector7readBitEj($25,$18)|0);
 if ($26) {
  $27 = (__ZNK4surf11LoudsSparse9getHeightEv($23)|0);
  $28 = ($13>>>0)<($27>>>0);
  if ($28) {
   $$02022 = $18;$$023 = $13;
  } else {
   return;
  }
  while(1) {
   $39 = HEAP32[$4>>2]|0;
   $40 = (__ZNK4surf11LoudsSparse15getChildNodeNumEj($39,$$02022)|0);
   $41 = HEAP32[$4>>2]|0;
   $42 = (__ZNK4surf11LoudsSparse16getFirstLabelPosEj($41,$40)|0);
   $43 = HEAP32[$4>>2]|0;
   $44 = ((($43)) + 16|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (__ZNK4surf11LabelVector4readEj($45,$42)|0);
   $47 = HEAP32[$4>>2]|0;
   $48 = ((($47)) + 20|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (__ZNK4surf9Bitvector7readBitEj($49,$42)|0);
   __ZN4surf11LoudsSparse4Iter6appendEhj($0,$46,$42);
   $37 = (($$023) + 1)|0;
   if (!($50)) {
    break;
   }
   $35 = HEAP32[$4>>2]|0;
   $36 = (__ZNK4surf11LoudsSparse9getHeightEv($35)|0);
   $38 = ($37>>>0)<($36>>>0);
   if ($38) {
    $$02022 = $42;$$023 = $37;
   } else {
    label = 14;
    break;
   }
  }
  if ((label|0) == 14) {
   return;
  }
  $51 = ($46<<24>>24)==(-1);
  if ($51) {
   $52 = HEAP32[$4>>2]|0;
   $53 = ((($52)) + 24|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($42) + 1)|0;
   $56 = (__ZNK4surf9Bitvector7readBitEj($54,$55)|0);
   if (!($56)) {
    $57 = ((($0)) + 44|0);
    HEAP8[$57>>0] = 1;
   }
  }
 } else {
  $29 = ($22<<24>>24)==(-1);
  if ($29) {
   $30 = ((($23)) + 24|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($18) + 1)|0;
   $33 = (__ZNK4surf9Bitvector7readBitEj($31,$32)|0);
   if (!($33)) {
    $34 = ((($0)) + 44|0);
    HEAP8[$34>>0] = 1;
   }
  }
 }
 HEAP8[$0>>0] = 1;
 return;
}
function __ZNK4surf11LoudsSparse14serializedSizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZNK4surf11LabelVector14serializedSizeEv($3)|0);
 $5 = (($4) + 16)|0;
 $6 = ((($0)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZNK4surf13BitvectorRank14serializedSizeEv($7)|0);
 $9 = (($5) + ($8))|0;
 $10 = ((($0)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__ZNK4surf15BitvectorSelect14serializedSizeEv($11)|0);
 $13 = (($9) + ($12))|0;
 $14 = ((($0)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (__ZNK4surf15BitvectorSuffix14serializedSizeEv($15)|0);
 $17 = (($13) + ($16))|0;
 $18 = $1;
 $19 = $18;
 HEAP32[$19>>2] = $17;
 $20 = (($18) + 4)|0;
 $21 = $20;
 HEAP32[$21>>2] = 0;
 __ZN4surf9sizeAlignERy($1);
 $22 = $1;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 tempRet0 = ($27);
 STACKTOP = sp;return ($24|0);
}
function __ZNK4surf11LabelVector14serializedSizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 4)|0;
 HEAP32[$1>>2] = $3;
 __ZN4surf9sizeAlignERj($1);
 $4 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZNK4surf15BitvectorSelect14serializedSizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (__ZNK4surf9Bitvector8bitsSizeEv($0)|0);
 $3 = (($2) + 12)|0;
 $4 = (__ZNK4surf15BitvectorSelect13selectLutSizeEv($0)|0);
 $5 = (($3) + ($4))|0;
 HEAP32[$1>>2] = $5;
 __ZN4surf9sizeAlignERj($1);
 $6 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNK4surf11LoudsSparse14getMemoryUsageEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZNK4surf11LabelVector4sizeEv($2)|0);
 $4 = (($3) + 4)|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZNK4surf13BitvectorRank4sizeEv($6)|0);
 $8 = (($4) + ($7))|0;
 $9 = ((($0)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (__ZNK4surf15BitvectorSelect4sizeEv($10)|0);
 $12 = (($8) + ($11))|0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (__ZNK4surf15BitvectorSuffix4sizeEv($14)|0);
 $16 = (($12) + ($15))|0;
 tempRet0 = (0);
 return ($16|0);
}
function __ZNK4surf11LabelVector4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 8)|0;
 return ($2|0);
}
function __ZNK4surf15BitvectorSelect4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNK4surf9Bitvector8bitsSizeEv($0)|0);
 $2 = (($1) + 20)|0;
 $3 = (__ZNK4surf15BitvectorSelect13selectLutSizeEv($0)|0);
 $4 = (($2) + ($3))|0;
 return ($4|0);
}
function __ZNK4surf15BitvectorSelect6selectEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$027 = 0, $$028 = 0, $$1$lcssa = 0, $$130$lcssa = 0, $$13032 = 0, $$133 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1>>>0) / ($3>>>0))&-1;
 $5 = (($1>>>0) % ($3>>>0))&-1;
 $6 = ($3>>>0)>($1>>>0);
 $7 = $6 << 31 >> 31;
 $$ = (($5) + ($7))|0;
 $8 = ((($0)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($4<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($$|0)==(0);
 if ($12) {
  $$028 = $11;
  return ($$028|0);
 }
 $13 = $11 >>> 6;
 $14 = $11 & 63;
 $15 = ($14|0)==(63);
 $16 = (($14) + 1)|0;
 $17 = $15&1;
 $$027 = (($13) + ($17))|0;
 $18 = $15 ? 0 : $16;
 $19 = $15 ? 0 : 0;
 $20 = ((($0)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($$027<<3)|0);
 $23 = $22;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (_bitshift64Shl(($25|0),($28|0),($18|0))|0);
 $30 = tempRet0;
 $31 = (_bitshift64Lshr(($29|0),($30|0),($18|0))|0);
 $32 = tempRet0;
 $33 = (_llvm_ctpop_i64(($31|0),($32|0))|0);
 $34 = tempRet0;
 $35 = ($$>>>0)>($33>>>0);
 if ($35) {
  $$13032 = $$;$$133 = $$027;$45 = $33;
  while(1) {
   $36 = (($$133) + 1)|0;
   $37 = (($21) + ($36<<3)|0);
   $38 = $37;
   $39 = $38;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($38) + 4)|0;
   $42 = $41;
   $43 = HEAP32[$42>>2]|0;
   $44 = (($$13032) - ($45))|0;
   $46 = (_llvm_ctpop_i64(($40|0),($43|0))|0);
   $47 = tempRet0;
   $48 = ($44>>>0)>($46>>>0);
   if ($48) {
    $$13032 = $44;$$133 = $36;$45 = $46;
   } else {
    $$1$lcssa = $36;$$130$lcssa = $44;$50 = $40;$51 = $43;
    break;
   }
  }
 } else {
  $$1$lcssa = $$027;$$130$lcssa = $$;$50 = $31;$51 = $32;
 }
 $49 = $$1$lcssa << 6;
 $52 = (__ZN4surf24select64_popcount_searchEyi($50,$51,$$130$lcssa)|0);
 $53 = (($52) + ($49))|0;
 $$028 = $53;
 return ($$028|0);
}
function __ZNK4surf11LoudsSparse15getLastLabelPosEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + 2)|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 $6 = ((($0)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZNK4surf15BitvectorSelect7numOnesEv($7)|0);
 $9 = ($5>>>0)>($8>>>0);
 $10 = HEAP32[$6>>2]|0;
 if ($9) {
  $11 = (__ZNK4surf9Bitvector7numBitsEv($10)|0);
  $$0$in = $11;
  $$0 = (($$0$in) + -1)|0;
  return ($$0|0);
 } else {
  $12 = (__ZNK4surf15BitvectorSelect6selectEj($10,$5)|0);
  $$0$in = $12;
  $$0 = (($$0$in) + -1)|0;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZNK4surf15BitvectorSelect7numOnesEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNK4surf9Bitvector7numBitsEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN4surf11LoudsSparse4Iter6appendEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZNK4surf11LabelVector4readEj($5,$1)|0);
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($8)|0);
 HEAP8[$11>>0] = $6;
 $12 = HEAP32[$7>>2]|0;
 $13 = ((($0)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($12<<2)|0);
 HEAP32[$15>>2] = $1;
 $16 = HEAP32[$7>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$7>>2] = $17;
 return;
}
function __ZN4surf11LoudsSparse4Iter5clearEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0] = 0;
 $1 = ((($0)) + 16|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 44|0);
 HEAP8[$2>>0] = 0;
 return;
}
function __ZNK4surf11LoudsSparse4Iter7compareERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$0113 = 0, $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 24|0;
 $3 = sp + 12|0;
 $4 = sp;
 $5 = ((($0)) + 44|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $$pre = ((($0)) + 8|0);
  $$pre$phiZ2D = $$pre;
 } else {
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + -1)|0;
  $12 = ((($1)) + 11|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $14 & 128;
  $16 = ($15|0)==(0);
  $17 = ((($1)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $16 ? $14 : $18;
  $20 = ((($0)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($19) - ($21))|0;
  $23 = ($11>>>0)<($22>>>0);
  if ($23) {
   $$1 = -1;
   STACKTOP = sp;return ($$1|0);
  } else {
   $$pre$phiZ2D = $20;
  }
 }
 __ZNK4surf11LoudsSparse4Iter6getKeyEv($2,$0);
 $24 = HEAP32[$$pre$phiZ2D>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($3,$1,$24,-1,$1);
 $25 = ((($2)) + 11|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $27 & 128;
 $29 = ($28|0)==(0);
 $30 = ((($2)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $29 ? $27 : $31;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($4,$3,0,$32,$3);
 $33 = ((($4)) + 11|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = ($34<<24>>24)<(0);
 $36 = HEAP32[$4>>2]|0;
 $37 = $35 ? $36 : $4;
 $38 = $34&255;
 $39 = $38 & 128;
 $40 = ($39|0)==(0);
 $41 = ((($4)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $40 ? $38 : $42;
 $44 = HEAP8[$25>>0]|0;
 $45 = $44&255;
 $46 = $45 & 128;
 $47 = ($46|0)==(0);
 $48 = HEAP32[$30>>2]|0;
 $49 = $47 ? $45 : $48;
 $50 = ($44<<24>>24)<(0);
 $51 = HEAP32[$2>>2]|0;
 $52 = $50 ? $51 : $2;
 $53 = ($43>>>0)<($49>>>0);
 $$sroa$speculated = $53 ? $43 : $49;
 $54 = (__ZNSt3__211char_traitsIcE7compareEPKcS3_j($52,$37,$$sroa$speculated)|0);
 $55 = ($54|0)==(0);
 $56 = ($49>>>0)<($43>>>0);
 $$ = $53&1;
 $$$ = $56 ? -1 : $$;
 if ($55) {
  $57 = ($$$|0)==(0);
  if ($57) {
   $58 = ((($0)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ((($0)) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + -1)|0;
   $63 = ((($0)) + 32|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + ($62<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (__ZNK4surf11LoudsSparse12getSuffixPosEj($59,$66)|0);
   $68 = HEAP32[$58>>2]|0;
   $69 = ((($68)) + 28|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = HEAP32[$60>>2]|0;
   $72 = (__ZNK4surf15BitvectorSuffix7compareEjRKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($70,$67,$3,$71)|0);
   $$0113 = $72;
  } else {
   $$0113 = $$$;
  }
 } else {
  $$0113 = $54;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 $$1 = $$0113;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK4surf11LoudsSparse4Iter6getKeyEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$078 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
  STACKTOP = sp;return;
 }
 $6 = ((($1)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($1)) + 44|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9 << 7)&255;
 $sext = ($10<<24>>24) >> 7;
 $11 = $sext << 24 >> 24;
 $$ = (($7) + ($11))|0;
 $12 = ((($1)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $14 = ($$>>>0)>(4294967279);
 if ($14) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $15 = ($$>>>0)<(11);
 if ($15) {
  $16 = $$&255;
  $17 = ((($0)) + 11|0);
  HEAP8[$17>>0] = $16;
  $$078 = $0;
 } else {
  $18 = (($$) + 16)|0;
  $19 = $18 & -16;
  $20 = (__Znwj($19)|0);
  HEAP32[$0>>2] = $20;
  $21 = $19 | -2147483648;
  $22 = ((($0)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($0)) + 4|0);
  HEAP32[$23>>2] = $$;
  $$078 = $20;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$078,$13,$$)|0);
 $24 = (($$078) + ($$)|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($24,$2);
 STACKTOP = sp;return;
}
function __ZN4surf11LoudsSparse4Iter3setEjj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZNK4surf11LabelVector4readEj($6,$2)|0);
 $8 = ((($0)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($1)|0);
 HEAP8[$10>>0] = $7;
 $11 = ((($0)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($1<<2)|0);
 HEAP32[$13>>2] = $2;
 return;
}
function __ZN4surf11LoudsSparse4Iter21setToFirstLabelInRootEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZNK4surf11LabelVector4readEj($6,0)|0);
 $8 = ((($0)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP8[$9>>0] = $7;
 return;
}
function __ZN4surf11LoudsSparse4Iter20setToLastLabelInRootEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZNK4surf11LoudsSparse15getLastLabelPosEj($2,0)|0);
 $4 = ((($0)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$5>>2] = $3;
 $6 = HEAP32[$1>>2]|0;
 $7 = ((($6)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$4>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = (__ZNK4surf11LabelVector4readEj($8,$10)|0);
 $12 = ((($0)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 HEAP8[$13>>0] = $11;
 return;
}
function __ZNK4surf11LoudsSparse9getHeightEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN4surf11LoudsSparse4Iter18moveToRightMostKeyEv($0) {
 $0 = $0|0;
 var $$02022 = 0, $$023 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 $4 = ((($0)) + 4|0);
 if ($3) {
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  (__ZNK4surf11LoudsSparse16getFirstLabelPosEj($5,$7)|0);
  $8 = HEAP32[$4>>2]|0;
  $9 = HEAP32[$6>>2]|0;
  $10 = (__ZNK4surf11LoudsSparse15getLastLabelPosEj($8,$9)|0);
  $11 = HEAP32[$4>>2]|0;
  $12 = ((($11)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (__ZNK4surf11LabelVector4readEj($13,$10)|0);
  __ZN4surf11LoudsSparse4Iter6appendEhj($0,$14,$10);
  $$pre = HEAP32[$1>>2]|0;
  $16 = $$pre;
 } else {
  $16 = $2;
 }
 $15 = (($16) + -1)|0;
 $17 = ((($0)) + 32|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + ($15<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$4>>2]|0;
 $22 = ((($21)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (__ZNK4surf11LabelVector4readEj($23,$20)|0);
 $25 = HEAP32[$4>>2]|0;
 $26 = ((($25)) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (__ZNK4surf9Bitvector7readBitEj($27,$20)|0);
 if ($28) {
  $29 = (__ZNK4surf11LoudsSparse9getHeightEv($25)|0);
  $30 = ($15>>>0)<($29>>>0);
  if ($30) {
   $$02022 = $20;$$023 = $15;
  } else {
   return;
  }
  while(1) {
   $41 = HEAP32[$4>>2]|0;
   $42 = (__ZNK4surf11LoudsSparse15getChildNodeNumEj($41,$$02022)|0);
   $43 = HEAP32[$4>>2]|0;
   $44 = (__ZNK4surf11LoudsSparse15getLastLabelPosEj($43,$42)|0);
   $45 = HEAP32[$4>>2]|0;
   $46 = ((($45)) + 16|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (__ZNK4surf11LabelVector4readEj($47,$44)|0);
   $49 = HEAP32[$4>>2]|0;
   $50 = ((($49)) + 20|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (__ZNK4surf9Bitvector7readBitEj($51,$44)|0);
   __ZN4surf11LoudsSparse4Iter6appendEhj($0,$48,$44);
   $39 = (($$023) + 1)|0;
   if (!($52)) {
    break;
   }
   $37 = HEAP32[$4>>2]|0;
   $38 = (__ZNK4surf11LoudsSparse9getHeightEv($37)|0);
   $40 = ($39>>>0)<($38>>>0);
   if ($40) {
    $$02022 = $44;$$023 = $39;
   } else {
    label = 14;
    break;
   }
  }
  if ((label|0) == 14) {
   return;
  }
  $53 = ($48<<24>>24)==(-1);
  if ($53) {
   $54 = HEAP32[$4>>2]|0;
   $55 = ((($54)) + 24|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($44) + 1)|0;
   $58 = (__ZNK4surf9Bitvector7readBitEj($56,$57)|0);
   if (!($58)) {
    $59 = ((($0)) + 44|0);
    HEAP8[$59>>0] = 1;
   }
  }
 } else {
  $31 = ($24<<24>>24)==(-1);
  if ($31) {
   $32 = ((($25)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($20) + 1)|0;
   $35 = (__ZNK4surf9Bitvector7readBitEj($33,$34)|0);
   if (!($35)) {
    $36 = ((($0)) + 44|0);
    HEAP8[$36>>0] = 1;
   }
  }
 }
 HEAP8[$0>>0] = 1;
 return;
}
function __ZN4surf11LoudsSparse4ItermmEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 44|0);
 HEAP8[$2>>0] = 0;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -1)|0;
 $6 = ((($0)) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  HEAP8[$0>>0] = 0;
  return;
 }
 $11 = ((($0)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($12)) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (__ZNK4surf9Bitvector7readBitEj($14,$9)|0);
 L5: do {
  if ($15) {
   $17 = $4;
   while(1) {
    $16 = (($17) + -1)|0;
    HEAP32[$3>>2] = $16;
    $18 = ($16|0)==(0);
    if ($18) {
     break;
    }
    $19 = (($17) + -2)|0;
    $20 = (($7) + ($19<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = HEAP32[$13>>2]|0;
    $23 = (__ZNK4surf9Bitvector7readBitEj($22,$21)|0);
    if ($23) {
     $17 = $16;
    } else {
     $$0$lcssa = $21;$26 = $16;
     break L5;
    }
   }
   HEAP8[$0>>0] = 0;
   return;
  } else {
   $$0$lcssa = $9;$26 = $4;
  }
 } while(0);
 $24 = (($$0$lcssa) + -1)|0;
 $25 = (($26) + -1)|0;
 __ZN4surf11LoudsSparse4Iter3setEjj($0,$25,$24);
 __ZN4surf11LoudsSparse4Iter18moveToRightMostKeyEv($0);
 return;
}
function __ZN4surf4SuRF6createERKNSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEbjNS_10SuffixTypeEjj($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $7 = sp;
 $8 = (__Znwj(144)|0);
 __ZN4surf11SuRFBuilderC2EbjNS_10SuffixTypeEjj($8,$2,$3,$4,$5,$6);
 $9 = ((($0)) + 8|0);
 HEAP32[$9>>2] = $8;
 __ZN4surf11SuRFBuilder5buildERKNSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE($8,$1);
 $10 = (__Znwj(20)|0);
 $11 = HEAP32[$9>>2]|0;
 __ZN4surf10LoudsDenseC2EPKNS_11SuRFBuilderE($10,$11);
 HEAP32[$0>>2] = $10;
 $12 = (__Znwj(32)|0);
 $13 = HEAP32[$9>>2]|0;
 __ZN4surf11LoudsSparseC2EPKNS_11SuRFBuilderE($12,$13);
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 __ZN4surf4SuRF4IterC2EPKS0_($7,$0);
 $15 = ((($0)) + 12|0);
 (__ZN4surf4SuRF4IteraSEOS1_($15,$7)|0);
 __ZN4surf4SuRF4IterD2Ev($7);
 $16 = HEAP32[$9>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  STACKTOP = sp;return;
 }
 __ZN4surf11SuRFBuilderD2Ev($16);
 __ZdlPv($16);
 STACKTOP = sp;return;
}
function __ZN4surf11SuRFBuilderC2EbjNS_10SuffixTypeEjj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $6 = $1&1;
 HEAP8[$0>>0] = $6;
 $7 = ((($0)) + 4|0);
 HEAP32[$7>>2] = $2;
 $8 = ((($0)) + 8|0);
 $9 = ((($0)) + 84|0);
 dest=$8; stop=dest+76|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$9>>2] = $3;
 $10 = ((($0)) + 88|0);
 HEAP32[$10>>2] = $4;
 $11 = ((($0)) + 92|0);
 HEAP32[$11>>2] = $5;
 $12 = ((($0)) + 96|0);
 dest=$12; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 return;
}
function __ZN4surf4SuRF4IterC2EPKS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $2 = sp + 48|0;
 $3 = sp;
 __ZN4surf10LoudsDense4IterC2Ev($0);
 $4 = ((($0)) + 44|0);
 __ZN4surf11LoudsSparse4IterC2Ev($4);
 $5 = HEAP32[$1>>2]|0;
 __ZN4surf10LoudsDense4IterC2EPS0_($2,$5);
 (__ZN4surf10LoudsDense4IteraSEOS1_($0,$2)|0);
 __ZN4surf10LoudsDense4IterD2Ev($2);
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 __ZN4surf11LoudsSparse4IterC2EPS0_($3,$7);
 (__ZN4surf11LoudsSparse4IteraSEOS1_($4,$3)|0);
 __ZN4surf11LoudsSparse4IterD2Ev($3);
 $8 = ((($0)) + 92|0);
 HEAP8[$8>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN4surf4SuRF4IteraSEOS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (__ZN4surf10LoudsDense4IteraSEOS1_($0,$1)|0);
 $2 = ((($0)) + 44|0);
 $3 = ((($1)) + 44|0);
 (__ZN4surf11LoudsSparse4IteraSEOS1_($2,$3)|0);
 $4 = ((($1)) + 92|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 & 1;
 $7 = ((($0)) + 92|0);
 HEAP8[$7>>0] = $6;
 return ($0|0);
}
function __ZN4surf4SuRF4IterD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 __ZN4surf11LoudsSparse4IterD2Ev($1);
 __ZN4surf10LoudsDense4IterD2Ev($0);
 return;
}
function __ZN4surf11SuRFBuilderD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 132|0);
 __ZNSt3__26vectorIbNS_9allocatorIbEEED2Ev($1);
 $2 = ((($0)) + 120|0);
 __ZNSt3__26vectorIjNS_9allocatorIjEEED2Ev($2);
 $3 = ((($0)) + 108|0);
 __ZNSt3__26vectorIjNS_9allocatorIjEEED2Ev($3);
 $4 = ((($0)) + 96|0);
 __ZNSt3__26vectorINS0_IyNS_9allocatorIyEEEENS1_IS3_EEED2Ev($4);
 $5 = ((($0)) + 72|0);
 __ZNSt3__26vectorINS0_IyNS_9allocatorIyEEEENS1_IS3_EEED2Ev($5);
 $6 = ((($0)) + 60|0);
 __ZNSt3__26vectorINS0_IyNS_9allocatorIyEEEENS1_IS3_EEED2Ev($6);
 $7 = ((($0)) + 48|0);
 __ZNSt3__26vectorINS0_IyNS_9allocatorIyEEEENS1_IS3_EEED2Ev($7);
 $8 = ((($0)) + 36|0);
 __ZNSt3__26vectorINS0_IyNS_9allocatorIyEEEENS1_IS3_EEED2Ev($8);
 $9 = ((($0)) + 24|0);
 __ZNSt3__26vectorINS0_IyNS_9allocatorIyEEEENS1_IS3_EEED2Ev($9);
 $10 = ((($0)) + 12|0);
 __ZNSt3__26vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEED2Ev($10);
 return;
}
function __ZNK4surf4SuRF9lookupKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__ZNK4surf10LoudsDense9lookupKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERj($3,$1,$2)|0);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZNK4surf11LoudsSparse9lookupKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($8,$1,$5)|0);
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function __ZNK4surf4SuRF20moveToKeyGreaterThanERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEb($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4surf4SuRF4IterC2EPKS0_($0,$1);
 $4 = HEAP32[$1>>2]|0;
 $5 = (__ZNK4surf10LoudsDense20moveToKeyGreaterThanERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbRNS0_4IterE($4,$2,$3,$0)|0);
 $6 = ((($0)) + 92|0);
 $7 = $5&1;
 HEAP8[$6>>0] = $7;
 $8 = (__ZNK4surf10LoudsDense4Iter7isValidEv($0)|0);
 if (!($8)) {
  return;
 }
 $9 = (__ZNK4surf10LoudsDense4Iter10isCompleteEv($0)|0);
 if ($9) {
  return;
 }
 $10 = (__ZNK4surf10LoudsDense4Iter16isSearchCompleteEv($0)|0);
 if ($10) {
  $17 = (__ZNK4surf10LoudsDense4Iter18isMoveLeftCompleteEv($0)|0);
  if ($17) {
   return;
  }
  __ZN4surf4SuRF4Iter12passToSparseEv($0);
  $18 = ((($0)) + 44|0);
  __ZN4surf11LoudsSparse4Iter17moveToLeftMostKeyEv($18);
  return;
 } else {
  __ZN4surf4SuRF4Iter12passToSparseEv($0);
  $11 = ((($1)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($0)) + 44|0);
  $14 = (__ZNK4surf11LoudsSparse20moveToKeyGreaterThanERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbRNS0_4IterE($12,$2,$3,$13)|0);
  $15 = $14&1;
  HEAP8[$6>>0] = $15;
  $16 = (__ZNK4surf11LoudsSparse4Iter7isValidEv($13)|0);
  if ($16) {
   return;
  }
  (__ZN4surf4SuRF4Iter18incrementDenseIterEv($0)|0);
  return;
 }
}
function __ZNK4surf10LoudsDense4Iter7isValidEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)!=(0);
 return ($3|0);
}
function __ZNK4surf10LoudsDense4Iter16isSearchCompleteEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)!=(0);
 return ($4|0);
}
function __ZN4surf4SuRF4Iter12passToSparseEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 $2 = (__ZNK4surf10LoudsDense4Iter17getSendOutNodeNumEv($0)|0);
 __ZN4surf11LoudsSparse4Iter15setStartNodeNumEj($1,$2);
 return;
}
function __ZNK4surf11LoudsSparse4Iter7isValidEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)!=(0);
 return ($3|0);
}
function __ZN4surf4SuRF4Iter18incrementDenseIterEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNK4surf10LoudsDense4Iter7isValidEv($0)|0);
 if (!($1)) {
  $$0 = 0;
  return ($$0|0);
 }
 __ZN4surf10LoudsDense4IterppEi($0,0);
 $2 = (__ZNK4surf10LoudsDense4Iter7isValidEv($0)|0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (__ZNK4surf10LoudsDense4Iter18isMoveLeftCompleteEv($0)|0);
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 __ZN4surf4SuRF4Iter12passToSparseEv($0);
 $4 = ((($0)) + 44|0);
 __ZN4surf11LoudsSparse4Iter17moveToLeftMostKeyEv($4);
 $$0 = 1;
 return ($$0|0);
}
function __ZNK4surf10LoudsDense4Iter18isMoveLeftCompleteEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 2|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)!=(0);
 return ($4|0);
}
function __ZNK4surf4SuRF17moveToKeyLessThanERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEb($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp;
 __ZNK4surf4SuRF20moveToKeyGreaterThanERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEb($0,$1,$2,0);
 $5 = (__ZNK4surf4SuRF4Iter7isValidEv($0)|0);
 if (!($5)) {
  __ZNK4surf4SuRF10moveToLastEv($4,$1);
  (__ZN4surf4SuRF4IteraSEOS1_($0,$4)|0);
  __ZN4surf4SuRF4IterD2Ev($4);
  STACKTOP = sp;return;
 }
 $6 = (__ZNK4surf4SuRF4Iter9getFpFlagEv($0)|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 (__ZN4surf4SuRF4ItermmEi($0,0)|0);
 $7 = (__ZNK4surf4SuRF9lookupKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($1,$2)|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 (__ZN4surf4SuRF4ItermmEi($0,0)|0);
 STACKTOP = sp;return;
}
function __ZNK4surf4SuRF4Iter7isValidEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNK4surf10LoudsDense4Iter7isValidEv($0)|0);
 if (!($1)) {
  $5 = 0;
  return ($5|0);
 }
 $2 = (__ZNK4surf10LoudsDense4Iter10isCompleteEv($0)|0);
 if ($2) {
  $5 = 1;
  return ($5|0);
 }
 $3 = ((($0)) + 44|0);
 $4 = (__ZNK4surf11LoudsSparse4Iter7isValidEv($3)|0);
 $5 = $4;
 return ($5|0);
}
function __ZNK4surf4SuRF10moveToLastEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4surf4SuRF4IterC2EPKS0_($0,$1);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZNK4surf10LoudsDense9getHeightEv($2)|0);
 $4 = tempRet0;
 $5 = ($3|0)==(0);
 $6 = ($4|0)==(0);
 $7 = $5 & $6;
 if ($7) {
  $10 = ((($0)) + 44|0);
  __ZN4surf11LoudsSparse4Iter20setToLastLabelInRootEv($10);
  __ZN4surf11LoudsSparse4Iter18moveToRightMostKeyEv($10);
  return;
 }
 __ZN4surf10LoudsDense4Iter20setToLastLabelInRootEv($0);
 __ZN4surf10LoudsDense4Iter18moveToRightMostKeyEv($0);
 $8 = (__ZNK4surf10LoudsDense4Iter19isMoveRightCompleteEv($0)|0);
 if ($8) {
  return;
 }
 __ZN4surf4SuRF4Iter12passToSparseEv($0);
 $9 = ((($0)) + 44|0);
 __ZN4surf11LoudsSparse4Iter18moveToRightMostKeyEv($9);
 return;
}
function __ZNK4surf4SuRF4Iter9getFpFlagEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 92|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)!=(0);
 return ($4|0);
}
function __ZN4surf4SuRF4ItermmEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNK4surf4SuRF4Iter7isValidEv($0)|0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (__ZN4surf4SuRF4Iter19decrementSparseIterEv($0)|0);
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 $4 = (__ZN4surf4SuRF4Iter18decrementDenseIterEv($0)|0);
 $$0 = $4;
 return ($$0|0);
}
function __ZNK4surf4SuRF11moveToFirstEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4surf4SuRF4IterC2EPKS0_($0,$1);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZNK4surf10LoudsDense9getHeightEv($2)|0);
 $4 = tempRet0;
 $5 = ($3|0)==(0);
 $6 = ($4|0)==(0);
 $7 = $5 & $6;
 if ($7) {
  $10 = ((($0)) + 44|0);
  __ZN4surf11LoudsSparse4Iter21setToFirstLabelInRootEv($10);
  __ZN4surf11LoudsSparse4Iter17moveToLeftMostKeyEv($10);
  return;
 }
 __ZN4surf10LoudsDense4Iter21setToFirstLabelInRootEv($0);
 __ZN4surf10LoudsDense4Iter17moveToLeftMostKeyEv($0);
 $8 = (__ZNK4surf10LoudsDense4Iter18isMoveLeftCompleteEv($0)|0);
 if ($8) {
  return;
 }
 __ZN4surf4SuRF4Iter12passToSparseEv($0);
 $9 = ((($0)) + 44|0);
 __ZN4surf11LoudsSparse4Iter17moveToLeftMostKeyEv($9);
 return;
}
function __ZNK4surf10LoudsDense4Iter19isMoveRightCompleteEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 3|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)!=(0);
 return ($4|0);
}
function __ZN4surf4SuRF11lookupRangeERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbS9_b($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 12|0);
 __ZN4surf4SuRF4Iter5clearEv($5);
 $6 = HEAP32[$0>>2]|0;
 (__ZNK4surf10LoudsDense20moveToKeyGreaterThanERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbRNS0_4IterE($6,$1,$2,$5)|0);
 $7 = (__ZNK4surf10LoudsDense4Iter7isValidEv($5)|0);
 if (!($7)) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (__ZNK4surf10LoudsDense4Iter10isCompleteEv($5)|0);
 do {
  if (!($8)) {
   $9 = (__ZNK4surf10LoudsDense4Iter16isSearchCompleteEv($5)|0);
   if ($9) {
    $14 = (__ZNK4surf10LoudsDense4Iter18isMoveLeftCompleteEv($5)|0);
    if ($14) {
     break;
    }
    __ZN4surf4SuRF4Iter12passToSparseEv($5);
    $15 = ((($0)) + 56|0);
    __ZN4surf11LoudsSparse4Iter17moveToLeftMostKeyEv($15);
    break;
   } else {
    __ZN4surf4SuRF4Iter12passToSparseEv($5);
    $10 = ((($0)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($0)) + 56|0);
    (__ZNK4surf11LoudsSparse20moveToKeyGreaterThanERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbRNS0_4IterE($11,$1,$2,$12)|0);
    $13 = (__ZNK4surf11LoudsSparse4Iter7isValidEv($12)|0);
    if ($13) {
     break;
    }
    (__ZN4surf4SuRF4Iter18incrementDenseIterEv($5)|0);
    break;
   }
  }
 } while(0);
 $16 = (__ZNK4surf4SuRF4Iter7isValidEv($5)|0);
 if (!($16)) {
  $$0 = 0;
  return ($$0|0);
 }
 $17 = (__ZNK4surf4SuRF4Iter7compareERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($5,$3)|0);
 $18 = ($17|0)==(2018);
 if ($18) {
  $$0 = 1;
  return ($$0|0);
 }
 if ($4) {
  $19 = ($17|0)<(1);
  $$0 = $19;
  return ($$0|0);
 } else {
  $20 = ($17|0)<(0);
  $$0 = $20;
  return ($$0|0);
 }
 return (0)|0;
}
function __ZN4surf4SuRF4Iter5clearEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4surf10LoudsDense4Iter5clearEv($0);
 $1 = ((($0)) + 44|0);
 __ZN4surf11LoudsSparse4Iter5clearEv($1);
 return;
}
function __ZNK4surf4SuRF4Iter7compareERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNK4surf10LoudsDense4Iter7compareERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($0,$1)|0);
 $3 = (__ZNK4surf10LoudsDense4Iter10isCompleteEv($0)|0);
 $4 = ($2|0)!=(0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  $$0 = $2;
  return ($$0|0);
 }
 $5 = ((($0)) + 44|0);
 $6 = (__ZNK4surf11LoudsSparse4Iter7compareERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($5,$1)|0);
 $$0 = $6;
 return ($$0|0);
}
function __ZNK4surf4SuRF14serializedSizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZNK4surf10LoudsDense14serializedSizeEv($1)|0);
 $3 = tempRet0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZNK4surf11LoudsSparse14serializedSizeEv($5)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),($2|0),($3|0))|0);
 $9 = tempRet0;
 tempRet0 = ($9);
 return ($8|0);
}
function __ZNK4surf4SuRF14getMemoryUsageEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZNK4surf10LoudsDense14getMemoryUsageEv($1)|0);
 $3 = tempRet0;
 $4 = (_i64Add(($2|0),($3|0),108,0)|0);
 $5 = tempRet0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZNK4surf11LoudsSparse14getMemoryUsageEv($7)|0);
 $9 = tempRet0;
 $10 = (_i64Add(($4|0),($5|0),($8|0),($9|0))|0);
 $11 = tempRet0;
 tempRet0 = ($11);
 return ($10|0);
}
function __ZNK4surf4SuRF9getHeightEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZNK4surf11LoudsSparse9getHeightEv($2)|0);
 return ($3|0);
}
function __ZNK4surf4SuRF19getSparseStartLevelEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (__ZNK4surf11LoudsSparse13getStartLevelEv($2)|0);
 return ($3|0);
}
function __ZNK4surf11LoudsSparse13getStartLevelEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZNK4surf4SuRF4Iter6getKeyEv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 12|0;
 $3 = sp;
 $4 = (__ZNK4surf4SuRF4Iter7isValidEv($1)|0);
 if (!($4)) {
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
  STACKTOP = sp;return;
 }
 $5 = (__ZNK4surf10LoudsDense4Iter10isCompleteEv($1)|0);
 if ($5) {
  __ZNK4surf10LoudsDense4Iter6getKeyEv($0,$1);
  STACKTOP = sp;return;
 } else {
  __ZNK4surf10LoudsDense4Iter6getKeyEv($2,$1);
  $6 = ((($1)) + 44|0);
  __ZNK4surf11LoudsSparse4Iter6getKeyEv($3,$6);
  $7 = ((($3)) + 11|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)<(0);
  $10 = HEAP32[$3>>2]|0;
  $11 = $9 ? $10 : $3;
  $12 = $8&255;
  $13 = $12 & 128;
  $14 = ($13|0)==(0);
  $15 = ((($3)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $14 ? $12 : $16;
  $18 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($2,$11,$17)|0);
  ;HEAP32[$0>>2]=HEAP32[$18>>2]|0;HEAP32[$0+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$18+8>>2]|0;
  ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZN4surf11LoudsSparse4Iter15setStartNodeNumEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZNK4surf10LoudsDense4Iter17getSendOutNodeNumEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function __ZN4surf4SuRF4Iter19incrementSparseIterEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 $2 = (__ZNK4surf11LoudsSparse4Iter7isValidEv($1)|0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 __ZN4surf11LoudsSparse4IterppEi($1,0);
 $3 = (__ZNK4surf11LoudsSparse4Iter7isValidEv($1)|0);
 $$0 = $3;
 return ($$0|0);
}
function __ZN4surf4SuRF4IterppEi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNK4surf4SuRF4Iter7isValidEv($0)|0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (__ZN4surf4SuRF4Iter19incrementSparseIterEv($0)|0);
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 $4 = (__ZN4surf4SuRF4Iter18incrementDenseIterEv($0)|0);
 $$0 = $4;
 return ($$0|0);
}
function __ZN4surf4SuRF4Iter18decrementDenseIterEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNK4surf10LoudsDense4Iter7isValidEv($0)|0);
 if (!($1)) {
  $$0 = 0;
  return ($$0|0);
 }
 __ZN4surf10LoudsDense4ItermmEi($0,0);
 $2 = (__ZNK4surf10LoudsDense4Iter7isValidEv($0)|0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (__ZNK4surf10LoudsDense4Iter19isMoveRightCompleteEv($0)|0);
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 __ZN4surf4SuRF4Iter12passToSparseEv($0);
 $4 = ((($0)) + 44|0);
 __ZN4surf11LoudsSparse4Iter18moveToRightMostKeyEv($4);
 $$0 = 1;
 return ($$0|0);
}
function __ZN4surf4SuRF4Iter19decrementSparseIterEv($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 $2 = (__ZNK4surf11LoudsSparse4Iter7isValidEv($1)|0);
 if (!($2)) {
  $$0 = 0;
  return ($$0|0);
 }
 __ZN4surf11LoudsSparse4ItermmEi($1,0);
 $3 = (__ZNK4surf11LoudsSparse4Iter7isValidEv($1)|0);
 $$0 = $3;
 return ($$0|0);
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN41EmscriptenBindingInitializer_stl_wrappersC2Ev(0);
 return;
}
function __ZN41EmscriptenBindingInitializer_stl_wrappersC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15register_vectorINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEENS_6class_INS1_6vectorIT_NS5_ISA_EEEENS_8internal11NoBaseClassEEEPKc(1996);
 return;
}
function __ZN10emscripten15register_vectorINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEENS_6class_INS1_6vectorIT_NS5_ISA_EEEENS_8internal11NoBaseClassEEEPKc($0) {
 $0 = $0|0;
 var $$fca$1$insert36$fca$1$gep = 0, $$fca$1$insert44$fca$1$gep = 0, $$fca$1$insert52$fca$1$gep = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp + 28|0;
 $2 = sp + 37|0;
 $3 = sp + 24|0;
 $4 = sp + 36|0;
 $5 = sp + 16|0;
 $6 = sp + 35|0;
 $7 = sp + 8|0;
 $8 = sp + 34|0;
 $9 = sp;
 $10 = sp + 33|0;
 $11 = sp + 32|0;
 __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEvv();
 $12 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEPFvvEv()|0);
 $13 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEPFvvEv()|0);
 $14 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 $15 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEE3getEv()|0);
 $16 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEE3getEv()|0);
 $17 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $18 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $19 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $20 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $21 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($14|0),($15|0),($16|0),($17|0),($18|0),(32|0),($19|0),($12|0),($20|0),($13|0),($0|0),($21|0),(33|0));
 $22 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 $23 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEE8getCountEv($11)|0);
 $24 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEE8getTypesEv($11)|0);
 $25 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($22|0),($23|0),($24|0),($25|0),(34|0),(35|0));
 HEAP32[$9>>2] = (36);
 $$fca$1$insert36$fca$1$gep = ((($9)) + 4|0);
 HEAP32[$$fca$1$insert36$fca$1$gep>>2] = 0;
 $26 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 $27 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEERKSC_EE8getCountEv($10)|0);
 $28 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEERKSC_EE8getTypesEv($10)|0);
 $29 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $30 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvRKS9_EEEPT_RKSG_($9)|0);
 __embind_register_class_function(($26|0),(2728|0),($27|0),($28|0),($29|0),(37|0),($30|0),0);
 HEAP32[$7>>2] = (38);
 $$fca$1$insert44$fca$1$gep = ((($7)) + 4|0);
 HEAP32[$$fca$1$insert44$fca$1$gep>>2] = 0;
 $31 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 $32 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEEjRKSC_EE8getCountEv($8)|0);
 $33 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEEjRKSC_EE8getTypesEv($8)|0);
 $34 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $35 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvjRKS9_EEEPT_RKSG_($7)|0);
 __embind_register_class_function(($31|0),(2738|0),($32|0),($33|0),($34|0),(39|0),($35|0),0);
 HEAP32[$5>>2] = (40);
 $$fca$1$insert52$fca$1$gep = ((($5)) + 4|0);
 HEAP32[$$fca$1$insert52$fca$1$gep>>2] = 0;
 $36 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 $37 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEEEE8getCountEv($6)|0);
 $38 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEEEE8getTypesEv($6)|0);
 $39 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $40 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEKFjvEEEPT_RKSE_($5)|0);
 __embind_register_class_function(($36|0),(2745|0),($37|0),($38|0),($39|0),(41|0),($40|0),0);
 HEAP32[$3>>2] = 42;
 $41 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 $42 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEjEE8getCountEv($4)|0);
 $43 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEjEE8getTypesEv($4)|0);
 $44 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $45 = (__ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEjEEEPT_RKSH_($3)|0);
 __embind_register_class_function(($41|0),(2750|0),($42|0),($43|0),($44|0),(43|0),($45|0),0);
 HEAP32[$1>>2] = 44;
 $46 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 $47 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEjRKSB_EE8getCountEv($2)|0);
 $48 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEjRKSB_EE8getTypesEv($2)|0);
 $49 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0);
 $50 = (__ZN10emscripten8internal10getContextIPFbRNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEjRKS9_EEEPT_RKSH_($1)|0);
 __embind_register_class_function(($46|0),(2754|0),($47|0),($48|0),($49|0),(45|0),($50|0),0);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init_1() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN56EmscriptenBindingInitializer_surf_access_helper_wrappersC2Ev(0);
 return;
}
function __ZN56EmscriptenBindingInitializer_surf_access_helper_wrappersC2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten15register_vectorIjEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc(2009);
 return;
}
function __ZN10emscripten15register_vectorIjEENS_6class_INSt3__26vectorIT_NS2_9allocatorIS4_EEEENS_8internal11NoBaseClassEEEPKc($0) {
 $0 = $0|0;
 var $$fca$1$insert36$fca$1$gep = 0, $$fca$1$insert44$fca$1$gep = 0, $$fca$1$insert52$fca$1$gep = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = sp + 28|0;
 $2 = sp + 37|0;
 $3 = sp + 24|0;
 $4 = sp + 36|0;
 $5 = sp + 16|0;
 $6 = sp + 35|0;
 $7 = sp + 8|0;
 $8 = sp + 34|0;
 $9 = sp;
 $10 = sp + 33|0;
 $11 = sp + 32|0;
 __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIjNS3_9allocatorIjEEEEEEvv();
 $12 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIjNS3_9allocatorIjEEEEEEPFvvEv()|0);
 $13 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIjNS3_9allocatorIjEEEEEEPFvvEv()|0);
 $14 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIjNS2_9allocatorIjEEEEE3getEv()|0);
 $15 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIjNS3_9allocatorIjEEEEEEE3getEv()|0);
 $16 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIjNS3_9allocatorIjEEEEEEE3getEv()|0);
 $17 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $18 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $19 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $20 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $21 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($14|0),($15|0),($16|0),($17|0),($18|0),(46|0),($19|0),($12|0),($20|0),($13|0),($0|0),($21|0),(47|0));
 $22 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIjNS2_9allocatorIjEEEEE3getEv()|0);
 $23 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIjNS5_9allocatorIjEEEEEE8getCountEv($11)|0);
 $24 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIjNS5_9allocatorIjEEEEEE8getTypesEv($11)|0);
 $25 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 __embind_register_class_constructor(($22|0),($23|0),($24|0),($25|0),(48|0),(49|0));
 HEAP32[$9>>2] = (50);
 $$fca$1$insert36$fca$1$gep = ((($9)) + 4|0);
 HEAP32[$$fca$1$insert36$fca$1$gep>>2] = 0;
 $26 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIjNS2_9allocatorIjEEEEE3getEv()|0);
 $27 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIjNS5_9allocatorIjEEEEEERKjEE8getCountEv($10)|0);
 $28 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIjNS5_9allocatorIjEEEEEERKjEE8getTypesEv($10)|0);
 $29 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $30 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIjNS2_9allocatorIjEEEEFvRKjEEEPT_RKSB_($9)|0);
 __embind_register_class_function(($26|0),(2728|0),($27|0),($28|0),($29|0),(51|0),($30|0),0);
 HEAP32[$7>>2] = (52);
 $$fca$1$insert44$fca$1$gep = ((($7)) + 4|0);
 HEAP32[$$fca$1$insert44$fca$1$gep>>2] = 0;
 $31 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIjNS2_9allocatorIjEEEEE3getEv()|0);
 $32 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIjNS5_9allocatorIjEEEEEEjRKjEE8getCountEv($8)|0);
 $33 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIjNS5_9allocatorIjEEEEEEjRKjEE8getTypesEv($8)|0);
 $34 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $35 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIjNS2_9allocatorIjEEEEFvjRKjEEEPT_RKSB_($7)|0);
 __embind_register_class_function(($31|0),(2738|0),($32|0),($33|0),($34|0),(53|0),($35|0),0);
 HEAP32[$5>>2] = (54);
 $$fca$1$insert52$fca$1$gep = ((($5)) + 4|0);
 HEAP32[$$fca$1$insert52$fca$1$gep>>2] = 0;
 $36 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIjNS2_9allocatorIjEEEEE3getEv()|0);
 $37 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIjNS5_9allocatorIjEEEEEEEE8getCountEv($6)|0);
 $38 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIjNS5_9allocatorIjEEEEEEEE8getTypesEv($6)|0);
 $39 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $40 = (__ZN10emscripten8internal10getContextIMNSt3__26vectorIjNS2_9allocatorIjEEEEKFjvEEEPT_RKS9_($5)|0);
 __embind_register_class_function(($36|0),(2745|0),($37|0),($38|0),($39|0),(55|0),($40|0),0);
 HEAP32[$3>>2] = 56;
 $41 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIjNS2_9allocatorIjEEEEE3getEv()|0);
 $42 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIjNS5_9allocatorIjEEEEjEE8getCountEv($4)|0);
 $43 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIjNS5_9allocatorIjEEEEjEE8getTypesEv($4)|0);
 $44 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $45 = (__ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIjNS3_9allocatorIjEEEEjEEEPT_RKSC_($3)|0);
 __embind_register_class_function(($41|0),(2750|0),($42|0),($43|0),($44|0),(57|0),($45|0),0);
 HEAP32[$1>>2] = 58;
 $46 = (__ZN10emscripten8internal6TypeIDINSt3__26vectorIjNS2_9allocatorIjEEEEE3getEv()|0);
 $47 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIjNS4_9allocatorIjEEEEjRKjEE8getCountEv($2)|0);
 $48 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIjNS4_9allocatorIjEEEEjRKjEE8getTypesEv($2)|0);
 $49 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0);
 $50 = (__ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIjNS2_9allocatorIjEEEEjRKjEEEPT_RKSC_($1)|0);
 __embind_register_class_function(($46|0),(2754|0),($47|0),($48|0),($49|0),(59|0),($50|0),0);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init_3() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN33EmscriptenBindingInitializer_surfC2Ev(0);
 return;
}
function __ZN33EmscriptenBindingInitializer_surfC2Ev($0) {
 $0 = $0|0;
 var $$fca$1$insert$fca$1$gep = 0, $$fca$1$insert117$fca$1$gep = 0, $$fca$1$insert125$fca$1$gep = 0, $$fca$1$insert133$fca$1$gep = 0, $$fca$1$insert141$fca$1$gep = 0, $$fca$1$insert149$fca$1$gep = 0, $$fca$1$insert157$fca$1$gep = 0, $$fca$1$insert165$fca$1$gep = 0, $$fca$1$insert173$fca$1$gep = 0, $$fca$1$insert191$fca$1$gep = 0, $$fca$1$insert199$fca$1$gep = 0, $$fca$1$insert207$fca$1$gep = 0, $$fca$1$insert215$fca$1$gep = 0, $$fca$1$insert223$fca$1$gep = 0, $$fca$1$insert246$fca$1$gep = 0, $$fca$1$insert254$fca$1$gep = 0, $$fca$1$insert277$fca$1$gep = 0, $$fca$1$insert285$fca$1$gep = 0, $$fca$1$insert293$fca$1$gep = 0, $$fca$1$insert301$fca$1$gep = 0;
 var $$fca$1$insert309$fca$1$gep = 0, $$fca$1$insert317$fca$1$gep = 0, $$fca$1$insert325$fca$1$gep = 0, $$fca$1$insert348$fca$1$gep = 0, $$fca$1$insert356$fca$1$gep = 0, $$fca$1$insert364$fca$1$gep = 0, $$fca$1$insert372$fca$1$gep = 0, $$fca$1$insert380$fca$1$gep = 0, $$fca$1$insert388$fca$1$gep = 0, $$fca$1$insert396$fca$1$gep = 0, $$fca$1$insert404$fca$1$gep = 0, $$fca$1$insert412$fca$1$gep = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $1 = sp + 248|0;
 $2 = sp + 292|0;
 $3 = sp + 240|0;
 $4 = sp + 291|0;
 $5 = sp + 232|0;
 $6 = sp + 290|0;
 $7 = sp + 224|0;
 $8 = sp + 289|0;
 $9 = sp + 216|0;
 $10 = sp + 288|0;
 $11 = sp + 208|0;
 $12 = sp + 287|0;
 $13 = sp + 200|0;
 $14 = sp + 286|0;
 $15 = sp + 192|0;
 $16 = sp + 285|0;
 $17 = sp + 184|0;
 $18 = sp + 284|0;
 $19 = sp + 283|0;
 $20 = sp + 176|0;
 $21 = sp + 282|0;
 $22 = sp + 168|0;
 $23 = sp + 281|0;
 $24 = sp + 160|0;
 $25 = sp + 280|0;
 $26 = sp + 152|0;
 $27 = sp + 279|0;
 $28 = sp + 144|0;
 $29 = sp + 278|0;
 $30 = sp + 136|0;
 $31 = sp + 277|0;
 $32 = sp + 128|0;
 $33 = sp + 276|0;
 $34 = sp + 275|0;
 $35 = sp + 120|0;
 $36 = sp + 274|0;
 $37 = sp + 112|0;
 $38 = sp + 273|0;
 $39 = sp + 272|0;
 $40 = sp + 104|0;
 $41 = sp + 271|0;
 $42 = sp + 96|0;
 $43 = sp + 270|0;
 $44 = sp + 88|0;
 $45 = sp + 269|0;
 $46 = sp + 80|0;
 $47 = sp + 268|0;
 $48 = sp + 72|0;
 $49 = sp + 267|0;
 $50 = sp + 64|0;
 $51 = sp + 266|0;
 $52 = sp + 56|0;
 $53 = sp + 265|0;
 $54 = sp + 48|0;
 $55 = sp + 264|0;
 $56 = sp + 40|0;
 $57 = sp + 263|0;
 $58 = sp + 32|0;
 $59 = sp + 262|0;
 $60 = sp + 24|0;
 $61 = sp + 261|0;
 $62 = sp + 16|0;
 $63 = sp + 260|0;
 $64 = sp + 8|0;
 $65 = sp + 259|0;
 $66 = sp;
 $67 = sp + 258|0;
 $68 = sp + 257|0;
 $69 = sp + 256|0;
 __ZN10emscripten8constantIhEEvPKcRKT_(2021,2038);
 __ZN10emscripten8constantIiEEvPKcRKT_(2039,856);
 __ZN10emscripten8constantIbEEvPKcRKT_(2061,2080);
 __ZN10emscripten8constantIjEEvPKcRKT_(2081,860);
 __ZN10emscripten5enum_IN4surf10SuffixTypeEEC2EPKc($69,2104);
 $70 = (__ZN10emscripten5enum_IN4surf10SuffixTypeEE5valueEPKcS2_($69,2120,0)|0);
 $71 = (__ZN10emscripten5enum_IN4surf10SuffixTypeEE5valueEPKcS2_($70,2126,1)|0);
 $72 = (__ZN10emscripten5enum_IN4surf10SuffixTypeEE5valueEPKcS2_($71,2132,2)|0);
 (__ZN10emscripten5enum_IN4surf10SuffixTypeEE5valueEPKcS2_($72,2138,3)|0);
 __ZN10emscripten8internal11NoBaseClass6verifyIN4surf4SuRFEEEvv();
 $73 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterIN4surf4SuRFEEEPFvvEv()|0);
 $74 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterIN4surf4SuRFEEEPFvvEv()|0);
 $75 = (__ZN10emscripten8internal6TypeIDIN4surf4SuRFEE3getEv()|0);
 $76 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4surf4SuRFEEEE3getEv()|0);
 $77 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4surf4SuRFEEEE3getEv()|0);
 $78 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $79 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $80 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $81 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $82 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($75|0),($76|0),($77|0),($78|0),($79|0),(60|0),($80|0),($73|0),($81|0),($74|0),(2145|0),($82|0),(61|0));
 $83 = (__ZN10emscripten8internal6TypeIDIN4surf4SuRFEE3getEv()|0);
 $84 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4surf4SuRFEOKNSt3__26vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEEOKbOKjOKNS5_10SuffixTypeESN_SN_EE8getCountEv($68)|0);
 $85 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4surf4SuRFEOKNSt3__26vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEEOKbOKjOKNS5_10SuffixTypeESN_SN_EE8getTypesEv($68)|0);
 $86 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiiiiEEEPKcv()|0);
 __embind_register_class_constructor(($83|0),($84|0),($85|0),($86|0),(62|0),(63|0));
 HEAP32[$66>>2] = (64);
 $$fca$1$insert$fca$1$gep = ((($66)) + 4|0);
 HEAP32[$$fca$1$insert$fca$1$gep>>2] = 0;
 $87 = (__ZN10emscripten8internal6TypeIDIN4surf4SuRFEE3getEv()|0);
 $88 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIKN4surf4SuRFEEERKNSt3__212basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEE8getCountEv($67)|0);
 $89 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIKN4surf4SuRFEEERKNSt3__212basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEE8getTypesEv($67)|0);
 $90 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $91 = (__ZN10emscripten8internal10getContextIMN4surf4SuRFEKFbRKNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEPT_RKSF_($66)|0);
 __embind_register_class_function(($87|0),(2155|0),($88|0),($89|0),($90|0),(65|0),($91|0),0);
 HEAP32[$64>>2] = (66);
 $$fca$1$insert117$fca$1$gep = ((($64)) + 4|0);
 HEAP32[$$fca$1$insert117$fca$1$gep>>2] = 0;
 $92 = (__ZN10emscripten8internal6TypeIDIN4surf4SuRFEE3getEv()|0);
 $93 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4surf4SuRF4IterENS0_17AllowedRawPointerIKS5_EERKNSt3__212basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEbEE8getCountEv($65)|0);
 $94 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4surf4SuRF4IterENS0_17AllowedRawPointerIKS5_EERKNSt3__212basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEbEE8getTypesEv($65)|0);
 $95 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0);
 $96 = (__ZN10emscripten8internal10getContextIMN4surf4SuRFEKFNS3_4IterERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEbEEEPT_RKSG_($64)|0);
 __embind_register_class_function(($92|0),(2165|0),($93|0),($94|0),($95|0),(67|0),($96|0),0);
 HEAP32[$62>>2] = (68);
 $$fca$1$insert125$fca$1$gep = ((($62)) + 4|0);
 HEAP32[$$fca$1$insert125$fca$1$gep>>2] = 0;
 $97 = (__ZN10emscripten8internal6TypeIDIN4surf4SuRFEE3getEv()|0);
 $98 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4surf4SuRF4IterENS0_17AllowedRawPointerIKS5_EERKNSt3__212basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEbEE8getCountEv($63)|0);
 $99 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4surf4SuRF4IterENS0_17AllowedRawPointerIKS5_EERKNSt3__212basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEbEE8getTypesEv($63)|0);
 $100 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv()|0);
 $101 = (__ZN10emscripten8internal10getContextIMN4surf4SuRFEKFNS3_4IterERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEbEEEPT_RKSG_($62)|0);
 __embind_register_class_function(($97|0),(2186|0),($98|0),($99|0),($100|0),(67|0),($101|0),0);
 HEAP32[$60>>2] = (69);
 $$fca$1$insert133$fca$1$gep = ((($60)) + 4|0);
 HEAP32[$$fca$1$insert133$fca$1$gep>>2] = 0;
 $102 = (__ZN10emscripten8internal6TypeIDIN4surf4SuRFEE3getEv()|0);
 $103 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4surf4SuRF4IterENS0_17AllowedRawPointerIKS5_EEEE8getCountEv($61)|0);
 $104 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4surf4SuRF4IterENS0_17AllowedRawPointerIKS5_EEEE8getTypesEv($61)|0);
 $105 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $106 = (__ZN10emscripten8internal10getContextIMN4surf4SuRFEKFNS3_4IterEvEEEPT_RKS7_($60)|0);
 __embind_register_class_function(($102|0),(2204|0),($103|0),($104|0),($105|0),(70|0),($106|0),0);
 HEAP32[$58>>2] = (71);
 $$fca$1$insert141$fca$1$gep = ((($58)) + 4|0);
 HEAP32[$$fca$1$insert141$fca$1$gep>>2] = 0;
 $107 = (__ZN10emscripten8internal6TypeIDIN4surf4SuRFEE3getEv()|0);
 $108 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4surf4SuRF4IterENS0_17AllowedRawPointerIKS5_EEEE8getCountEv($59)|0);
 $109 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4surf4SuRF4IterENS0_17AllowedRawPointerIKS5_EEEE8getTypesEv($59)|0);
 $110 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $111 = (__ZN10emscripten8internal10getContextIMN4surf4SuRFEKFNS3_4IterEvEEEPT_RKS7_($58)|0);
 __embind_register_class_function(($107|0),(2216|0),($108|0),($109|0),($110|0),(70|0),($111|0),0);
 HEAP32[$56>>2] = (72);
 $$fca$1$insert149$fca$1$gep = ((($56)) + 4|0);
 HEAP32[$$fca$1$insert149$fca$1$gep>>2] = 0;
 $112 = (__ZN10emscripten8internal6TypeIDIN4surf4SuRFEE3getEv()|0);
 $113 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIN4surf4SuRFEEERKNSt3__212basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEbSG_bEE8getCountEv($57)|0);
 $114 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIN4surf4SuRFEEERKNSt3__212basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEbSG_bEE8getTypesEv($57)|0);
 $115 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiiiEEEPKcv()|0);
 $116 = (__ZN10emscripten8internal10getContextIMN4surf4SuRFEFbRKNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbSC_bEEEPT_RKSF_($56)|0);
 __embind_register_class_function(($112|0),(2227|0),($113|0),($114|0),($115|0),(73|0),($116|0),0);
 HEAP32[$54>>2] = (74);
 $$fca$1$insert157$fca$1$gep = ((($54)) + 4|0);
 HEAP32[$$fca$1$insert157$fca$1$gep>>2] = 0;
 $117 = (__ZN10emscripten8internal6TypeIDIN4surf4SuRFEE3getEv()|0);
 $118 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf4SuRFEEEEE8getCountEv($55)|0);
 $119 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf4SuRFEEEEE8getTypesEv($55)|0);
 $120 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $121 = (__ZN10emscripten8internal10getContextIMN4surf4SuRFEKFjvEEEPT_RKS6_($54)|0);
 __embind_register_class_function(($117|0),(2239|0),($118|0),($119|0),($120|0),(75|0),($121|0),0);
 HEAP32[$52>>2] = (76);
 $$fca$1$insert165$fca$1$gep = ((($52)) + 4|0);
 HEAP32[$$fca$1$insert165$fca$1$gep>>2] = 0;
 $122 = (__ZN10emscripten8internal6TypeIDIN4surf4SuRFEE3getEv()|0);
 $123 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf4SuRFEEEEE8getCountEv($53)|0);
 $124 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf4SuRFEEEEE8getTypesEv($53)|0);
 $125 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $126 = (__ZN10emscripten8internal10getContextIMN4surf4SuRFEKFjvEEEPT_RKS6_($52)|0);
 __embind_register_class_function(($122|0),(2249|0),($123|0),($124|0),($125|0),(75|0),($126|0),0);
 HEAP32[$50>>2] = (77);
 $$fca$1$insert173$fca$1$gep = ((($50)) + 4|0);
 HEAP32[$$fca$1$insert173$fca$1$gep>>2] = 0;
 $127 = (__ZN10emscripten8internal6TypeIDIN4surf4SuRFEE3getEv()|0);
 $128 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN4surf4SuRFEEEEE8getCountEv($51)|0);
 $129 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN4surf4SuRFEEEEE8getTypesEv($51)|0);
 $130 = (__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv()|0);
 $131 = (__ZN10emscripten8internal10getContextIMN4surf4SuRFEFvvEEEPT_RKS6_($50)|0);
 __embind_register_class_function(($127|0),(2269|0),($128|0),($129|0),($130|0),(78|0),($131|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyIN4surf4SuRF4IterEEEvv();
 $132 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterIN4surf4SuRF4IterEEEPFvvEv()|0);
 $133 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterIN4surf4SuRF4IterEEEPFvvEv()|0);
 $134 = (__ZN10emscripten8internal6TypeIDIN4surf4SuRF4IterEE3getEv()|0);
 $135 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4surf4SuRF4IterEEEE3getEv()|0);
 $136 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4surf4SuRF4IterEEEE3getEv()|0);
 $137 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $138 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $139 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $140 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $141 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($134|0),($135|0),($136|0),($137|0),($138|0),(79|0),($139|0),($132|0),($140|0),($133|0),(2277|0),($141|0),(80|0));
 HEAP32[$48>>2] = (81);
 $$fca$1$insert191$fca$1$gep = ((($48)) + 4|0);
 HEAP32[$$fca$1$insert191$fca$1$gep>>2] = 0;
 $142 = (__ZN10emscripten8internal6TypeIDIN4surf4SuRF4IterEE3getEv()|0);
 $143 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIKN4surf4SuRF4IterEEEEE8getCountEv($49)|0);
 $144 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIKN4surf4SuRF4IterEEEEE8getTypesEv($49)|0);
 $145 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $146 = (__ZN10emscripten8internal10getContextIMN4surf4SuRF4IterEKFbvEEEPT_RKS7_($48)|0);
 __embind_register_class_function(($142|0),(2291|0),($143|0),($144|0),($145|0),(82|0),($146|0),0);
 HEAP32[$46>>2] = (83);
 $$fca$1$insert199$fca$1$gep = ((($46)) + 4|0);
 HEAP32[$$fca$1$insert199$fca$1$gep>>2] = 0;
 $147 = (__ZN10emscripten8internal6TypeIDIN4surf4SuRF4IterEE3getEv()|0);
 $148 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerIKN4surf4SuRF4IterEEERKNSt3__212basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEE8getCountEv($47)|0);
 $149 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerIKN4surf4SuRF4IterEEERKNSt3__212basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEE8getTypesEv($47)|0);
 $150 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $151 = (__ZN10emscripten8internal10getContextIMN4surf4SuRF4IterEKFiRKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEPT_RKSG_($46)|0);
 __embind_register_class_function(($147|0),(2299|0),($148|0),($149|0),($150|0),(84|0),($151|0),0);
 HEAP32[$44>>2] = (85);
 $$fca$1$insert207$fca$1$gep = ((($44)) + 4|0);
 HEAP32[$$fca$1$insert207$fca$1$gep>>2] = 0;
 $152 = (__ZN10emscripten8internal6TypeIDIN4surf4SuRF4IterEE3getEv()|0);
 $153 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_17AllowedRawPointerIKN4surf4SuRF4IterEEEEE8getCountEv($45)|0);
 $154 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_17AllowedRawPointerIKN4surf4SuRF4IterEEEEE8getTypesEv($45)|0);
 $155 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $156 = (__ZN10emscripten8internal10getContextIMN4surf4SuRF4IterEKFNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEvEEEPT_RKSE_($44)|0);
 __embind_register_class_function(($152|0),(2307|0),($153|0),($154|0),($155|0),(86|0),($156|0),0);
 HEAP32[$42>>2] = (87);
 $$fca$1$insert215$fca$1$gep = ((($42)) + 4|0);
 HEAP32[$$fca$1$insert215$fca$1$gep>>2] = 0;
 $157 = (__ZN10emscripten8internal6TypeIDIN4surf4SuRF4IterEE3getEv()|0);
 $158 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIN4surf4SuRF4IterEEEiEE8getCountEv($43)|0);
 $159 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIN4surf4SuRF4IterEEEiEE8getTypesEv($43)|0);
 $160 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $161 = (__ZN10emscripten8internal10getContextIMN4surf4SuRF4IterEFbiEEEPT_RKS7_($42)|0);
 __embind_register_class_function(($157|0),(2314|0),($158|0),($159|0),($160|0),(88|0),($161|0),0);
 HEAP32[$40>>2] = (89);
 $$fca$1$insert223$fca$1$gep = ((($40)) + 4|0);
 HEAP32[$$fca$1$insert223$fca$1$gep>>2] = 0;
 $162 = (__ZN10emscripten8internal6TypeIDIN4surf4SuRF4IterEE3getEv()|0);
 $163 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIN4surf4SuRF4IterEEEiEE8getCountEv($41)|0);
 $164 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIN4surf4SuRF4IterEEEiEE8getTypesEv($41)|0);
 $165 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv()|0);
 $166 = (__ZN10emscripten8internal10getContextIMN4surf4SuRF4IterEFbiEEEPT_RKS7_($40)|0);
 __embind_register_class_function(($162|0),(2319|0),($163|0),($164|0),($165|0),(88|0),($166|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyIN4surf16SuRFAccessHelperEEEvv();
 $167 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterIN4surf16SuRFAccessHelperEEEPFvvEv()|0);
 $168 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterIN4surf16SuRFAccessHelperEEEPFvvEv()|0);
 $169 = (__ZN10emscripten8internal6TypeIDIN4surf16SuRFAccessHelperEE3getEv()|0);
 $170 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4surf16SuRFAccessHelperEEEE3getEv()|0);
 $171 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4surf16SuRFAccessHelperEEEE3getEv()|0);
 $172 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $173 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $174 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $175 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $176 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($169|0),($170|0),($171|0),($172|0),($173|0),(90|0),($174|0),($167|0),($175|0),($168|0),(2324|0),($176|0),(91|0));
 $177 = (__ZN10emscripten8internal6TypeIDIN4surf16SuRFAccessHelperEE3getEv()|0);
 $178 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4surf16SuRFAccessHelperERKNS5_4SuRFEEE8getCountEv($39)|0);
 $179 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4surf16SuRFAccessHelperERKNS5_4SuRFEEE8getTypesEv($39)|0);
 $180 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 __embind_register_class_constructor(($177|0),($178|0),($179|0),($180|0),(92|0),(93|0));
 HEAP32[$37>>2] = (94);
 $$fca$1$insert246$fca$1$gep = ((($37)) + 4|0);
 HEAP32[$$fca$1$insert246$fca$1$gep>>2] = 0;
 $181 = (__ZN10emscripten8internal6TypeIDIN4surf16SuRFAccessHelperEE3getEv()|0);
 $182 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf16SuRFAccessHelperEEEEE8getCountEv($38)|0);
 $183 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf16SuRFAccessHelperEEEEE8getTypesEv($38)|0);
 $184 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $185 = (__ZN10emscripten8internal10getContextIMN4surf16SuRFAccessHelperEKFjvEEEPT_RKS6_($37)|0);
 __embind_register_class_function(($181|0),(2346|0),($182|0),($183|0),($184|0),(95|0),($185|0),0);
 HEAP32[$35>>2] = (96);
 $$fca$1$insert254$fca$1$gep = ((($35)) + 4|0);
 HEAP32[$$fca$1$insert254$fca$1$gep>>2] = 0;
 $186 = (__ZN10emscripten8internal6TypeIDIN4surf16SuRFAccessHelperEE3getEv()|0);
 $187 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf16SuRFAccessHelperEEEEE8getCountEv($36)|0);
 $188 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf16SuRFAccessHelperEEEEE8getTypesEv($36)|0);
 $189 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $190 = (__ZN10emscripten8internal10getContextIMN4surf16SuRFAccessHelperEKFjvEEEPT_RKS6_($35)|0);
 __embind_register_class_function(($186|0),(2361|0),($187|0),($188|0),($189|0),(95|0),($190|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyIN4surf11SuRFBuilderEEEvv();
 $191 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterIN4surf11SuRFBuilderEEEPFvvEv()|0);
 $192 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterIN4surf11SuRFBuilderEEEPFvvEv()|0);
 $193 = (__ZN10emscripten8internal6TypeIDIN4surf11SuRFBuilderEE3getEv()|0);
 $194 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4surf11SuRFBuilderEEEE3getEv()|0);
 $195 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4surf11SuRFBuilderEEEE3getEv()|0);
 $196 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $197 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $198 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $199 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $200 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($193|0),($194|0),($195|0),($196|0),($197|0),(97|0),($198|0),($191|0),($199|0),($192|0),(2376|0),($200|0),(98|0));
 $201 = (__ZN10emscripten8internal6TypeIDIN4surf11SuRFBuilderEE3getEv()|0);
 $202 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4surf11SuRFBuilderEObOjONS5_10SuffixTypeES9_S9_EE8getCountEv($34)|0);
 $203 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4surf11SuRFBuilderEObOjONS5_10SuffixTypeES9_S9_EE8getTypesEv($34)|0);
 $204 = (__ZN10emscripten8internal19getGenericSignatureIJiiiiiiiEEEPKcv()|0);
 __embind_register_class_constructor(($201|0),($202|0),($203|0),($204|0),(99|0),(100|0));
 HEAP32[$32>>2] = (101);
 $$fca$1$insert277$fca$1$gep = ((($32)) + 4|0);
 HEAP32[$$fca$1$insert277$fca$1$gep>>2] = 0;
 $205 = (__ZN10emscripten8internal6TypeIDIN4surf11SuRFBuilderEE3getEv()|0);
 $206 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN4surf11SuRFBuilderEEERKNSt3__26vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEEEE8getCountEv($33)|0);
 $207 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN4surf11SuRFBuilderEEERKNSt3__26vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEEEE8getTypesEv($33)|0);
 $208 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $209 = (__ZN10emscripten8internal10getContextIMN4surf11SuRFBuilderEFvRKNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEEEPT_RKSI_($32)|0);
 __embind_register_class_function(($205|0),(2393|0),($206|0),($207|0),($208|0),(102|0),($209|0),0);
 HEAP32[$30>>2] = (103);
 $$fca$1$insert285$fca$1$gep = ((($30)) + 4|0);
 HEAP32[$$fca$1$insert285$fca$1$gep>>2] = 0;
 $210 = (__ZN10emscripten8internal6TypeIDIN4surf11SuRFBuilderEE3getEv()|0);
 $211 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf11SuRFBuilderEEEEE8getCountEv($31)|0);
 $212 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf11SuRFBuilderEEEEE8getTypesEv($31)|0);
 $213 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $214 = (__ZN10emscripten8internal10getContextIMN4surf11SuRFBuilderEKFjvEEEPT_RKS6_($30)|0);
 __embind_register_class_function(($210|0),(2399|0),($211|0),($212|0),($213|0),(104|0),($214|0),0);
 HEAP32[$28>>2] = (105);
 $$fca$1$insert293$fca$1$gep = ((($28)) + 4|0);
 HEAP32[$$fca$1$insert293$fca$1$gep>>2] = 0;
 $215 = (__ZN10emscripten8internal6TypeIDIN4surf11SuRFBuilderEE3getEv()|0);
 $216 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf11SuRFBuilderEEEEE8getCountEv($29)|0);
 $217 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf11SuRFBuilderEEEEE8getTypesEv($29)|0);
 $218 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $219 = (__ZN10emscripten8internal10getContextIMN4surf11SuRFBuilderEKFjvEEEPT_RKS6_($28)|0);
 __embind_register_class_function(($215|0),(2249|0),($216|0),($217|0),($218|0),(104|0),($219|0),0);
 HEAP32[$26>>2] = (106);
 $$fca$1$insert301$fca$1$gep = ((($26)) + 4|0);
 HEAP32[$$fca$1$insert301$fca$1$gep>>2] = 0;
 $220 = (__ZN10emscripten8internal6TypeIDIN4surf11SuRFBuilderEE3getEv()|0);
 $221 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4surf10SuffixTypeENS0_17AllowedRawPointerIKNS4_11SuRFBuilderEEEEE8getCountEv($27)|0);
 $222 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4surf10SuffixTypeENS0_17AllowedRawPointerIKNS4_11SuRFBuilderEEEEE8getTypesEv($27)|0);
 $223 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $224 = (__ZN10emscripten8internal10getContextIMN4surf11SuRFBuilderEKFNS2_10SuffixTypeEvEEEPT_RKS7_($26)|0);
 __embind_register_class_function(($220|0),(2413|0),($221|0),($222|0),($223|0),(107|0),($224|0),0);
 HEAP32[$24>>2] = (108);
 $$fca$1$insert309$fca$1$gep = ((($24)) + 4|0);
 HEAP32[$$fca$1$insert309$fca$1$gep>>2] = 0;
 $225 = (__ZN10emscripten8internal6TypeIDIN4surf11SuRFBuilderEE3getEv()|0);
 $226 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf11SuRFBuilderEEEEE8getCountEv($25)|0);
 $227 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf11SuRFBuilderEEEEE8getTypesEv($25)|0);
 $228 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $229 = (__ZN10emscripten8internal10getContextIMN4surf11SuRFBuilderEKFjvEEEPT_RKS6_($24)|0);
 __embind_register_class_function(($225|0),(2427|0),($226|0),($227|0),($228|0),(104|0),($229|0),0);
 HEAP32[$22>>2] = (109);
 $$fca$1$insert317$fca$1$gep = ((($22)) + 4|0);
 HEAP32[$$fca$1$insert317$fca$1$gep>>2] = 0;
 $230 = (__ZN10emscripten8internal6TypeIDIN4surf11SuRFBuilderEE3getEv()|0);
 $231 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf11SuRFBuilderEEEEE8getCountEv($23)|0);
 $232 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf11SuRFBuilderEEEEE8getTypesEv($23)|0);
 $233 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $234 = (__ZN10emscripten8internal10getContextIMN4surf11SuRFBuilderEKFjvEEEPT_RKS6_($22)|0);
 __embind_register_class_function(($230|0),(2440|0),($231|0),($232|0),($233|0),(104|0),($234|0),0);
 HEAP32[$20>>2] = (110);
 $$fca$1$insert325$fca$1$gep = ((($20)) + 4|0);
 HEAP32[$$fca$1$insert325$fca$1$gep>>2] = 0;
 $235 = (__ZN10emscripten8internal6TypeIDIN4surf11SuRFBuilderEE3getEv()|0);
 $236 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf11SuRFBuilderEEEEE8getCountEv($21)|0);
 $237 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf11SuRFBuilderEEEEE8getTypesEv($21)|0);
 $238 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 $239 = (__ZN10emscripten8internal10getContextIMN4surf11SuRFBuilderEKFjvEEEPT_RKS6_($20)|0);
 __embind_register_class_function(($235|0),(2457|0),($236|0),($237|0),($238|0),(104|0),($239|0),0);
 __ZN10emscripten8internal11NoBaseClass6verifyIN4surf23SuRFBuilderAccessHelperEEEvv();
 $240 = (__ZN10emscripten8internal11NoBaseClass11getUpcasterIN4surf23SuRFBuilderAccessHelperEEEPFvvEv()|0);
 $241 = (__ZN10emscripten8internal11NoBaseClass13getDowncasterIN4surf23SuRFBuilderAccessHelperEEEPFvvEv()|0);
 $242 = (__ZN10emscripten8internal6TypeIDIN4surf23SuRFBuilderAccessHelperEE3getEv()|0);
 $243 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4surf23SuRFBuilderAccessHelperEEEE3getEv()|0);
 $244 = (__ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEEE3getEv()|0);
 $245 = (__ZN10emscripten8internal11NoBaseClass3getEv()|0);
 $246 = (__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv()|0);
 $247 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $248 = (__ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv()|0);
 $249 = (__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv()|0);
 __embind_register_class(($242|0),($243|0),($244|0),($245|0),($246|0),(111|0),($247|0),($240|0),($248|0),($241|0),(2474|0),($249|0),(112|0));
 $250 = (__ZN10emscripten8internal6TypeIDIN4surf23SuRFBuilderAccessHelperEE3getEv()|0);
 $251 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4surf23SuRFBuilderAccessHelperERKNS5_11SuRFBuilderEEE8getCountEv($19)|0);
 $252 = (__ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4surf23SuRFBuilderAccessHelperERKNS5_11SuRFBuilderEEE8getTypesEv($19)|0);
 $253 = (__ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv()|0);
 __embind_register_class_constructor(($250|0),($251|0),($252|0),($253|0),(113|0),(114|0));
 HEAP32[$17>>2] = (115);
 $$fca$1$insert348$fca$1$gep = ((($17)) + 4|0);
 HEAP32[$$fca$1$insert348$fca$1$gep>>2] = 0;
 $254 = (__ZN10emscripten8internal6TypeIDIN4surf23SuRFBuilderAccessHelperEE3getEv()|0);
 $255 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEESE_EE8getCountEv($18)|0);
 $256 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEESE_EE8getTypesEv($18)|0);
 $257 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $258 = (__ZN10emscripten8internal10getContextIMN4surf23SuRFBuilderAccessHelperEKFvRNSt3__26vectorIjNS4_9allocatorIjEEEES9_EEEPT_RKSC_($17)|0);
 __embind_register_class_function(($254|0),(2503|0),($255|0),($256|0),($257|0),(116|0),($258|0),0);
 HEAP32[$15>>2] = (117);
 $$fca$1$insert356$fca$1$gep = ((($15)) + 4|0);
 HEAP32[$$fca$1$insert356$fca$1$gep>>2] = 0;
 $259 = (__ZN10emscripten8internal6TypeIDIN4surf23SuRFBuilderAccessHelperEE3getEv()|0);
 $260 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEESE_EE8getCountEv($16)|0);
 $261 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEESE_EE8getTypesEv($16)|0);
 $262 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $263 = (__ZN10emscripten8internal10getContextIMN4surf23SuRFBuilderAccessHelperEKFvRNSt3__26vectorIjNS4_9allocatorIjEEEES9_EEEPT_RKSC_($15)|0);
 __embind_register_class_function(($259|0),(2519|0),($260|0),($261|0),($262|0),(116|0),($263|0),0);
 HEAP32[$13>>2] = (118);
 $$fca$1$insert364$fca$1$gep = ((($13)) + 4|0);
 HEAP32[$$fca$1$insert364$fca$1$gep>>2] = 0;
 $264 = (__ZN10emscripten8internal6TypeIDIN4surf23SuRFBuilderAccessHelperEE3getEv()|0);
 $265 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEESE_EE8getCountEv($14)|0);
 $266 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEESE_EE8getTypesEv($14)|0);
 $267 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $268 = (__ZN10emscripten8internal10getContextIMN4surf23SuRFBuilderAccessHelperEKFvRNSt3__26vectorIjNS4_9allocatorIjEEEES9_EEEPT_RKSC_($13)|0);
 __embind_register_class_function(($264|0),(2547|0),($265|0),($266|0),($267|0),(116|0),($268|0),0);
 HEAP32[$11>>2] = (119);
 $$fca$1$insert372$fca$1$gep = ((($11)) + 4|0);
 HEAP32[$$fca$1$insert372$fca$1$gep>>2] = 0;
 $269 = (__ZN10emscripten8internal6TypeIDIN4surf23SuRFBuilderAccessHelperEE3getEv()|0);
 $270 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEESE_EE8getCountEv($12)|0);
 $271 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEESE_EE8getTypesEv($12)|0);
 $272 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $273 = (__ZN10emscripten8internal10getContextIMN4surf23SuRFBuilderAccessHelperEKFvRNSt3__26vectorIjNS4_9allocatorIjEEEES9_EEEPT_RKSC_($11)|0);
 __embind_register_class_function(($269|0),(2573|0),($270|0),($271|0),($272|0),(116|0),($273|0),0);
 HEAP32[$9>>2] = (120);
 $$fca$1$insert380$fca$1$gep = ((($9)) + 4|0);
 HEAP32[$$fca$1$insert380$fca$1$gep>>2] = 0;
 $274 = (__ZN10emscripten8internal6TypeIDIN4surf23SuRFBuilderAccessHelperEE3getEv()|0);
 $275 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEESE_EE8getCountEv($10)|0);
 $276 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEESE_EE8getTypesEv($10)|0);
 $277 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $278 = (__ZN10emscripten8internal10getContextIMN4surf23SuRFBuilderAccessHelperEKFvRNSt3__26vectorIjNS4_9allocatorIjEEEES9_EEEPT_RKSC_($9)|0);
 __embind_register_class_function(($274|0),(2583|0),($275|0),($276|0),($277|0),(116|0),($278|0),0);
 HEAP32[$7>>2] = (121);
 $$fca$1$insert388$fca$1$gep = ((($7)) + 4|0);
 HEAP32[$$fca$1$insert388$fca$1$gep>>2] = 0;
 $279 = (__ZN10emscripten8internal6TypeIDIN4surf23SuRFBuilderAccessHelperEE3getEv()|0);
 $280 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEESE_EE8getCountEv($8)|0);
 $281 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEESE_EE8getTypesEv($8)|0);
 $282 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $283 = (__ZN10emscripten8internal10getContextIMN4surf23SuRFBuilderAccessHelperEKFvRNSt3__26vectorIjNS4_9allocatorIjEEEES9_EEEPT_RKSC_($7)|0);
 __embind_register_class_function(($279|0),(2605|0),($280|0),($281|0),($282|0),(116|0),($283|0),0);
 HEAP32[$5>>2] = (122);
 $$fca$1$insert396$fca$1$gep = ((($5)) + 4|0);
 HEAP32[$$fca$1$insert396$fca$1$gep>>2] = 0;
 $284 = (__ZN10emscripten8internal6TypeIDIN4surf23SuRFBuilderAccessHelperEE3getEv()|0);
 $285 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEESE_EE8getCountEv($6)|0);
 $286 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEESE_EE8getTypesEv($6)|0);
 $287 = (__ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv()|0);
 $288 = (__ZN10emscripten8internal10getContextIMN4surf23SuRFBuilderAccessHelperEKFvRNSt3__26vectorIjNS4_9allocatorIjEEEES9_EEEPT_RKSC_($5)|0);
 __embind_register_class_function(($284|0),(2618|0),($285|0),($286|0),($287|0),(116|0),($288|0),0);
 HEAP32[$3>>2] = (123);
 $$fca$1$insert404$fca$1$gep = ((($3)) + 4|0);
 HEAP32[$$fca$1$insert404$fca$1$gep>>2] = 0;
 $289 = (__ZN10emscripten8internal6TypeIDIN4surf23SuRFBuilderAccessHelperEE3getEv()|0);
 $290 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEEEE8getCountEv($4)|0);
 $291 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEEEE8getTypesEv($4)|0);
 $292 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $293 = (__ZN10emscripten8internal10getContextIMN4surf23SuRFBuilderAccessHelperEKFvRNSt3__26vectorIjNS4_9allocatorIjEEEEEEEPT_RKSC_($3)|0);
 __embind_register_class_function(($289|0),(2630|0),($290|0),($291|0),($292|0),(124|0),($293|0),0);
 HEAP32[$1>>2] = (125);
 $$fca$1$insert412$fca$1$gep = ((($1)) + 4|0);
 HEAP32[$$fca$1$insert412$fca$1$gep>>2] = 0;
 $294 = (__ZN10emscripten8internal6TypeIDIN4surf23SuRFBuilderAccessHelperEE3getEv()|0);
 $295 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEEEE8getCountEv($2)|0);
 $296 = (__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEEEE8getTypesEv($2)|0);
 $297 = (__ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv()|0);
 $298 = (__ZN10emscripten8internal10getContextIMN4surf23SuRFBuilderAccessHelperEKFvRNSt3__26vectorIjNS4_9allocatorIjEEEEEEEPT_RKSC_($1)|0);
 __embind_register_class_function(($294|0),(2646|0),($295|0),($296|0),($297|0),(124|0),($298|0),0);
 STACKTOP = sp;return;
}
function __ZN10emscripten8constantIhEEvPKcRKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal6TypeIDIRKhE3getEv()|0);
 $3 = (__ZN10emscripten8internal11BindingTypeIhE10toWireTypeERKh($1)|0);
 $4 = (__ZN10emscripten8internal14asGenericValueIhEEjT_($3)|0);
 __embind_register_constant(($0|0),($2|0),($4|0));
 return;
}
function __ZN10emscripten8constantIiEEvPKcRKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal6TypeIDIRKiE3getEv()|0);
 $3 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($1)|0);
 $4 = (__ZN10emscripten8internal14asGenericValueIiEEjT_($3)|0);
 __embind_register_constant(($0|0),($2|0),($4|0));
 return;
}
function __ZN10emscripten8constantIbEEvPKcRKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal6TypeIDIRKbE3getEv()|0);
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)!=(0);
 $6 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($5)|0);
 $7 = (__ZN10emscripten8internal14asGenericValueIbEEjT_($6)|0);
 __embind_register_constant(($0|0),($2|0),($7|0));
 return;
}
function __ZN10emscripten8constantIjEEvPKcRKT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal6TypeIDIRKjE3getEv()|0);
 $3 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($1)|0);
 $4 = (__ZN10emscripten8internal14asGenericValueIjEEjT_($3)|0);
 __embind_register_constant(($0|0),($2|0),($4|0));
 return;
}
function __ZN10emscripten5enum_IN4surf10SuffixTypeEEC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal6TypeIDIN4surf10SuffixTypeEE3getEv()|0);
 __embind_register_enum(($2|0),($1|0),4,0);
 return;
}
function __ZN10emscripten5enum_IN4surf10SuffixTypeEE5valueEPKcS2_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal6TypeIDIN4surf10SuffixTypeEE3getEv()|0);
 __embind_register_enum_value(($3|0),($1|0),($2|0));
 return ($0|0);
}
function __ZN4surf4SuRF7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __ZN4surf10LoudsDense7destroyEv($1);
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __ZN4surf11LoudsSparse7destroyEv($3);
 return;
}
function __ZNK4surf16SuRFAccessHelper14serializedSizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZNK4surf4SuRF14serializedSizeEv($1)|0);
 $3 = tempRet0;
 return ($2|0);
}
function __ZNK4surf16SuRFAccessHelper14getMemoryUsageEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (__ZNK4surf4SuRF14getMemoryUsageEv($1)|0);
 $3 = tempRet0;
 return ($2|0);
}
function __ZNK4surf11SuRFBuilder12getSuffixLenEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 88|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 92|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2))|0;
 return ($5|0);
}
function __ZNK4surf23SuRFBuilderAccessHelper15getBitmapLabelsERNSt3__26vectorIjNS1_9allocatorIjEEEES6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__ZNK4surf11SuRFBuilder15getBitmapLabelsEv($3)|0);
 __ZN4surf23SuRFBuilderAccessHelper13copy_nested64IyEEvRNSt3__26vectorIjNS2_9allocatorIjEEEES7_RKNS3_INS3_IT_NS4_IS8_EEEENS4_ISA_EEEE($1,$2,$4);
 return;
}
function __ZNK4surf23SuRFBuilderAccessHelper27getBitmapChildIndicatorBitsERNSt3__26vectorIjNS1_9allocatorIjEEEES6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__ZNK4surf11SuRFBuilder27getBitmapChildIndicatorBitsEv($3)|0);
 __ZN4surf23SuRFBuilderAccessHelper13copy_nested64IyEEvRNSt3__26vectorIjNS2_9allocatorIjEEEES7_RKNS3_INS3_IT_NS4_IS8_EEEENS4_ISA_EEEE($1,$2,$4);
 return;
}
function __ZNK4surf23SuRFBuilderAccessHelper25getPrefixkeyIndicatorBitsERNSt3__26vectorIjNS1_9allocatorIjEEEES6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__ZNK4surf11SuRFBuilder25getPrefixkeyIndicatorBitsEv($3)|0);
 __ZN4surf23SuRFBuilderAccessHelper13copy_nested64IyEEvRNSt3__26vectorIjNS2_9allocatorIjEEEES7_RKNS3_INS3_IT_NS4_IS8_EEEENS4_ISA_EEEE($1,$2,$4);
 return;
}
function __ZNK4surf23SuRFBuilderAccessHelper9getLabelsERNSt3__26vectorIjNS1_9allocatorIjEEEES6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__ZNK4surf11SuRFBuilder9getLabelsEv($3)|0);
 __ZN4surf23SuRFBuilderAccessHelper11copy_nestedIhEEvRNSt3__26vectorIjNS2_9allocatorIjEEEES7_RKNS3_INS3_IT_NS4_IS8_EEEENS4_ISA_EEEE($1,$2,$4);
 return;
}
function __ZNK4surf23SuRFBuilderAccessHelper21getChildIndicatorBitsERNSt3__26vectorIjNS1_9allocatorIjEEEES6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__ZNK4surf11SuRFBuilder21getChildIndicatorBitsEv($3)|0);
 __ZN4surf23SuRFBuilderAccessHelper13copy_nested64IyEEvRNSt3__26vectorIjNS2_9allocatorIjEEEES7_RKNS3_INS3_IT_NS4_IS8_EEEENS4_ISA_EEEE($1,$2,$4);
 return;
}
function __ZNK4surf23SuRFBuilderAccessHelper12getLoudsBitsERNSt3__26vectorIjNS1_9allocatorIjEEEES6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__ZNK4surf11SuRFBuilder12getLoudsBitsEv($3)|0);
 __ZN4surf23SuRFBuilderAccessHelper13copy_nested64IyEEvRNSt3__26vectorIjNS2_9allocatorIjEEEES7_RKNS3_INS3_IT_NS4_IS8_EEEENS4_ISA_EEEE($1,$2,$4);
 return;
}
function __ZNK4surf23SuRFBuilderAccessHelper11getSuffixesERNSt3__26vectorIjNS1_9allocatorIjEEEES6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__ZNK4surf11SuRFBuilder11getSuffixesEv($3)|0);
 __ZN4surf23SuRFBuilderAccessHelper13copy_nested64IyEEvRNSt3__26vectorIjNS2_9allocatorIjEEEES7_RKNS3_INS3_IT_NS4_IS8_EEEENS4_ISA_EEEE($1,$2,$4);
 return;
}
function __ZNK4surf23SuRFBuilderAccessHelper15getSuffixCountsERNSt3__26vectorIjNS1_9allocatorIjEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZNK4surf11SuRFBuilder15getSuffixCountsEv($2)|0);
 __ZN4surf23SuRFBuilderAccessHelper4copyIjEEvRNSt3__26vectorIjNS2_9allocatorIjEEEERKNS3_IT_NS4_IS8_EEEE($1,$3);
 return;
}
function __ZNK4surf23SuRFBuilderAccessHelper13getNodeCountsERNSt3__26vectorIjNS1_9allocatorIjEEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = (__ZNK4surf11SuRFBuilder13getNodeCountsEv($2)|0);
 __ZN4surf23SuRFBuilderAccessHelper4copyIjEEvRNSt3__26vectorIjNS2_9allocatorIjEEEERKNS3_IT_NS4_IS8_EEEE($1,$3);
 return;
}
function __ZN4surf15BitvectorSuffix19constructHashSuffixERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN4surf10suffixHashERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0)|0);
 $3 = (64 - ($1))|0;
 $4 = (($3) + -7)|0;
 $5 = (_bitshift64Shl(($2|0),0,($4|0))|0);
 $6 = tempRet0;
 $7 = (_bitshift64Lshr(($5|0),($6|0),($3|0))|0);
 $8 = tempRet0;
 tempRet0 = ($8);
 return ($7|0);
}
function __ZN4surf15BitvectorSuffix20constructMixedSuffixERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjjj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN4surf15BitvectorSuffix19constructHashSuffixERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEj($0,$1)|0);
 $5 = tempRet0;
 $6 = (__ZN4surf15BitvectorSuffix19constructRealSuffixERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEjj($0,$2,$3)|0);
 $7 = tempRet0;
 $8 = (_bitshift64Shl(($4|0),($5|0),($3|0))|0);
 $9 = tempRet0;
 $10 = $8 | $6;
 $11 = $9 | $7;
 tempRet0 = ($11);
 return ($10|0);
}
function __ZN4surf10suffixHashERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 $4 = HEAP32[$0>>2]|0;
 $5 = $3 ? $4 : $0;
 $6 = $2&255;
 $7 = $6 & 128;
 $8 = ($7|0)==(0);
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8 ? $6 : $10;
 $12 = (__ZN4surf4HashEPKcjj($5,$11,-1130422988)|0);
 return ($12|0);
}
function __ZN4surf4HashEPKcjj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$024$lcssa = 0, $$02425 = 0, $$026 = 0, $$026$phi = 0, $$1 = 0, $$2 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($0) + ($1)|0);
 $4 = Math_imul($1, -962287725)|0;
 $5 = $4 ^ $2;
 $6 = ($1|0)<(4);
 if ($6) {
  $$0$lcssa = $0;$$024$lcssa = $5;
 } else {
  $7 = ((($0)) + 4|0);
  $$02425 = $5;$$026 = $0;$14 = $7;
  while(1) {
   $8 = (__ZN4surf13DecodeFixed32EPKc($$026)|0);
   $9 = (($8) + ($$02425))|0;
   $10 = Math_imul($9, -962287725)|0;
   $11 = $10 >>> 16;
   $12 = $11 ^ $10;
   $13 = ((($14)) + 4|0);
   $15 = ($13>>>0)>($3>>>0);
   if ($15) {
    $$0$lcssa = $14;$$024$lcssa = $12;
    break;
   } else {
    $$026$phi = $14;$$02425 = $12;$14 = $13;$$026 = $$026$phi;
   }
  }
 }
 $16 = $3;
 $17 = $$0$lcssa;
 $18 = (($16) - ($17))|0;
 switch ($18|0) {
 case 3:  {
  $19 = ((($$0$lcssa)) + 2|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $21 << 16;
  $23 = (($22) + ($$024$lcssa))|0;
  $$1 = $23;
  label = 6;
  break;
 }
 case 2:  {
  $$1 = $$024$lcssa;
  label = 6;
  break;
 }
 case 1:  {
  $$2 = $$024$lcssa;
  break;
 }
 default: {
  $$3 = $$024$lcssa;
  return ($$3|0);
 }
 }
 if ((label|0) == 6) {
  $24 = ((($$0$lcssa)) + 1|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 << 8;
  $28 = (($27) + ($$1))|0;
  $$2 = $28;
 }
 $29 = HEAP8[$$0$lcssa>>0]|0;
 $30 = $29&255;
 $31 = (($$2) + ($30))|0;
 $32 = Math_imul($31, -962287725)|0;
 $33 = $32 >>> 24;
 $34 = $33 ^ $32;
 $$3 = $34;
 return ($$3|0);
}
function __ZN4surf13DecodeFixed32EPKc($0) {
 $0 = $0|0;
 var $$0$copyload = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0$copyload = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 return ($$0$copyload|0);
}
function __ZN4surf11SuRFBuilder11storeSuffixEjy($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$pn$in = 0, $$sink112 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = (__ZNK4surf11SuRFBuilder12getSuffixLenEv($0)|0);
 $7 = (($1) + -1)|0;
 $8 = ((($0)) + 108|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($7<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = Math_imul($11, $6)|0;
 $13 = ((($0)) + 96|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + (($7*12)|0)|0);
 $16 = (((($14) + (($7*12)|0)|0)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$15>>2]|0;
 $19 = (($17) - ($18))|0;
 $20 = $19 << 3;
 $21 = ($12|0)==($20|0);
 do {
  if ($21) {
   $22 = $4;
   $23 = $22;
   HEAP32[$23>>2] = 0;
   $24 = (($22) + 4)|0;
   $25 = $24;
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$16>>2]|0;
   $27 = (((($14) + (($7*12)|0)|0)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($26>>>0)<($28>>>0);
   if ($29) {
    $30 = $26;
    $31 = $30;
    HEAP32[$31>>2] = 0;
    $32 = (($30) + 4)|0;
    $33 = $32;
    HEAP32[$33>>2] = 0;
    $34 = HEAP32[$16>>2]|0;
    $35 = ((($34)) + 8|0);
    HEAP32[$16>>2] = $35;
    break;
   } else {
    __ZNSt3__26vectorIyNS_9allocatorIyEEE21__push_back_slow_pathIyEEvOT_($15,$4);
    break;
   }
  }
 } while(0);
 $36 = $12 >>> 6;
 $37 = $12 & 63;
 $38 = (64 - ($37))|0;
 $39 = ($6>>>0)>($38>>>0);
 if ($39) {
  $41 = (($6) - ($38))|0;
  $42 = (_bitshift64Lshr(($2|0),($3|0),($41|0))|0);
  $43 = tempRet0;
  $44 = HEAP32[$13>>2]|0;
  $45 = (($44) + (($7*12)|0)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + ($36<<3)|0);
  $48 = $47;
  $49 = $48;
  $50 = HEAP32[$49>>2]|0;
  $51 = (($48) + 4)|0;
  $52 = $51;
  $53 = HEAP32[$52>>2]|0;
  $54 = (_i64Add(($50|0),($53|0),($42|0),($43|0))|0);
  $55 = tempRet0;
  $56 = $47;
  $57 = $56;
  HEAP32[$57>>2] = $54;
  $58 = (($56) + 4)|0;
  $59 = $58;
  HEAP32[$59>>2] = $55;
  $60 = HEAP32[$13>>2]|0;
  $61 = $5;
  $62 = $61;
  HEAP32[$62>>2] = 0;
  $63 = (($61) + 4)|0;
  $64 = $63;
  HEAP32[$64>>2] = 0;
  $65 = (((($60) + (($7*12)|0)|0)) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (((($60) + (($7*12)|0)|0)) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($66>>>0)<($68>>>0);
  if ($69) {
   $70 = $66;
   $71 = $70;
   HEAP32[$71>>2] = 0;
   $72 = (($70) + 4)|0;
   $73 = $72;
   HEAP32[$73>>2] = 0;
   $74 = HEAP32[$65>>2]|0;
   $75 = ((($74)) + 8|0);
   HEAP32[$65>>2] = $75;
  } else {
   $76 = (($60) + (($7*12)|0)|0);
   __ZNSt3__26vectorIyNS_9allocatorIyEEE21__push_back_slow_pathIyEEvOT_($76,$5);
  }
  $77 = (($36) + 1)|0;
  $78 = (64 - ($41))|0;
  $$pn$in = $78;$$sink112 = $77;
 } else {
  $40 = (($38) - ($6))|0;
  $$pn$in = $40;$$sink112 = $36;
 }
 $79 = HEAP32[$13>>2]|0;
 $80 = (($79) + (($7*12)|0)|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (($81) + ($$sink112<<3)|0);
 $83 = (_bitshift64Shl(($2|0),($3|0),($$pn$in|0))|0);
 $84 = tempRet0;
 $85 = $82;
 $86 = $85;
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) + 4)|0;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = (_i64Add(($87|0),($90|0),($83|0),($84|0))|0);
 $92 = tempRet0;
 $93 = $82;
 $94 = $93;
 HEAP32[$94>>2] = $91;
 $95 = (($93) + 4)|0;
 $96 = $95;
 HEAP32[$96>>2] = $92;
 $97 = HEAP32[$8>>2]|0;
 $98 = (($97) + ($7<<2)|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = (($99) + 1)|0;
 HEAP32[$98>>2] = $100;
 STACKTOP = sp;return;
}
function __ZNK4surf11SuRFBuilder15computeDenseMemEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $32 = 0;$33 = 0;
  tempRet0 = ($32);
  return ($33|0);
 }
 $3 = ((($0)) + 120|0);
 $4 = ((($0)) + 108|0);
 $$019 = 0;$10 = 0;$9 = 0;
 while(1) {
  $5 = HEAP32[$3>>2]|0;
  $6 = (($5) + ($$019<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 << 9;
  $11 = (_i64Add(($9|0),($10|0),($8|0),0)|0);
  $12 = tempRet0;
  $13 = ($$019|0)==(0);
  if ($13) {
   $27 = $11;$28 = $12;
  } else {
   $14 = (($$019) + -1)|0;
   $15 = (($5) + ($14<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $16 >>> 3;
   $18 = (($17) + 1)|0;
   $19 = (_i64Add(($11|0),($12|0),($18|0),0)|0);
   $20 = tempRet0;
   $27 = $19;$28 = $20;
  }
  $21 = HEAP32[$4>>2]|0;
  $22 = (($21) + ($$019<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (__ZNK4surf11SuRFBuilder12getSuffixLenEv($0)|0);
  $25 = Math_imul($24, $23)|0;
  $26 = $25 >>> 3;
  $29 = (_i64Add(($27|0),($28|0),($26|0),0)|0);
  $30 = tempRet0;
  $31 = (($$019) + 1)|0;
  $exitcond = ($31|0)==($1|0);
  if ($exitcond) {
   $32 = $30;$33 = $29;
   break;
  } else {
   $$019 = $31;$10 = $30;$9 = $29;
  }
 }
 tempRet0 = ($32);
 return ($33|0);
}
function __ZNK4surf11SuRFBuilder16computeSparseMemEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01516 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNK4surf11SuRFBuilder13getTreeHeightEv($0)|0);
 $3 = ($2>>>0)>($1>>>0);
 if (!($3)) {
  $31 = 0;$32 = 0;
  tempRet0 = ($31);
  return ($32|0);
 }
 $4 = ((($0)) + 12|0);
 $5 = ((($0)) + 108|0);
 $$01516 = $1;$16 = 0;$17 = 0;
 while(1) {
  $6 = HEAP32[$4>>2]|0;
  $7 = (((($6) + (($$01516*12)|0)|0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + (($$01516*12)|0)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) - ($10))|0;
  $12 = $11 >>> 2;
  $13 = $12 & 536870911;
  $14 = (($11) + 1)|0;
  $15 = (($14) + ($13))|0;
  $18 = (_i64Add(($16|0),($17|0),($15|0),0)|0);
  $19 = tempRet0;
  $20 = HEAP32[$5>>2]|0;
  $21 = (($20) + ($$01516<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (__ZNK4surf11SuRFBuilder12getSuffixLenEv($0)|0);
  $24 = Math_imul($23, $22)|0;
  $25 = $24 >>> 3;
  $26 = (_i64Add(($18|0),($19|0),($25|0),0)|0);
  $27 = tempRet0;
  $28 = (($$01516) + 1)|0;
  $29 = (__ZNK4surf11SuRFBuilder13getTreeHeightEv($0)|0);
  $30 = ($28>>>0)<($29>>>0);
  if ($30) {
   $$01516 = $28;$16 = $26;$17 = $27;
  } else {
   $31 = $27;$32 = $26;
   break;
  }
 }
 tempRet0 = ($31);
 return ($32|0);
}
function __ZNSt3__213__vector_baseIyNS_9allocatorIyEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1;
 $3 = ($1|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($1|0)==($5|0);
 if (!($6)) {
  $scevgep = ((($5)) + -8|0);
  $7 = $scevgep;
  $8 = (($7) - ($2))|0;
  $9 = $8 >>> 3;
  $10 = $9 ^ -1;
  $scevgep28 = (($5) + ($10<<3)|0);
  HEAP32[$4>>2] = $scevgep28;
 }
 __ZdlPv($1);
 return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__213__vector_baseIhNS_9allocatorIhEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1|0)==($4|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -1|0);
   $8 = ($1|0)==($6|0);
   if ($8) {
    break;
   } else {
    $7 = $6;
   }
  }
  HEAP32[$3>>2] = $1;
 }
 __ZdlPv($1);
 return;
}
function __ZN4surf9BitvectorC2ERKNSt3__26vectorINS2_IyNS1_9allocatorIyEEEENS3_IS5_EEEERKNS2_IjNS3_IjEEEEjj($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$arith = 0, $$overflow = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ((($1)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$1>>2]|0;
  $9 = (($7) - ($8))|0;
  $10 = (($9|0) / 12)&-1;
  $$0 = $10;
 } else {
  $$0 = $4;
 }
 $11 = (__ZN4surf9Bitvector12totalNumBitsERKNSt3__26vectorIjNS1_9allocatorIjEEEEjj(0,$2,$3,$$0)|0);
 HEAP32[$0>>2] = $11;
 $12 = (__ZNK4surf9Bitvector8numWordsEv($0)|0);
 $$arith = $12<<3;
 $$overflow = ($12>>>0)>(536870911);
 $13 = $$overflow ? -1 : $$arith;
 $14 = (__Znaj($13)|0);
 $15 = ((($0)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = (__ZNK4surf9Bitvector8bitsSizeEv($0)|0);
 _memset(($14|0),0,($16|0))|0;
 __ZN4surf9Bitvector21concatenateBitvectorsERKNSt3__26vectorINS2_IyNS1_9allocatorIyEEEENS3_IS5_EEEERKNS2_IjNS3_IjEEEEjj($0,$1,$2,$3,$$0);
 return;
}
function __ZN4surf13BitvectorRank11initRankLutEv($0) {
 $0 = $0|0;
 var $$010$lcssa = 0, $$01011 = 0, $$012 = 0, $$arith = 0, $$lcssa = 0, $$overflow = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >>> 6;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4>>>0) / ($2>>>0))&-1;
 $6 = (($5) + 1)|0;
 $$arith = $6<<2;
 $$overflow = ($6>>>0)>(1073741823);
 $7 = $$overflow ? -1 : $$arith;
 $8 = (__Znaj($7)|0);
 $9 = ((($0)) + 12|0);
 HEAP32[$9>>2] = $8;
 $10 = ($2>>>0)>($4>>>0);
 if ($10) {
  $$010$lcssa = 0;$$lcssa = $8;
  $24 = (($$lcssa) + ($5<<2)|0);
  HEAP32[$24>>2] = $$010$lcssa;
  return;
 }
 $11 = ((($0)) + 4|0);
 $$01011 = 0;$$012 = 0;$13 = $8;
 while(1) {
  $12 = (($13) + ($$012<<2)|0);
  HEAP32[$12>>2] = $$01011;
  $14 = HEAP32[$11>>2]|0;
  $15 = Math_imul($$012, $3)|0;
  $16 = HEAP32[$1>>2]|0;
  $17 = (__ZN4surf14popcountLinearEPyyy($14,$15,0,$16,0)|0);
  $18 = tempRet0;
  $19 = (_i64Add(($17|0),($18|0),($$01011|0),0)|0);
  $20 = tempRet0;
  $21 = (($$012) + 1)|0;
  $22 = ($21>>>0)<($5>>>0);
  $23 = HEAP32[$9>>2]|0;
  if ($22) {
   $$01011 = $19;$$012 = $21;$13 = $23;
  } else {
   $$010$lcssa = $19;$$lcssa = $23;
   break;
  }
 }
 $24 = (($$lcssa) + ($5<<2)|0);
 HEAP32[$24>>2] = $$010$lcssa;
 return;
}
function __ZN4surf9BitvectorD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK4surf9Bitvector8bitsSizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNK4surf9Bitvector8numWordsEv($0)|0);
 $2 = $1 << 3;
 return ($2|0);
}
function __ZN4surf14popcountLinearEPyyy($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($3|0)==(0);
 $6 = ($4|0)==(0);
 $7 = $5 & $6;
 if ($7) {
  $60 = 0;$61 = 0;
  tempRet0 = ($60);
  return ($61|0);
 }
 $8 = (_i64Add(($3|0),($4|0),-1,-1)|0);
 $9 = tempRet0;
 $10 = (_bitshift64Lshr(($8|0),($9|0),6)|0);
 $11 = tempRet0;
 $12 = (($0) + ($1<<3)|0);
 $13 = ((($12)) + 56|0);
 $14 = ($10|0)==(0);
 $15 = ($11|0)==(0);
 $16 = $14 & $15;
 if ($16) {
  $56 = 0;$57 = 0;
 } else {
  $17 = 0;$18 = 0;$30 = 0;$31 = 0;
  while(1) {
   $19 = (_i64Add(($17|0),($18|0),($1|0),($2|0))|0);
   $20 = tempRet0;
   $21 = (($0) + ($19<<3)|0);
   $22 = $21;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   $25 = (($22) + 4)|0;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = (_llvm_ctpop_i64(($24|0),($27|0))|0);
   $29 = tempRet0;
   $32 = (_i64Add(($28|0),($29|0),($30|0),($31|0))|0);
   $33 = tempRet0;
   $34 = (_i64Add(($17|0),($18|0),1,0)|0);
   $35 = tempRet0;
   $36 = ($35>>>0)<($11>>>0);
   $37 = ($34>>>0)<($10>>>0);
   $38 = ($35|0)==($11|0);
   $39 = $38 & $37;
   $40 = $36 | $39;
   if ($40) {
    $17 = $34;$18 = $35;$30 = $32;$31 = $33;
   } else {
    $56 = $32;$57 = $33;
    break;
   }
  }
 }
 $41 = (_i64Add(($10|0),($11|0),($1|0),($2|0))|0);
 $42 = tempRet0;
 $43 = (($0) + ($41<<3)|0);
 $44 = $43;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = $8 & 63;
 $51 = $50 ^ 63;
 $52 = (_bitshift64Lshr(($46|0),($49|0),($51|0))|0);
 $53 = tempRet0;
 $54 = (_llvm_ctpop_i64(($52|0),($53|0))|0);
 $55 = tempRet0;
 $58 = (_i64Add(($54|0),($55|0),($56|0),($57|0))|0);
 $59 = tempRet0;
 $60 = $59;$61 = $58;
 tempRet0 = ($60);
 return ($61|0);
}
function __ZN4surf9BitvectorC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNSt3__213__vector_baseIjNS_9allocatorIjEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1;
 $3 = ($1|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($1|0)==($5|0);
 if (!($6)) {
  $scevgep = ((($5)) + -4|0);
  $7 = $scevgep;
  $8 = (($7) - ($2))|0;
  $9 = $8 >>> 2;
  $10 = $9 ^ -1;
  $scevgep28 = (($5) + ($10<<2)|0);
  HEAP32[$4>>2] = $scevgep28;
 }
 __ZdlPv($1);
 return;
}
function __ZNK4surf13BitvectorRank11rankLutSizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1>>>0) / ($3>>>0))&-1;
 $5 = $4 << 2;
 $6 = (($5) + 4)|0;
 return ($6|0);
}
function __ZN4surf15BitvectorSelect13initSelectLutEv($0) {
 $0 = $0|0;
 var $$ = 0, $$090103 = 0, $$091$lcssa = 0, $$091102 = 0, $$092101 = 0, $$1$lcssa = 0, $$197 = 0, $$arith = 0, $$overflow = 0, $$phi$trans$insert113 = 0, $$pre = 0, $$pre112 = 0, $$pre115 = 0, $$pre116 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond119 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 >>> 6;
 $6 = $4 & 63;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $$ = (($5) + ($8))|0;
 HEAP32[$1>>2] = 0;
 $9 = ((($1)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($1)) + 8|0);
 HEAP32[$10>>2] = 0;
 HEAP32[$2>>2] = 0;
 __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($1,$2);
 $11 = ((($0)) + 8|0);
 $12 = ($$|0)==(0);
 if ($12) {
  $$091$lcssa = 0;
 } else {
  $13 = HEAP32[$11>>2]|0;
  $14 = ((($0)) + 4|0);
  $$pre = HEAP32[$14>>2]|0;
  $$090103 = $13;$$091102 = 0;$$092101 = 0;$16 = $$pre;
  while(1) {
   $15 = (($16) + ($$092101<<3)|0);
   $17 = $15;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = (($17) + 4)|0;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = (_llvm_ctpop_i64(($19|0),($22|0))|0);
   $24 = tempRet0;
   $25 = (($$091102) + ($23))|0;
   $26 = ($$090103>>>0)>($25>>>0);
   if ($26) {
    $$1$lcssa = $$090103;$47 = $19;$48 = $22;$70 = $16;
   } else {
    $27 = $$092101 << 6;
    $$197 = $$090103;$29 = $19;$30 = $22;
    while(1) {
     $28 = (($$197) - ($$091102))|0;
     $31 = (__ZN4surf24select64_popcount_searchEyi($29,$30,$28)|0);
     $32 = (($31) + ($27))|0;
     HEAP32[$3>>2] = $32;
     $33 = HEAP32[$9>>2]|0;
     $34 = HEAP32[$10>>2]|0;
     $35 = ($33|0)==($34|0);
     if ($35) {
      __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIRKjEEvOT_($1,$3);
     } else {
      HEAP32[$33>>2] = $32;
      $36 = HEAP32[$9>>2]|0;
      $37 = ((($36)) + 4|0);
      HEAP32[$9>>2] = $37;
     }
     $38 = HEAP32[$11>>2]|0;
     $39 = (($38) + ($$197))|0;
     $40 = ($39>>>0)>($25>>>0);
     $$pre112 = HEAP32[$14>>2]|0;
     $$phi$trans$insert113 = (($$pre112) + ($$092101<<3)|0);
     $41 = $$phi$trans$insert113;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     if ($40) {
      $$1$lcssa = $39;$47 = $43;$48 = $46;$70 = $$pre112;
      break;
     } else {
      $$197 = $39;$29 = $43;$30 = $46;
     }
    }
   }
   $49 = (_llvm_ctpop_i64(($47|0),($48|0))|0);
   $50 = tempRet0;
   $51 = (($$091102) + ($49))|0;
   $52 = (($$092101) + 1)|0;
   $53 = ($52>>>0)<($$>>>0);
   if ($53) {
    $$090103 = $$1$lcssa;$$091102 = $51;$$092101 = $52;$16 = $70;
   } else {
    $$091$lcssa = $51;
    break;
   }
  }
 }
 $54 = ((($0)) + 12|0);
 HEAP32[$54>>2] = $$091$lcssa;
 $55 = HEAP32[$9>>2]|0;
 $56 = HEAP32[$1>>2]|0;
 $57 = (($55) - ($56))|0;
 $58 = $57 >> 2;
 $$arith = $58<<2;
 $$overflow = ($58>>>0)>(1073741823);
 $59 = $$overflow ? -1 : $$arith;
 $60 = $56;
 $61 = (__Znaj($59)|0);
 $62 = ((($0)) + 16|0);
 HEAP32[$62>>2] = $61;
 $63 = ($58|0)==(0);
 if ($63) {
  __ZNSt3__26vectorIjNS_9allocatorIjEEED2Ev($1);
  STACKTOP = sp;return;
 }
 $64 = HEAP32[$60>>2]|0;
 HEAP32[$61>>2] = $64;
 $exitcond119 = ($58|0)==(1);
 if ($exitcond119) {
  __ZNSt3__26vectorIjNS_9allocatorIjEEED2Ev($1);
  STACKTOP = sp;return;
 } else {
  $66 = 1;
 }
 while(1) {
  $$pre115 = HEAP32[$1>>2]|0;
  $$pre116 = HEAP32[$62>>2]|0;
  $65 = (($$pre115) + ($66<<2)|0);
  $67 = HEAP32[$65>>2]|0;
  $68 = (($$pre116) + ($66<<2)|0);
  HEAP32[$68>>2] = $67;
  $69 = (($66) + 1)|0;
  $exitcond = ($69|0)==($58|0);
  if ($exitcond) {
   break;
  } else {
   $66 = $69;
  }
 }
 __ZNSt3__26vectorIjNS_9allocatorIjEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN4surf24select64_popcount_searchEyi($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$016 = 0, $$$016$1 = 0, $$$016$2 = 0, $$$016$3 = 0, $$$016$4 = 0, $$$016$5 = 0, $$$018 = 0, $$$018$1 = 0, $$$018$2 = 0, $$$018$3 = 0, $$$018$4 = 0, $$$018$5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_llvm_ctpop_i64(($1|0),0)|0);
 $4 = tempRet0;
 $5 = ($3|0)<($2|0);
 $6 = $5 ? $3 : 0;
 $$$018 = (($2) - ($6))|0;
 $$$016 = $5 ? 31 : -1;
 $7 = $5 ? $0 : $1;
 $8 = $5 ? 0 : 0;
 $9 = (_bitshift64Lshr(($7|0),($8|0),16)|0);
 $10 = tempRet0;
 $11 = (_llvm_ctpop_i64(($9|0),($10|0))|0);
 $12 = tempRet0;
 $13 = ($$$018|0)>($11|0);
 $14 = $7 & 65535;
 $15 = $13 ? $11 : 0;
 $$$018$1 = (($$$018) - ($15))|0;
 $16 = $13 ? 16 : 0;
 $$$016$1 = (($16) + ($$$016))|0;
 $17 = $13 ? $14 : $9;
 $18 = $13 ? 0 : $10;
 $19 = (_bitshift64Lshr(($17|0),($18|0),8)|0);
 $20 = tempRet0;
 $21 = (_llvm_ctpop_i64(($19|0),($20|0))|0);
 $22 = tempRet0;
 $23 = ($$$018$1|0)>($21|0);
 $24 = $17 & 255;
 $25 = $23 ? $21 : 0;
 $$$018$2 = (($$$018$1) - ($25))|0;
 $26 = $23 ? 8 : 0;
 $$$016$2 = (($26) + ($$$016$1))|0;
 $27 = $23 ? $24 : $19;
 $28 = $23 ? 0 : $20;
 $29 = (_bitshift64Lshr(($27|0),($28|0),4)|0);
 $30 = tempRet0;
 $31 = (_llvm_ctpop_i64(($29|0),($30|0))|0);
 $32 = tempRet0;
 $33 = ($$$018$2|0)>($31|0);
 $34 = $27 & 15;
 $35 = $33 ? $31 : 0;
 $$$018$3 = (($$$018$2) - ($35))|0;
 $36 = $33 ? 4 : 0;
 $$$016$3 = (($36) + ($$$016$2))|0;
 $37 = $33 ? $34 : $29;
 $38 = $33 ? 0 : $30;
 $39 = (_bitshift64Lshr(($37|0),($38|0),2)|0);
 $40 = tempRet0;
 $41 = (_llvm_ctpop_i64(($39|0),($40|0))|0);
 $42 = tempRet0;
 $43 = ($$$018$3|0)>($41|0);
 $44 = $37 & 2;
 $45 = $43 ? $41 : 0;
 $$$018$4 = (($$$018$3) - ($45))|0;
 $46 = $43 ? 2 : 0;
 $$$016$4 = (($46) + ($$$016$3))|0;
 $47 = $43 ? $44 : $39;
 $48 = $43 ? 0 : $40;
 $49 = (_bitshift64Lshr(($47|0),($48|0),1)|0);
 $50 = tempRet0;
 $51 = (_llvm_ctpop_i64(($49|0),($50|0))|0);
 $52 = tempRet0;
 $53 = ($$$018$4|0)>($51|0);
 $54 = $53 ? $51 : 0;
 $$$018$5 = (($$$018$4) - ($54))|0;
 $55 = $53&1;
 $$$016$5 = (($$$016$4) + ($55))|0;
 $56 = (($$$016$5) + ($$$018$5))|0;
 return ($56|0);
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE9push_backERKj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIRKjEEvOT_($0,$1);
  return;
 } else {
  $7 = HEAP32[$1>>2]|0;
  HEAP32[$3>>2] = $7;
  $8 = HEAP32[$2>>2]|0;
  $9 = ((($8)) + 4|0);
  HEAP32[$2>>2] = $9;
  return;
 }
}
function __ZNKSt3__26vectorIjNS_9allocatorIjEEE4sizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 return ($5|0);
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIRKjEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated = 0, $$sroa$speculated$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorIjNS_9allocatorIjEEE8max_sizeEv($0)|0);
 $11 = ($9>>>0)>($10>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = HEAP32[$3>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = (($12) - ($13))|0;
  $15 = $14 >> 2;
  $16 = $10 >>> 1;
  $17 = ($15>>>0)<($16>>>0);
  $18 = $14 >> 1;
  $19 = ($18>>>0)<($9>>>0);
  $$sroa$speculated = $19 ? $9 : $18;
  $$sroa$speculated$ = $17 ? $$sroa$speculated : $10;
  $20 = HEAP32[$4>>2]|0;
  $21 = (($20) - ($13))|0;
  $22 = $21 >> 2;
  __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($2,$$sroa$speculated$,$22,$3);
  $23 = ((($2)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$1>>2]|0;
  HEAP32[$24>>2] = $25;
  $26 = HEAP32[$23>>2]|0;
  $27 = ((($26)) + 4|0);
  HEAP32[$23>>2] = $27;
  __ZNSt3__26vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($0,$2);
  __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(1073741823);
   if ($7) {
    $8 = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($8,2660);
    HEAP32[$8>>2] = (1860);
    ___cxa_throw(($8|0),(648|0),(18|0));
    // unreachable;
   } else {
    $9 = $1 << 2;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + ($2<<2)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + ($1<<2)|0);
 HEAP32[$4>>2] = $15;
 return;
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = $2;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - ($4))|0;
 $8 = $7 >> 2;
 $9 = ((($1)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (0 - ($8))|0;
 $12 = (($10) + ($11<<2)|0);
 HEAP32[$9>>2] = $12;
 $13 = ($7|0)>(0);
 if ($13) {
  _memcpy(($12|0),($2|0),($7|0))|0;
  $$pre = HEAP32[$9>>2]|0;
  $$pre$phiZ2D = $9;$16 = $$pre;
 } else {
  $14 = $12;
  $$pre$phiZ2D = $9;$16 = $14;
 }
 $15 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = $16;
 HEAP32[$$pre$phiZ2D>>2] = $15;
 $17 = ((($1)) + 8|0);
 $18 = HEAP32[$5>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$5>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = ((($1)) + 12|0);
 $21 = HEAP32[$3>>2]|0;
 $22 = HEAP32[$20>>2]|0;
 HEAP32[$3>>2] = $22;
 HEAP32[$20>>2] = $21;
 $23 = HEAP32[$$pre$phiZ2D>>2]|0;
 HEAP32[$1>>2] = $23;
 return;
}
function __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if (!($5)) {
  $6 = $2;
  $scevgep = ((($4)) + -4|0);
  $7 = $scevgep;
  $8 = (($7) - ($6))|0;
  $9 = $8 >>> 2;
  $10 = $9 ^ -1;
  $scevgep32 = (($4) + ($10<<2)|0);
  HEAP32[$3>>2] = $scevgep32;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZNKSt3__26vectorIjNS_9allocatorIjEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1073741823;
}
function __ZNK4surf15BitvectorSelect13selectLutSizeEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2>>>0) / ($4>>>0))&-1;
 $6 = $5 << 2;
 $7 = (($6) + 4)|0;
 return ($7|0);
}
function __ZN4surf10LoudsDense4IterC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0] = 0;
 $1 = ((($0)) + 16|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 return;
}
function __ZN4surf11LoudsSparse4IterC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$0>>0] = 0;
 $1 = ((($0)) + 20|0);
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 return;
}
function __ZN4surf10LoudsDense4IterC2EPS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$079 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 $4 = ((($0)) + 4|0);
 HEAP32[$0>>2] = 0;
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 8|0);
 $6 = ((($0)) + 16|0);
 $7 = ((($0)) + 20|0);
 $8 = ((($0)) + 24|0);
 $9 = ((($0)) + 28|0);
 $10 = ((($0)) + 32|0);
 $11 = ((($0)) + 36|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;HEAP32[$5+24>>2]=0|0;HEAP32[$5+28>>2]=0|0;HEAP8[$5+32>>0]=0|0;
 $12 = (__ZNK4surf10LoudsDense9getHeightEv($1)|0);
 $13 = tempRet0;
 $14 = ($12|0)==(0);
 $15 = ($13|0)==(0);
 $16 = $14 & $15;
 if ($16) {
  STACKTOP = sp;return;
 } else {
  $$079 = 0;
 }
 while(1) {
  HEAP8[$2>>0] = 0;
  $17 = HEAP32[$7>>2]|0;
  $18 = HEAP32[$8>>2]|0;
  $19 = ($17>>>0)<($18>>>0);
  if ($19) {
   HEAP8[$17>>0] = 0;
   $20 = HEAP32[$7>>2]|0;
   $21 = ((($20)) + 1|0);
   HEAP32[$7>>2] = $21;
  } else {
   __ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIhEEvOT_($6,$2);
  }
  HEAP32[$3>>2] = 0;
  $22 = HEAP32[$10>>2]|0;
  $23 = HEAP32[$11>>2]|0;
  $24 = ($22>>>0)<($23>>>0);
  if ($24) {
   HEAP32[$22>>2] = 0;
   $25 = HEAP32[$10>>2]|0;
   $26 = ((($25)) + 4|0);
   HEAP32[$10>>2] = $26;
  } else {
   __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($9,$3);
  }
  $27 = (($$079) + 1)|0;
  $28 = HEAP32[$4>>2]|0;
  $29 = (__ZNK4surf10LoudsDense9getHeightEv($28)|0);
  $30 = tempRet0;
  $31 = ($30>>>0)>(0);
  $32 = ($29>>>0)>($27>>>0);
  $33 = ($30|0)==(0);
  $34 = $33 & $32;
  $35 = $31 | $34;
  if ($35) {
   $$079 = $27;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN4surf10LoudsDense4IteraSEOS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 3|0;
 $$byval_copy = sp + 2|0;
 $2 = sp + 1|0;
 $3 = sp;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$1+12>>2]|0;
 $4 = ((($0)) + 16|0);
 $5 = ((($1)) + 16|0);
 ;HEAP8[$$byval_copy>>0]=HEAP8[$3>>0]|0;
 __ZNSt3__26vectorIhNS_9allocatorIhEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($4,$5,$$byval_copy);
 $6 = ((($0)) + 28|0);
 $7 = ((($1)) + 28|0);
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$2>>0]|0;
 __ZNSt3__26vectorIjNS_9allocatorIjEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($6,$7,$$byval_copy1);
 $8 = ((($1)) + 40|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 & 1;
 $11 = ((($0)) + 40|0);
 HEAP8[$11>>0] = $10;
 STACKTOP = sp;return ($0|0);
}
function __ZN4surf10LoudsDense4IterD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 __ZNSt3__26vectorIjNS_9allocatorIjEEED2Ev($1);
 $2 = ((($0)) + 16|0);
 __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($2);
 return;
}
function __ZN4surf11LoudsSparse4IterC2EPS0_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$079 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP8[$0>>0] = 0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($0)) + 12|0);
 $6 = ((($0)) + 20|0);
 $7 = ((($0)) + 24|0);
 $8 = ((($0)) + 28|0);
 $9 = ((($0)) + 32|0);
 $10 = ((($0)) + 36|0);
 $11 = ((($0)) + 40|0);
 ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;HEAP32[$5+24>>2]=0|0;HEAP32[$5+28>>2]=0|0;HEAP8[$5+32>>0]=0|0;
 $12 = (__ZNK4surf11LoudsSparse13getStartLevelEv($1)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$4>>2]|0;
 $15 = (__ZNK4surf11LoudsSparse9getHeightEv($14)|0);
 $16 = ($12>>>0)<($15>>>0);
 if ($16) {
  $$079 = $12;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  HEAP8[$2>>0] = 0;
  $17 = HEAP32[$7>>2]|0;
  $18 = HEAP32[$8>>2]|0;
  $19 = ($17>>>0)<($18>>>0);
  if ($19) {
   HEAP8[$17>>0] = 0;
   $20 = HEAP32[$7>>2]|0;
   $21 = ((($20)) + 1|0);
   HEAP32[$7>>2] = $21;
  } else {
   __ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIhEEvOT_($6,$2);
  }
  HEAP32[$3>>2] = 0;
  $22 = HEAP32[$10>>2]|0;
  $23 = HEAP32[$11>>2]|0;
  $24 = ($22>>>0)<($23>>>0);
  if ($24) {
   HEAP32[$22>>2] = 0;
   $25 = HEAP32[$10>>2]|0;
   $26 = ((($25)) + 4|0);
   HEAP32[$10>>2] = $26;
  } else {
   __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($9,$3);
  }
  $27 = (($$079) + 1)|0;
  $28 = HEAP32[$4>>2]|0;
  $29 = (__ZNK4surf11LoudsSparse9getHeightEv($28)|0);
  $30 = ($27>>>0)<($29>>>0);
  if ($30) {
   $$079 = $27;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN4surf11LoudsSparse4IteraSEOS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy1 = sp + 3|0;
 $$byval_copy = sp + 2|0;
 $2 = sp + 1|0;
 $3 = sp;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$1+16>>2]|0;
 $4 = ((($0)) + 20|0);
 $5 = ((($1)) + 20|0);
 ;HEAP8[$$byval_copy>>0]=HEAP8[$3>>0]|0;
 __ZNSt3__26vectorIhNS_9allocatorIhEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($4,$5,$$byval_copy);
 $6 = ((($0)) + 32|0);
 $7 = ((($1)) + 32|0);
 ;HEAP8[$$byval_copy1>>0]=HEAP8[$2>>0]|0;
 __ZNSt3__26vectorIjNS_9allocatorIjEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($6,$7,$$byval_copy1);
 $8 = ((($1)) + 44|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 & 1;
 $11 = ((($0)) + 44|0);
 HEAP8[$11>>0] = $10;
 STACKTOP = sp;return ($0|0);
}
function __ZN4surf11LoudsSparse4IterD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 __ZNSt3__26vectorIjNS_9allocatorIjEEED2Ev($1);
 $2 = ((($0)) + 20|0);
 __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($2);
 return;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26vectorIhNS_9allocatorIhEEE10deallocateEv($0);
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $4;
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($1)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$3>>2] = $9;
 HEAP32[$8>>2] = 0;
 HEAP32[$5>>2] = 0;
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE10deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1|0)==($4|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -1|0);
   $8 = ($1|0)==($6|0);
   if ($8) {
    break;
   } else {
    $7 = $6;
   }
  }
  HEAP32[$3>>2] = $1;
 }
 $9 = ((($0)) + 8|0);
 __ZdlPv($1);
 HEAP32[$9>>2] = 0;
 HEAP32[$3>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE13__move_assignERS3_NS_17integral_constantIbLb1EEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__26vectorIjNS_9allocatorIjEEE10deallocateEv($0);
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $4;
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = ((($1)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$3>>2] = $9;
 HEAP32[$8>>2] = 0;
 HEAP32[$5>>2] = 0;
 HEAP32[$1>>2] = 0;
 return;
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE10deallocateEv($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1;
 $3 = ($1|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($1|0)==($5|0);
 if (!($6)) {
  $scevgep = ((($5)) + -4|0);
  $7 = $scevgep;
  $8 = (($7) - ($2))|0;
  $9 = $8 >>> 2;
  $10 = $9 ^ -1;
  $scevgep53 = (($5) + ($10<<2)|0);
  HEAP32[$4>>2] = $scevgep53;
 }
 $11 = ((($0)) + 8|0);
 __ZdlPv($1);
 HEAP32[$11>>2] = 0;
 HEAP32[$4>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function __ZNSt3__26vectorIbNS_9allocatorIbEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 __ZdlPv($1);
 return;
}
function __ZNSt3__26vectorINS0_IyNS_9allocatorIyEEEENS1_IS3_EEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213__vector_baseINS_6vectorIyNS_9allocatorIyEEEENS2_IS4_EEED2Ev($0);
 return;
}
function __ZNSt3__26vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213__vector_baseINS_6vectorIhNS_9allocatorIhEEEENS2_IS4_EEED2Ev($0);
 return;
}
function __ZNSt3__213__vector_baseINS_6vectorIyNS_9allocatorIyEEEENS2_IS4_EEED2Ev($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1|0)==($4|0);
 if ($5) {
  $10 = $1;
 } else {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -12|0);
   HEAP32[$3>>2] = $6;
   __ZNSt3__26vectorIyNS_9allocatorIyEEED2Ev($6);
   $8 = HEAP32[$3>>2]|0;
   $9 = ($1|0)==($8|0);
   if ($9) {
    break;
   } else {
    $7 = $8;
   }
  }
  $$pre = HEAP32[$0>>2]|0;
  $10 = $$pre;
 }
 __ZdlPv($10);
 return;
}
function __ZNSt3__213__vector_baseINS_6vectorIhNS_9allocatorIhEEEENS2_IS4_EEED2Ev($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1|0)==($4|0);
 if ($5) {
  $10 = $1;
 } else {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -12|0);
   HEAP32[$3>>2] = $6;
   __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($6);
   $8 = HEAP32[$3>>2]|0;
   $9 = ($1|0)==($8|0);
   if ($9) {
    break;
   } else {
    $7 = $8;
   }
  }
  $$pre = HEAP32[$0>>2]|0;
  $10 = $$pre;
 }
 __ZdlPv($10);
 return;
}
function __ZN4surf10LoudsDense7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 __ZN4surf13BitvectorRank7destroyEv($2);
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZN4surf13BitvectorRank7destroyEv($4);
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 __ZN4surf13BitvectorRank7destroyEv($6);
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 __ZN4surf15BitvectorSuffix7destroyEv($8);
 return;
}
function __ZN4surf11LoudsSparse7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 __ZN4surf11LabelVector7destroyEv($2);
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 __ZN4surf13BitvectorRank7destroyEv($4);
 $5 = ((($0)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 __ZN4surf15BitvectorSelect7destroyEv($6);
 $7 = ((($0)) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 __ZN4surf15BitvectorSuffix7destroyEv($8);
 return;
}
function __ZN4surf13BitvectorRank7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __ZdaPv($2);
 }
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  return;
 }
 __ZdaPv($5);
 return;
}
function __ZN4surf15BitvectorSuffix7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  return;
 }
 __ZdaPv($5);
 return;
}
function __ZN4surf11LabelVector7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 __ZdaPv($2);
 return;
}
function __ZN4surf15BitvectorSelect7destroyEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  __ZdaPv($2);
 }
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  return;
 }
 __ZdaPv($5);
 return;
}
function __ZN4surf23SuRFBuilderAccessHelper13copy_nested64IyEEvRNSt3__26vectorIjNS2_9allocatorIjEEEES7_RKNS3_INS3_IT_NS4_IS8_EEEENS4_ISA_EEEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $$sroa$0212$0218 = 0, $$sroa$0215$0219 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep233 = 0, $scevgep234 = 0, $scevgep238 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$6>>2]|0;
 $9 = ($7|0)==($8|0);
 if (!($9)) {
  $10 = $7;
  $scevgep234 = ((($8)) + -4|0);
  $11 = $scevgep234;
  $12 = (($11) - ($10))|0;
  $13 = $12 >>> 2;
  $14 = $13 ^ -1;
  $scevgep238 = (($8) + ($14<<2)|0);
  HEAP32[$6>>2] = $scevgep238;
 }
 $15 = ((($0)) + 8|0);
 $16 = ((($1)) + 4|0);
 $17 = HEAP32[$1>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 $19 = ($17|0)==($18|0);
 if (!($19)) {
  $20 = $17;
  $scevgep = ((($18)) + -4|0);
  $21 = $scevgep;
  $22 = (($21) - ($20))|0;
  $23 = $22 >>> 2;
  $24 = $23 ^ -1;
  $scevgep233 = (($18) + ($24<<2)|0);
  HEAP32[$16>>2] = $scevgep233;
 }
 $25 = ((($1)) + 8|0);
 $26 = HEAP32[$2>>2]|0;
 $27 = ((($2)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($26|0)==($28|0);
 if ($29) {
  STACKTOP = sp;return;
 } else {
  $$sroa$0215$0219 = $26;
 }
 while(1) {
  $30 = ((($$sroa$0215$0219)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$$sroa$0215$0219>>2]|0;
  $33 = (($31) - ($32))|0;
  $34 = $33 >> 3;
  HEAP32[$3>>2] = $34;
  $35 = HEAP32[$6>>2]|0;
  $36 = HEAP32[$15>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   HEAP32[$35>>2] = $34;
   $38 = HEAP32[$6>>2]|0;
   $39 = ((($38)) + 4|0);
   HEAP32[$6>>2] = $39;
  } else {
   __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($0,$3);
  }
  $40 = HEAP32[$$sroa$0215$0219>>2]|0;
  $41 = HEAP32[$30>>2]|0;
  $42 = ($40|0)==($41|0);
  if (!($42)) {
   $$sroa$0212$0218 = $40;
   while(1) {
    $43 = $$sroa$0212$0218;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($43) + 4)|0;
    $47 = $46;
    $48 = HEAP32[$47>>2]|0;
    HEAP32[$4>>2] = $48;
    $49 = HEAP32[$16>>2]|0;
    $50 = HEAP32[$25>>2]|0;
    $51 = ($49>>>0)<($50>>>0);
    if ($51) {
     HEAP32[$49>>2] = $48;
     $52 = HEAP32[$16>>2]|0;
     $53 = ((($52)) + 4|0);
     HEAP32[$16>>2] = $53;
     $61 = $53;
    } else {
     __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($1,$4);
     $$pre = HEAP32[$16>>2]|0;
     $61 = $$pre;
    }
    $54 = $$sroa$0212$0218;
    $55 = $54;
    $56 = HEAP32[$55>>2]|0;
    $57 = (($54) + 4)|0;
    $58 = $57;
    $59 = HEAP32[$58>>2]|0;
    HEAP32[$5>>2] = $56;
    $60 = HEAP32[$25>>2]|0;
    $62 = ($61>>>0)<($60>>>0);
    if ($62) {
     HEAP32[$61>>2] = $56;
     $63 = HEAP32[$16>>2]|0;
     $64 = ((($63)) + 4|0);
     HEAP32[$16>>2] = $64;
    } else {
     __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($1,$5);
    }
    $65 = ((($$sroa$0212$0218)) + 8|0);
    $66 = ($65|0)==($41|0);
    if ($66) {
     break;
    } else {
     $$sroa$0212$0218 = $65;
    }
   }
  }
  $67 = ((($$sroa$0215$0219)) + 12|0);
  $68 = ($67|0)==($28|0);
  if ($68) {
   break;
  } else {
   $$sroa$0215$0219 = $67;
  }
 }
 STACKTOP = sp;return;
}
function __ZN4surf23SuRFBuilderAccessHelper11copy_nestedIhEEvRNSt3__26vectorIjNS2_9allocatorIjEEEES7_RKNS3_INS3_IT_NS4_IS8_EEEENS4_ISA_EEEE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa$0182$0188 = 0, $$sroa$0185$0189 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep203 = 0, $scevgep204 = 0, $scevgep208 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$5>>2]|0;
 $8 = ($6|0)==($7|0);
 if (!($8)) {
  $9 = $6;
  $scevgep204 = ((($7)) + -4|0);
  $10 = $scevgep204;
  $11 = (($10) - ($9))|0;
  $12 = $11 >>> 2;
  $13 = $12 ^ -1;
  $scevgep208 = (($7) + ($13<<2)|0);
  HEAP32[$5>>2] = $scevgep208;
 }
 $14 = ((($0)) + 8|0);
 $15 = ((($1)) + 4|0);
 $16 = HEAP32[$1>>2]|0;
 $17 = HEAP32[$15>>2]|0;
 $18 = ($16|0)==($17|0);
 if (!($18)) {
  $19 = $16;
  $scevgep = ((($17)) + -4|0);
  $20 = $scevgep;
  $21 = (($20) - ($19))|0;
  $22 = $21 >>> 2;
  $23 = $22 ^ -1;
  $scevgep203 = (($17) + ($23<<2)|0);
  HEAP32[$15>>2] = $scevgep203;
 }
 $24 = ((($1)) + 8|0);
 $25 = HEAP32[$2>>2]|0;
 $26 = ((($2)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($25|0)==($27|0);
 if ($28) {
  STACKTOP = sp;return;
 } else {
  $$sroa$0185$0189 = $25;
 }
 while(1) {
  $29 = ((($$sroa$0185$0189)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$$sroa$0185$0189>>2]|0;
  $32 = (($30) - ($31))|0;
  HEAP32[$3>>2] = $32;
  $33 = HEAP32[$5>>2]|0;
  $34 = HEAP32[$14>>2]|0;
  $35 = ($33>>>0)<($34>>>0);
  if ($35) {
   HEAP32[$33>>2] = $32;
   $36 = HEAP32[$5>>2]|0;
   $37 = ((($36)) + 4|0);
   HEAP32[$5>>2] = $37;
  } else {
   __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($0,$3);
  }
  $38 = HEAP32[$$sroa$0185$0189>>2]|0;
  $39 = HEAP32[$29>>2]|0;
  $40 = ($38|0)==($39|0);
  if (!($40)) {
   $$sroa$0182$0188 = $38;
   while(1) {
    $41 = HEAP8[$$sroa$0182$0188>>0]|0;
    $42 = $41&255;
    HEAP32[$4>>2] = $42;
    $43 = HEAP32[$15>>2]|0;
    $44 = HEAP32[$24>>2]|0;
    $45 = ($43>>>0)<($44>>>0);
    if ($45) {
     HEAP32[$43>>2] = $42;
     $46 = HEAP32[$15>>2]|0;
     $47 = ((($46)) + 4|0);
     HEAP32[$15>>2] = $47;
    } else {
     __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($1,$4);
    }
    $48 = ((($$sroa$0182$0188)) + 1|0);
    $49 = ($48|0)==($39|0);
    if ($49) {
     break;
    } else {
     $$sroa$0182$0188 = $48;
    }
   }
  }
  $50 = ((($$sroa$0185$0189)) + 12|0);
  $51 = ($50|0)==($27|0);
  if ($51) {
   break;
  } else {
   $$sroa$0185$0189 = $50;
  }
 }
 STACKTOP = sp;return;
}
function __ZN4surf23SuRFBuilderAccessHelper4copyIjEEvRNSt3__26vectorIjNS2_9allocatorIjEEEERKNS3_IT_NS4_IS8_EEEE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$sroa$089$092 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$0>>2]|0;
 $5 = HEAP32[$3>>2]|0;
 $6 = ($4|0)==($5|0);
 if ($6) {
  $25 = $4;
 } else {
  $7 = $4;
  $scevgep = ((($5)) + -4|0);
  $8 = $scevgep;
  $9 = (($8) - ($7))|0;
  $10 = $9 >>> 2;
  $11 = $10 ^ -1;
  $scevgep98 = (($5) + ($11<<2)|0);
  HEAP32[$3>>2] = $scevgep98;
  $25 = $scevgep98;
 }
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$1>>2]|0;
 $14 = ((($1)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($13|0)==($15|0);
 if ($16) {
  STACKTOP = sp;return;
 } else {
  $$sroa$089$092 = $13;$19 = $25;
 }
 while(1) {
  $17 = HEAP32[$$sroa$089$092>>2]|0;
  HEAP32[$2>>2] = $17;
  $18 = HEAP32[$12>>2]|0;
  $20 = ($19>>>0)<($18>>>0);
  if ($20) {
   HEAP32[$19>>2] = $17;
   $21 = HEAP32[$3>>2]|0;
   $22 = ((($21)) + 4|0);
   HEAP32[$3>>2] = $22;
  } else {
   __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($0,$2);
  }
  $23 = ((($$sroa$089$092)) + 4|0);
  $24 = ($23|0)==($15|0);
  if ($24) {
   break;
  }
  $$pre = HEAP32[$3>>2]|0;
  $$sroa$089$092 = $23;$19 = $$pre;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memcpy(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 HEAP8[$0>>0] = $2;
 return;
}
function __ZNSt3__211char_traitsIcE7compareEPKcS3_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
 } else {
  $4 = (_memcmp($0,$1,$2)|0);
  $$0 = $4;
 }
 return ($$0|0);
}
function __ZNSt3__26vectorIyNS_9allocatorIyEEE21__push_back_slow_pathIyEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated = 0, $$sroa$speculated$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 3;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorIyNS_9allocatorIyEEE8max_sizeEv($0)|0);
 $11 = ($9>>>0)>($10>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = HEAP32[$3>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = (($12) - ($13))|0;
  $15 = $14 >> 3;
  $16 = $10 >>> 1;
  $17 = ($15>>>0)<($16>>>0);
  $18 = $14 >> 2;
  $19 = ($18>>>0)<($9>>>0);
  $$sroa$speculated = $19 ? $9 : $18;
  $$sroa$speculated$ = $17 ? $$sroa$speculated : $10;
  $20 = HEAP32[$4>>2]|0;
  $21 = (($20) - ($13))|0;
  $22 = $21 >> 3;
  __ZNSt3__214__split_bufferIyRNS_9allocatorIyEEEC2EjjS3_($2,$$sroa$speculated$,$22,$3);
  $23 = ((($2)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $1;
  $26 = $25;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($25) + 4)|0;
  $29 = $28;
  $30 = HEAP32[$29>>2]|0;
  $31 = $24;
  $32 = $31;
  HEAP32[$32>>2] = $27;
  $33 = (($31) + 4)|0;
  $34 = $33;
  HEAP32[$34>>2] = $30;
  $35 = HEAP32[$23>>2]|0;
  $36 = ((($35)) + 8|0);
  HEAP32[$23>>2] = $36;
  __ZNSt3__26vectorIyNS_9allocatorIyEEE26__swap_out_circular_bufferERNS_14__split_bufferIyRS2_EE($0,$2);
  __ZNSt3__214__split_bufferIyRNS_9allocatorIyEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__214__split_bufferIyRNS_9allocatorIyEEEC2EjjS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(536870911);
   if ($7) {
    $8 = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($8,2660);
    HEAP32[$8>>2] = (1860);
    ___cxa_throw(($8|0),(648|0),(18|0));
    // unreachable;
   } else {
    $9 = $1 << 3;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + ($2<<3)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + ($1<<3)|0);
 HEAP32[$4>>2] = $15;
 return;
}
function __ZNSt3__26vectorIyNS_9allocatorIyEEE26__swap_out_circular_bufferERNS_14__split_bufferIyRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = $2;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - ($4))|0;
 $8 = $7 >> 3;
 $9 = ((($1)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (0 - ($8))|0;
 $12 = (($10) + ($11<<3)|0);
 HEAP32[$9>>2] = $12;
 $13 = ($7|0)>(0);
 if ($13) {
  _memcpy(($12|0),($2|0),($7|0))|0;
  $$pre = HEAP32[$9>>2]|0;
  $$pre$phiZ2D = $9;$16 = $$pre;
 } else {
  $14 = $12;
  $$pre$phiZ2D = $9;$16 = $14;
 }
 $15 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = $16;
 HEAP32[$$pre$phiZ2D>>2] = $15;
 $17 = ((($1)) + 8|0);
 $18 = HEAP32[$5>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$5>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = ((($1)) + 12|0);
 $21 = HEAP32[$3>>2]|0;
 $22 = HEAP32[$20>>2]|0;
 HEAP32[$3>>2] = $22;
 HEAP32[$20>>2] = $21;
 $23 = HEAP32[$$pre$phiZ2D>>2]|0;
 HEAP32[$1>>2] = $23;
 return;
}
function __ZNSt3__214__split_bufferIyRNS_9allocatorIyEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, $scevgep32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if (!($5)) {
  $6 = $2;
  $scevgep = ((($4)) + -8|0);
  $7 = $scevgep;
  $8 = (($7) - ($6))|0;
  $9 = $8 >>> 3;
  $10 = $9 ^ -1;
  $scevgep32 = (($4) + ($10<<3)|0);
  HEAP32[$3>>2] = $scevgep32;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 __ZdlPv($11);
 return;
}
function __ZNKSt3__26vectorIyNS_9allocatorIyEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 536870911;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE21__push_back_slow_pathIhEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated = 0, $$sroa$speculated$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = (($7) + 1)|0;
 $9 = (__ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($0)|0);
 $10 = ($8>>>0)>($9>>>0);
 if ($10) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = HEAP32[$0>>2]|0;
  $13 = (($11) - ($12))|0;
  $14 = $9 >>> 1;
  $15 = ($13>>>0)<($14>>>0);
  $16 = $13 << 1;
  $17 = ($16>>>0)<($8>>>0);
  $$sroa$speculated = $17 ? $8 : $16;
  $$sroa$speculated$ = $15 ? $$sroa$speculated : $9;
  $18 = HEAP32[$4>>2]|0;
  $19 = (($18) - ($12))|0;
  __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEEC2EjjS3_($2,$$sroa$speculated$,$19,$3);
  $20 = ((($2)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP8[$1>>0]|0;
  HEAP8[$21>>0] = $22;
  $23 = HEAP32[$20>>2]|0;
  $24 = ((($23)) + 1|0);
  HEAP32[$20>>2] = $24;
  __ZNSt3__26vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE($0,$2);
  __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEEC2EjjS3_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 if ($6) {
  $8 = 0;
 } else {
  $7 = (__Znwj($1)|0);
  $8 = $7;
 }
 HEAP32[$0>>2] = $8;
 $9 = (($8) + ($2)|0);
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($0)) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($1)|0);
 HEAP32[$4>>2] = $12;
 return;
}
function __ZNSt3__26vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = $2;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - ($4))|0;
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (0 - ($7))|0;
 $11 = (($9) + ($10)|0);
 HEAP32[$8>>2] = $11;
 $12 = ($7|0)>(0);
 if ($12) {
  _memcpy(($11|0),($2|0),($7|0))|0;
  $$pre = HEAP32[$8>>2]|0;
  $$pre$phiZ2D = $8;$15 = $$pre;
 } else {
  $13 = $11;
  $$pre$phiZ2D = $8;$15 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = $15;
 HEAP32[$$pre$phiZ2D>>2] = $14;
 $16 = ((($1)) + 8|0);
 $17 = HEAP32[$5>>2]|0;
 $18 = HEAP32[$16>>2]|0;
 HEAP32[$5>>2] = $18;
 HEAP32[$16>>2] = $17;
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$3>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$3>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = HEAP32[$$pre$phiZ2D>>2]|0;
 HEAP32[$1>>2] = $22;
 return;
}
function __ZNSt3__214__split_bufferIhRNS_9allocatorIhEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -1|0);
   $8 = ($2|0)==($6|0);
   if ($8) {
    break;
   } else {
    $7 = $6;
   }
  }
  HEAP32[$3>>2] = $2;
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  return;
 }
 __ZdlPv($9);
 return;
}
function __ZNKSt3__26vectorIhNS_9allocatorIhEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNSt3__26vectorINS0_IyNS_9allocatorIyEEEENS1_IS3_EEE21__push_back_slow_pathIS3_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated = 0, $$sroa$speculated$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = (($7|0) / 12)&-1;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorINS0_IyNS_9allocatorIyEEEENS1_IS3_EEE8max_sizeEv($0)|0);
 $11 = ($9>>>0)>($10>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = HEAP32[$3>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = (($12) - ($13))|0;
  $15 = (($14|0) / 12)&-1;
  $16 = $10 >>> 1;
  $17 = ($15>>>0)<($16>>>0);
  $18 = $15 << 1;
  $19 = ($18>>>0)<($9>>>0);
  $$sroa$speculated = $19 ? $9 : $18;
  $$sroa$speculated$ = $17 ? $$sroa$speculated : $10;
  $20 = HEAP32[$4>>2]|0;
  $21 = (($20) - ($13))|0;
  $22 = (($21|0) / 12)&-1;
  __ZNSt3__214__split_bufferINS_6vectorIyNS_9allocatorIyEEEERNS2_IS4_EEEC2EjjS6_($2,$$sroa$speculated$,$22,$3);
  $23 = ((($2)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$24>>2] = 0;
  $25 = ((($24)) + 4|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($24)) + 8|0);
  HEAP32[$26>>2] = 0;
  $27 = HEAP32[$1>>2]|0;
  HEAP32[$24>>2] = $27;
  $28 = ((($1)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$25>>2] = $29;
  $30 = ((($1)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  HEAP32[$26>>2] = $31;
  HEAP32[$30>>2] = 0;
  HEAP32[$28>>2] = 0;
  HEAP32[$1>>2] = 0;
  $32 = HEAP32[$23>>2]|0;
  $33 = ((($32)) + 12|0);
  HEAP32[$23>>2] = $33;
  __ZNSt3__26vectorINS0_IyNS_9allocatorIyEEEENS1_IS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS4_EE($0,$2);
  __ZNSt3__214__split_bufferINS_6vectorIyNS_9allocatorIyEEEERNS2_IS4_EEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__214__split_bufferINS_6vectorIyNS_9allocatorIyEEEERNS2_IS4_EEEC2EjjS6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(357913941);
   if ($7) {
    $8 = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($8,2660);
    HEAP32[$8>>2] = (1860);
    ___cxa_throw(($8|0),(648|0),(18|0));
    // unreachable;
   } else {
    $9 = ($1*12)|0;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + (($2*12)|0)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + (($1*12)|0)|0);
 HEAP32[$4>>2] = $15;
 return;
}
function __ZNSt3__26vectorINS0_IyNS_9allocatorIyEEEENS1_IS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS4_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0139 = 0, $$pre = 0, $$pre$phi149Z2D = 0, $$pre$phiZ2D = 0, $$pre144 = 0, $$pre146 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 4|0);
 $7 = ($5|0)==($2|0);
 if ($7) {
  $8 = $2;
  $$pre146 = HEAP32[$6>>2]|0;
  $$pre$phi149Z2D = $6;$$pre$phiZ2D = $0;$23 = $$pre146;$24 = $8;
 } else {
  $$pre = HEAP32[$6>>2]|0;
  $$0139 = $5;$11 = $$pre;
  while(1) {
   $9 = ((($$0139)) + -12|0);
   $10 = ((($11)) + -12|0);
   HEAP32[$10>>2] = 0;
   $12 = ((($11)) + -8|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($11)) + -4|0);
   HEAP32[$13>>2] = 0;
   $14 = HEAP32[$9>>2]|0;
   HEAP32[$10>>2] = $14;
   $15 = ((($$0139)) + -8|0);
   $16 = HEAP32[$15>>2]|0;
   HEAP32[$12>>2] = $16;
   $17 = ((($$0139)) + -4|0);
   $18 = HEAP32[$17>>2]|0;
   HEAP32[$13>>2] = $18;
   HEAP32[$17>>2] = 0;
   HEAP32[$15>>2] = 0;
   HEAP32[$9>>2] = 0;
   $19 = HEAP32[$6>>2]|0;
   $20 = ((($19)) + -12|0);
   HEAP32[$6>>2] = $20;
   $21 = ($9|0)==($2|0);
   if ($21) {
    break;
   } else {
    $$0139 = $9;$11 = $20;
   }
  }
  $22 = $20;
  $$pre144 = HEAP32[$0>>2]|0;
  $$pre$phi149Z2D = $6;$$pre$phiZ2D = $0;$23 = $22;$24 = $$pre144;
 }
 HEAP32[$$pre$phiZ2D>>2] = $23;
 HEAP32[$$pre$phi149Z2D>>2] = $24;
 $25 = ((($1)) + 8|0);
 $26 = HEAP32[$4>>2]|0;
 $27 = HEAP32[$25>>2]|0;
 HEAP32[$4>>2] = $27;
 HEAP32[$25>>2] = $26;
 $28 = ((($1)) + 12|0);
 $29 = HEAP32[$3>>2]|0;
 $30 = HEAP32[$28>>2]|0;
 HEAP32[$3>>2] = $30;
 HEAP32[$28>>2] = $29;
 $31 = HEAP32[$$pre$phi149Z2D>>2]|0;
 HEAP32[$1>>2] = $31;
 return;
}
function __ZNSt3__214__split_bufferINS_6vectorIyNS_9allocatorIyEEEERNS2_IS4_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -12|0);
   HEAP32[$3>>2] = $6;
   __ZNSt3__26vectorIyNS_9allocatorIyEEED2Ev($6);
   $8 = HEAP32[$3>>2]|0;
   $9 = ($2|0)==($8|0);
   if ($9) {
    break;
   } else {
    $7 = $8;
   }
  }
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  return;
 }
 __ZdlPv($10);
 return;
}
function __ZNKSt3__26vectorINS0_IyNS_9allocatorIyEEEENS1_IS3_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 357913941;
}
function __ZNSt3__26vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE21__push_back_slow_pathIS3_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated = 0, $$sroa$speculated$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = (($7|0) / 12)&-1;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8max_sizeEv($0)|0);
 $11 = ($9>>>0)>($10>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = HEAP32[$3>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = (($12) - ($13))|0;
  $15 = (($14|0) / 12)&-1;
  $16 = $10 >>> 1;
  $17 = ($15>>>0)<($16>>>0);
  $18 = $15 << 1;
  $19 = ($18>>>0)<($9>>>0);
  $$sroa$speculated = $19 ? $9 : $18;
  $$sroa$speculated$ = $17 ? $$sroa$speculated : $10;
  $20 = HEAP32[$4>>2]|0;
  $21 = (($20) - ($13))|0;
  $22 = (($21|0) / 12)&-1;
  __ZNSt3__214__split_bufferINS_6vectorIhNS_9allocatorIhEEEERNS2_IS4_EEEC2EjjS6_($2,$$sroa$speculated$,$22,$3);
  $23 = ((($2)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$24>>2] = 0;
  $25 = ((($24)) + 4|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($24)) + 8|0);
  HEAP32[$26>>2] = 0;
  $27 = HEAP32[$1>>2]|0;
  HEAP32[$24>>2] = $27;
  $28 = ((($1)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$25>>2] = $29;
  $30 = ((($1)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  HEAP32[$26>>2] = $31;
  HEAP32[$30>>2] = 0;
  HEAP32[$28>>2] = 0;
  HEAP32[$1>>2] = 0;
  $32 = HEAP32[$23>>2]|0;
  $33 = ((($32)) + 12|0);
  HEAP32[$23>>2] = $33;
  __ZNSt3__26vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS4_EE($0,$2);
  __ZNSt3__214__split_bufferINS_6vectorIhNS_9allocatorIhEEEERNS2_IS4_EEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__214__split_bufferINS_6vectorIhNS_9allocatorIhEEEERNS2_IS4_EEEC2EjjS6_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(357913941);
   if ($7) {
    $8 = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($8,2660);
    HEAP32[$8>>2] = (1860);
    ___cxa_throw(($8|0),(648|0),(18|0));
    // unreachable;
   } else {
    $9 = ($1*12)|0;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + (($2*12)|0)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + (($1*12)|0)|0);
 HEAP32[$4>>2] = $15;
 return;
}
function __ZNSt3__26vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS4_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0139 = 0, $$pre = 0, $$pre$phi149Z2D = 0, $$pre$phiZ2D = 0, $$pre144 = 0, $$pre146 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 4|0);
 $7 = ($5|0)==($2|0);
 if ($7) {
  $8 = $2;
  $$pre146 = HEAP32[$6>>2]|0;
  $$pre$phi149Z2D = $6;$$pre$phiZ2D = $0;$23 = $$pre146;$24 = $8;
 } else {
  $$pre = HEAP32[$6>>2]|0;
  $$0139 = $5;$11 = $$pre;
  while(1) {
   $9 = ((($$0139)) + -12|0);
   $10 = ((($11)) + -12|0);
   HEAP32[$10>>2] = 0;
   $12 = ((($11)) + -8|0);
   HEAP32[$12>>2] = 0;
   $13 = ((($11)) + -4|0);
   HEAP32[$13>>2] = 0;
   $14 = HEAP32[$9>>2]|0;
   HEAP32[$10>>2] = $14;
   $15 = ((($$0139)) + -8|0);
   $16 = HEAP32[$15>>2]|0;
   HEAP32[$12>>2] = $16;
   $17 = ((($$0139)) + -4|0);
   $18 = HEAP32[$17>>2]|0;
   HEAP32[$13>>2] = $18;
   HEAP32[$17>>2] = 0;
   HEAP32[$15>>2] = 0;
   HEAP32[$9>>2] = 0;
   $19 = HEAP32[$6>>2]|0;
   $20 = ((($19)) + -12|0);
   HEAP32[$6>>2] = $20;
   $21 = ($9|0)==($2|0);
   if ($21) {
    break;
   } else {
    $$0139 = $9;$11 = $20;
   }
  }
  $22 = $20;
  $$pre144 = HEAP32[$0>>2]|0;
  $$pre$phi149Z2D = $6;$$pre$phiZ2D = $0;$23 = $22;$24 = $$pre144;
 }
 HEAP32[$$pre$phiZ2D>>2] = $23;
 HEAP32[$$pre$phi149Z2D>>2] = $24;
 $25 = ((($1)) + 8|0);
 $26 = HEAP32[$4>>2]|0;
 $27 = HEAP32[$25>>2]|0;
 HEAP32[$4>>2] = $27;
 HEAP32[$25>>2] = $26;
 $28 = ((($1)) + 12|0);
 $29 = HEAP32[$3>>2]|0;
 $30 = HEAP32[$28>>2]|0;
 HEAP32[$3>>2] = $30;
 HEAP32[$28>>2] = $29;
 $31 = HEAP32[$$pre$phi149Z2D>>2]|0;
 HEAP32[$1>>2] = $31;
 return;
}
function __ZNSt3__214__split_bufferINS_6vectorIhNS_9allocatorIhEEEERNS2_IS4_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -12|0);
   HEAP32[$3>>2] = $6;
   __ZNSt3__26vectorIhNS_9allocatorIhEEED2Ev($6);
   $8 = HEAP32[$3>>2]|0;
   $9 = ($2|0)==($8|0);
   if ($9) {
    break;
   } else {
    $7 = $8;
   }
  }
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  return;
 }
 __ZdlPv($10);
 return;
}
function __ZNKSt3__26vectorINS0_IhNS_9allocatorIhEEEENS1_IS3_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 357913941;
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE21__push_back_slow_pathIjEEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated = 0, $$sroa$speculated$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorIjNS_9allocatorIjEEE8max_sizeEv($0)|0);
 $11 = ($9>>>0)>($10>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = HEAP32[$3>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = (($12) - ($13))|0;
  $15 = $14 >> 2;
  $16 = $10 >>> 1;
  $17 = ($15>>>0)<($16>>>0);
  $18 = $14 >> 1;
  $19 = ($18>>>0)<($9>>>0);
  $$sroa$speculated = $19 ? $9 : $18;
  $$sroa$speculated$ = $17 ? $$sroa$speculated : $10;
  $20 = HEAP32[$4>>2]|0;
  $21 = (($20) - ($13))|0;
  $22 = $21 >> 2;
  __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($2,$$sroa$speculated$,$22,$3);
  $23 = ((($2)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$1>>2]|0;
  HEAP32[$24>>2] = $25;
  $26 = HEAP32[$23>>2]|0;
  $27 = ((($26)) + 4|0);
  HEAP32[$23>>2] = $27;
  __ZNSt3__26vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($0,$2);
  __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorIbNS_9allocatorIbEEE7reserveEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 << 5;
 $8 = ($7>>>0)<($1>>>0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 HEAP32[$2>>2] = 0;
 $9 = ((($2)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($2)) + 8|0);
 HEAP32[$10>>2] = 0;
 __ZNSt3__26vectorIbNS_9allocatorIbEEE8allocateEj($2,$1);
 $11 = HEAP32[$0>>2]|0;
 HEAP32[$3>>2] = $11;
 $12 = ((($3)) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $11;
 $16 = $14 >>> 5;
 $17 = (($15) + ($16<<2)|0);
 $18 = $14 & 31;
 HEAP32[$4>>2] = $17;
 $19 = ((($4)) + 4|0);
 HEAP32[$19>>2] = $18;
 __ZNSt3__26vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELj0EEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_($2,$3,$4);
 __ZNSt3__26vectorIbNS_9allocatorIbEEE4swapERS3_($0,$2);
 __ZNSt3__26vectorIbNS_9allocatorIbEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIbNS_9allocatorIbEEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorIbNS_9allocatorIbEEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $4 = (($1) + -1)|0;
  $5 = $4 >>> 5;
  $6 = (($5) + 1)|0;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  HEAP32[$0>>2] = $8;
  $9 = ((($0)) + 4|0);
  HEAP32[$9>>2] = 0;
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $6;
  return;
 }
}
function __ZNSt3__26vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELj0EEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 48|0;
 $4 = sp + 40|0;
 $5 = sp + 32|0;
 $6 = sp + 24|0;
 $7 = sp + 16|0;
 $8 = sp + 8|0;
 $9 = sp;
 $10 = ((($0)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $13 = ((($1)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$2>>2]|0;
 $16 = ((($2)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) - ($12))|0;
 $19 = $18 << 3;
 $20 = (($11) - ($14))|0;
 $21 = (($20) + ($17))|0;
 $22 = (($21) + ($19))|0;
 HEAP32[$10>>2] = $22;
 $23 = HEAP32[$1>>2]|0;
 $24 = HEAP32[$13>>2]|0;
 $25 = HEAP32[$2>>2]|0;
 $26 = HEAP32[$16>>2]|0;
 $27 = HEAP32[$0>>2]|0;
 $28 = $11 >>> 5;
 $29 = (($27) + ($28<<2)|0);
 $30 = $11 & 31;
 $31 = ($24|0)==($30|0);
 if ($31) {
  HEAP32[$3>>2] = $23;
  $32 = ((($3)) + 4|0);
  HEAP32[$32>>2] = $24;
  HEAP32[$4>>2] = $25;
  $33 = ((($4)) + 4|0);
  HEAP32[$33>>2] = $26;
  HEAP32[$5>>2] = $29;
  $34 = ((($5)) + 4|0);
  HEAP32[$34>>2] = $24;
  __ZNSt3__214__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($9,$3,$4,$5);
  STACKTOP = sp;return;
 } else {
  HEAP32[$6>>2] = $23;
  $35 = ((($6)) + 4|0);
  HEAP32[$35>>2] = $24;
  HEAP32[$7>>2] = $25;
  $36 = ((($7)) + 4|0);
  HEAP32[$36>>2] = $26;
  HEAP32[$8>>2] = $29;
  $37 = ((($8)) + 4|0);
  HEAP32[$37>>2] = $30;
  __ZNSt3__216__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($9,$6,$7,$8);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorIbNS_9allocatorIbEEE4swapERS3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $3;
 HEAP32[$1>>2] = $2;
 $4 = ((($0)) + 4|0);
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $7;
 HEAP32[$5>>2] = $6;
 $8 = ((($0)) + 8|0);
 $9 = ((($1)) + 8|0);
 $10 = HEAP32[$8>>2]|0;
 $11 = HEAP32[$9>>2]|0;
 HEAP32[$8>>2] = $11;
 HEAP32[$9>>2] = $10;
 return;
}
function __ZNKSt3__26vectorIbNS_9allocatorIbEEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNSt3__214__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$in = 0, $$pre$phiZ2D = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = $5;
 $7 = (($4) - ($6))|0;
 $8 = $7 << 3;
 $9 = ((($2)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) - ($12))|0;
 $14 = (($13) + ($8))|0;
 $15 = ($14|0)>(0);
 if (!($15)) {
  $64 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $64;
  $65 = ((($0)) + 4|0);
  $66 = ((($3)) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  HEAP32[$65>>2] = $67;
  return;
 }
 $16 = ($12|0)==(0);
 if ($16) {
  $$0 = $14;$$in = $5;$$pre$phiZ2D = $3;
 } else {
  $17 = (32 - ($12))|0;
  $18 = ($14|0)<($17|0);
  $$sroa$speculated = $18 ? $14 : $17;
  $19 = (($14) - ($$sroa$speculated))|0;
  $20 = -1 << $12;
  $21 = (($17) - ($$sroa$speculated))|0;
  $22 = -1 >>> $21;
  $23 = $22 & $20;
  $24 = HEAP32[$5>>2]|0;
  $25 = $24 & $23;
  $26 = $23 ^ -1;
  $27 = HEAP32[$3>>2]|0;
  $28 = HEAP32[$27>>2]|0;
  $29 = $28 & $26;
  HEAP32[$27>>2] = $29;
  $30 = HEAP32[$3>>2]|0;
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 | $25;
  HEAP32[$30>>2] = $32;
  $33 = ((($3)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($$sroa$speculated))|0;
  $36 = $35 >>> 5;
  $37 = HEAP32[$3>>2]|0;
  $38 = (($37) + ($36<<2)|0);
  HEAP32[$3>>2] = $38;
  $39 = $35 & 31;
  HEAP32[$33>>2] = $39;
  $40 = HEAP32[$1>>2]|0;
  $41 = ((($40)) + 4|0);
  HEAP32[$1>>2] = $41;
  $$0 = $19;$$in = $41;$$pre$phiZ2D = $3;
 }
 $42 = (($$0|0) / 32)&-1;
 $43 = HEAP32[$3>>2]|0;
 $44 = $42 << 2;
 _memmove(($43|0),($$in|0),($44|0))|0;
 $45 = $42 << 5;
 $46 = (($$0) - ($45))|0;
 $47 = HEAP32[$$pre$phiZ2D>>2]|0;
 $48 = (($47) + ($42<<2)|0);
 HEAP32[$$pre$phiZ2D>>2] = $48;
 $49 = ($46|0)>(0);
 if (!($49)) {
  $64 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $64;
  $65 = ((($0)) + 4|0);
  $66 = ((($3)) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  HEAP32[$65>>2] = $67;
  return;
 }
 $50 = HEAP32[$1>>2]|0;
 $51 = (($50) + ($42<<2)|0);
 HEAP32[$1>>2] = $51;
 $52 = (32 - ($46))|0;
 $53 = -1 >>> $52;
 $54 = HEAP32[$51>>2]|0;
 $55 = $54 & $53;
 $56 = $53 ^ -1;
 $57 = HEAP32[$$pre$phiZ2D>>2]|0;
 $58 = HEAP32[$57>>2]|0;
 $59 = $58 & $56;
 HEAP32[$57>>2] = $59;
 $60 = HEAP32[$$pre$phiZ2D>>2]|0;
 $61 = HEAP32[$60>>2]|0;
 $62 = $61 | $55;
 HEAP32[$60>>2] = $62;
 $63 = ((($3)) + 4|0);
 HEAP32[$63>>2] = $46;
 $64 = HEAP32[$3>>2]|0;
 HEAP32[$0>>2] = $64;
 $65 = ((($0)) + 4|0);
 $66 = ((($3)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 HEAP32[$65>>2] = $67;
 return;
}
function __ZNSt3__216__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1$lcssa = 0, $$1114 = 0, $$pre = 0, $$pre$phi118Z2D = 0, $$pre$phiZ2D = 0, $$pre117 = 0, $$sink3 = 0, $$sroa$speculated = 0, $$sroa$speculated78 = 0, $$sroa$speculated97 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $smax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = $5;
 $7 = (($4) - ($6))|0;
 $8 = $7 << 3;
 $9 = ((($2)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) - ($12))|0;
 $14 = (($13) + ($8))|0;
 $15 = ($14|0)>(0);
 if (!($15)) {
  $$pre117 = ((($3)) + 4|0);
  $$pre$phi118Z2D = $$pre117;
  $141 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $141;
  $142 = ((($0)) + 4|0);
  $143 = HEAP32[$$pre$phi118Z2D>>2]|0;
  HEAP32[$142>>2] = $143;
  return;
 }
 $16 = ($12|0)==(0);
 if ($16) {
  $$pre = ((($3)) + 4|0);
  $$0 = $14;$$pre$phiZ2D = $$pre;$144 = $5;
 } else {
  $17 = (32 - ($12))|0;
  $18 = ($14|0)<($17|0);
  $$sroa$speculated = $18 ? $14 : $17;
  $19 = (($14) - ($$sroa$speculated))|0;
  $20 = -1 << $12;
  $21 = (($17) - ($$sroa$speculated))|0;
  $22 = -1 >>> $21;
  $23 = $22 & $20;
  $24 = HEAP32[$5>>2]|0;
  $25 = $23 & $24;
  $26 = ((($3)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (32 - ($27))|0;
  $29 = ($28>>>0)<($$sroa$speculated>>>0);
  $$sroa$speculated78 = $29 ? $28 : $$sroa$speculated;
  $30 = -1 << $27;
  $31 = (($28) - ($$sroa$speculated78))|0;
  $32 = -1 >>> $31;
  $33 = $32 & $30;
  $34 = $33 ^ -1;
  $35 = HEAP32[$3>>2]|0;
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 & $34;
  HEAP32[$35>>2] = $37;
  $38 = HEAP32[$26>>2]|0;
  $39 = HEAP32[$11>>2]|0;
  $40 = ($38>>>0)>($39>>>0);
  $41 = (($39) - ($38))|0;
  $42 = $25 >>> $41;
  $43 = (($38) - ($39))|0;
  $44 = $25 << $43;
  $$sink3 = $40 ? $44 : $42;
  $45 = HEAP32[$3>>2]|0;
  $46 = HEAP32[$45>>2]|0;
  $47 = $$sink3 | $46;
  HEAP32[$45>>2] = $47;
  $48 = HEAP32[$26>>2]|0;
  $49 = (($48) + ($$sroa$speculated78))|0;
  $50 = $49 >>> 5;
  $51 = HEAP32[$3>>2]|0;
  $52 = (($51) + ($50<<2)|0);
  HEAP32[$3>>2] = $52;
  $53 = $49 & 31;
  HEAP32[$26>>2] = $53;
  $54 = (($$sroa$speculated) - ($$sroa$speculated78))|0;
  $55 = ($54|0)>(0);
  if ($55) {
   $56 = (32 - ($54))|0;
   $57 = -1 >>> $56;
   $58 = $57 ^ -1;
   $59 = HEAP32[$52>>2]|0;
   $60 = $59 & $58;
   HEAP32[$52>>2] = $60;
   $61 = HEAP32[$11>>2]|0;
   $62 = (($61) + ($$sroa$speculated78))|0;
   $63 = $25 >>> $62;
   $64 = HEAP32[$3>>2]|0;
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | $63;
   HEAP32[$64>>2] = $66;
   HEAP32[$26>>2] = $54;
  }
  $67 = HEAP32[$1>>2]|0;
  $68 = ((($67)) + 4|0);
  HEAP32[$1>>2] = $68;
  $$0 = $19;$$pre$phiZ2D = $26;$144 = $68;
 }
 $69 = HEAP32[$$pre$phiZ2D>>2]|0;
 $70 = (32 - ($69))|0;
 $71 = -1 << $69;
 $72 = ($$0|0)>(31);
 if ($72) {
  $73 = $71 ^ -1;
  $74 = $$0 ^ -1;
  $75 = ($74|0)>(-64);
  $smax = $75 ? $74 : -64;
  $76 = (($$0) + ($smax))|0;
  $77 = (($76) + 32)|0;
  $78 = $77 & -32;
  $$1114 = $$0;$80 = $144;
  while(1) {
   $79 = HEAP32[$80>>2]|0;
   $81 = HEAP32[$3>>2]|0;
   $82 = HEAP32[$81>>2]|0;
   $83 = $82 & $73;
   HEAP32[$81>>2] = $83;
   $84 = HEAP32[$$pre$phiZ2D>>2]|0;
   $85 = $79 << $84;
   $86 = HEAP32[$3>>2]|0;
   $87 = HEAP32[$86>>2]|0;
   $88 = $87 | $85;
   HEAP32[$86>>2] = $88;
   $89 = HEAP32[$3>>2]|0;
   $90 = ((($89)) + 4|0);
   HEAP32[$3>>2] = $90;
   $91 = HEAP32[$90>>2]|0;
   $92 = $91 & $71;
   HEAP32[$90>>2] = $92;
   $93 = $79 >>> $70;
   $94 = HEAP32[$3>>2]|0;
   $95 = HEAP32[$94>>2]|0;
   $96 = $95 | $93;
   HEAP32[$94>>2] = $96;
   $97 = (($$1114) + -32)|0;
   $98 = HEAP32[$1>>2]|0;
   $99 = ((($98)) + 4|0);
   HEAP32[$1>>2] = $99;
   $100 = ($$1114|0)>(63);
   if ($100) {
    $$1114 = $97;$80 = $99;
   } else {
    break;
   }
  }
  $101 = (($$0) + -32)|0;
  $102 = (($101) - ($78))|0;
  $$1$lcssa = $102;$107 = $99;
 } else {
  $$1$lcssa = $$0;$107 = $144;
 }
 $103 = ($$1$lcssa|0)>(0);
 if (!($103)) {
  $$pre$phi118Z2D = $$pre$phiZ2D;
  $141 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $141;
  $142 = ((($0)) + 4|0);
  $143 = HEAP32[$$pre$phi118Z2D>>2]|0;
  HEAP32[$142>>2] = $143;
  return;
 }
 $104 = (32 - ($$1$lcssa))|0;
 $105 = -1 >>> $104;
 $106 = HEAP32[$107>>2]|0;
 $108 = $106 & $105;
 $109 = ($70|0)<($$1$lcssa|0);
 $$sroa$speculated97 = $109 ? $70 : $$1$lcssa;
 $110 = HEAP32[$$pre$phiZ2D>>2]|0;
 $111 = -1 << $110;
 $112 = (($70) - ($$sroa$speculated97))|0;
 $113 = -1 >>> $112;
 $114 = $111 & $113;
 $115 = $114 ^ -1;
 $116 = HEAP32[$3>>2]|0;
 $117 = HEAP32[$116>>2]|0;
 $118 = $117 & $115;
 HEAP32[$116>>2] = $118;
 $119 = HEAP32[$$pre$phiZ2D>>2]|0;
 $120 = $108 << $119;
 $121 = HEAP32[$3>>2]|0;
 $122 = HEAP32[$121>>2]|0;
 $123 = $122 | $120;
 HEAP32[$121>>2] = $123;
 $124 = HEAP32[$$pre$phiZ2D>>2]|0;
 $125 = (($124) + ($$sroa$speculated97))|0;
 $126 = $125 >>> 5;
 $127 = HEAP32[$3>>2]|0;
 $128 = (($127) + ($126<<2)|0);
 HEAP32[$3>>2] = $128;
 $129 = $125 & 31;
 HEAP32[$$pre$phiZ2D>>2] = $129;
 $130 = (($$1$lcssa) - ($$sroa$speculated97))|0;
 $131 = ($130|0)>(0);
 if (!($131)) {
  $$pre$phi118Z2D = $$pre$phiZ2D;
  $141 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $141;
  $142 = ((($0)) + 4|0);
  $143 = HEAP32[$$pre$phi118Z2D>>2]|0;
  HEAP32[$142>>2] = $143;
  return;
 }
 $132 = (32 - ($130))|0;
 $133 = -1 >>> $132;
 $134 = $133 ^ -1;
 $135 = HEAP32[$128>>2]|0;
 $136 = $135 & $134;
 HEAP32[$128>>2] = $136;
 $137 = $108 >>> $$sroa$speculated97;
 $138 = HEAP32[$3>>2]|0;
 $139 = HEAP32[$138>>2]|0;
 $140 = $139 | $137;
 HEAP32[$138>>2] = $140;
 HEAP32[$$pre$phiZ2D>>2] = $130;
 $$pre$phi118Z2D = $$pre$phiZ2D;
 $141 = HEAP32[$3>>2]|0;
 HEAP32[$0>>2] = $141;
 $142 = ((($0)) + 4|0);
 $143 = HEAP32[$$pre$phi118Z2D>>2]|0;
 HEAP32[$142>>2] = $143;
 return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE9push_backERKS6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($0,$1);
  return;
 } else {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($3,$1);
  $7 = HEAP32[$2>>2]|0;
  $8 = ((($7)) + 12|0);
  HEAP32[$2>>2] = $8;
  return;
 }
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE6resizeEjRKS6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5;
 $7 = (($4) - ($6))|0;
 $8 = (($7|0) / 12)&-1;
 $9 = ($8>>>0)<($1>>>0);
 $10 = $4;
 if ($9) {
  $11 = (($1) - ($8))|0;
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8__appendEjRKS6_($0,$11,$2);
  return;
 }
 $12 = ($8>>>0)>($1>>>0);
 if (!($12)) {
  return;
 }
 $13 = (($5) + (($1*12)|0)|0);
 $14 = ($13|0)==($10|0);
 if ($14) {
  return;
 } else {
  $16 = $10;
 }
 while(1) {
  $15 = ((($16)) + -12|0);
  HEAP32[$3>>2] = $15;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($15);
  $17 = HEAP32[$3>>2]|0;
  $18 = ($13|0)==($17|0);
  if ($18) {
   break;
  } else {
   $16 = $17;
  }
 }
 return;
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getERKSB_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = $5;
 $7 = (($4) - ($6))|0;
 $8 = (($7|0) / 12)&-1;
 $9 = ($8>>>0)>($2>>>0);
 if ($9) {
  $10 = (($5) + (($2*12)|0)|0);
  __ZN10emscripten3valC2IRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEOT_($0,$10);
  return;
 } else {
  __ZN10emscripten3val9undefinedEv($0);
  return;
 }
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3setERSB_jRKS9_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + (($1*12)|0)|0);
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($4,$2)|0);
 return 1;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$speculated = 0, $$sroa$speculated$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = (($7|0) / 12)&-1;
 $9 = (($8) + 1)|0;
 $10 = (__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($0)|0);
 $11 = ($9>>>0)>($10>>>0);
 if ($11) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 } else {
  $12 = HEAP32[$3>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = (($12) - ($13))|0;
  $15 = (($14|0) / 12)&-1;
  $16 = $10 >>> 1;
  $17 = ($15>>>0)<($16>>>0);
  $18 = $15 << 1;
  $19 = ($18>>>0)<($9>>>0);
  $$sroa$speculated = $19 ? $9 : $18;
  $$sroa$speculated$ = $17 ? $$sroa$speculated : $10;
  $20 = HEAP32[$4>>2]|0;
  $21 = (($20) - ($13))|0;
  $22 = (($21|0) / 12)&-1;
  __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($2,$$sroa$speculated$,$22,$3);
  $23 = ((($2)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($24,$1);
  $25 = HEAP32[$23>>2]|0;
  $26 = ((($25)) + 12|0);
  HEAP32[$23>>2] = $26;
  __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0,$2);
  __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($2);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $3;
 $6 = ($1|0)==(0);
 do {
  if ($6) {
   $11 = 0;
  } else {
   $7 = ($1>>>0)>(357913941);
   if ($7) {
    $8 = (___cxa_allocate_exception(8)|0);
    __ZNSt11logic_errorC2EPKc($8,2660);
    HEAP32[$8>>2] = (1860);
    ___cxa_throw(($8|0),(648|0),(18|0));
    // unreachable;
   } else {
    $9 = ($1*12)|0;
    $10 = (__Znwj($9)|0);
    $11 = $10;
    break;
   }
  }
 } while(0);
 HEAP32[$0>>2] = $11;
 $12 = (($11) + (($2*12)|0)|0);
 $13 = ((($0)) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ((($0)) + 4|0);
 HEAP32[$14>>2] = $12;
 $15 = (($11) + (($1*12)|0)|0);
 HEAP32[$4>>2] = $15;
 return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0113117 = 0, $$pre = 0, $$pre$phi129Z2D = 0, $$pre$phiZ2D = 0, $$pre124 = 0, $$pre126 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $indvar = 0, $indvar$next = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 4|0);
 $7 = ($5|0)==($2|0);
 if ($7) {
  $8 = $2;
  $$pre126 = HEAP32[$6>>2]|0;
  $$pre$phi129Z2D = $6;$$pre$phiZ2D = $0;$17 = $$pre126;$18 = $8;
 } else {
  $$pre = HEAP32[$6>>2]|0;
  $$0113117 = $5;$12 = $$pre;$indvar = 0;
  while(1) {
   $9 = $indvar ^ -1;
   $scevgep = (($5) + (($9*12)|0)|0);
   $10 = ((($$0113117)) + -12|0);
   $11 = ((($12)) + -12|0);
   ;HEAP32[$11>>2]=HEAP32[$10>>2]|0;HEAP32[$11+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$10+8>>2]|0;
   ;HEAP32[$scevgep>>2]=0|0;HEAP32[$scevgep+4>>2]=0|0;HEAP32[$scevgep+8>>2]=0|0;
   $13 = HEAP32[$6>>2]|0;
   $14 = ((($13)) + -12|0);
   HEAP32[$6>>2] = $14;
   $15 = ($10|0)==($2|0);
   $indvar$next = (($indvar) + 1)|0;
   if ($15) {
    break;
   } else {
    $$0113117 = $10;$12 = $14;$indvar = $indvar$next;
   }
  }
  $16 = $14;
  $$pre124 = HEAP32[$0>>2]|0;
  $$pre$phi129Z2D = $6;$$pre$phiZ2D = $0;$17 = $16;$18 = $$pre124;
 }
 HEAP32[$$pre$phiZ2D>>2] = $17;
 HEAP32[$$pre$phi129Z2D>>2] = $18;
 $19 = ((($1)) + 8|0);
 $20 = HEAP32[$4>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 HEAP32[$4>>2] = $21;
 HEAP32[$19>>2] = $20;
 $22 = ((($1)) + 12|0);
 $23 = HEAP32[$3>>2]|0;
 $24 = HEAP32[$22>>2]|0;
 HEAP32[$3>>2] = $24;
 HEAP32[$22>>2] = $23;
 $25 = HEAP32[$$pre$phi129Z2D>>2]|0;
 HEAP32[$1>>2] = $25;
 return;
}
function __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==($4|0);
 if (!($5)) {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -12|0);
   HEAP32[$3>>2] = $6;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
   $8 = HEAP32[$3>>2]|0;
   $9 = ($2|0)==($8|0);
   if ($9) {
    break;
   } else {
    $7 = $8;
   }
  }
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  return;
 }
 __ZdlPv($10);
 return;
}
function __ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 357913941;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8__appendEjRKS6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$063 = 0, $$sroa$speculated = 0, $$sroa$speculated$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = (($8|0) / 12)&-1;
 $10 = ($9>>>0)<($1>>>0);
 if (!($10)) {
  $11 = $7;
  $$063 = $1;$12 = $11;
  while(1) {
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($12,$2);
   $13 = HEAP32[$6>>2]|0;
   $14 = ((($13)) + 12|0);
   HEAP32[$6>>2] = $14;
   $15 = (($$063) + -1)|0;
   $16 = ($15|0)==(0);
   if ($16) {
    break;
   } else {
    $$063 = $15;$12 = $14;
   }
  }
  STACKTOP = sp;return;
 }
 $17 = HEAP32[$0>>2]|0;
 $18 = (($7) - ($17))|0;
 $19 = (($18|0) / 12)&-1;
 $20 = (($19) + ($1))|0;
 $21 = (__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($0)|0);
 $22 = ($20>>>0)>($21>>>0);
 if ($22) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $23 = HEAP32[$4>>2]|0;
 $24 = HEAP32[$0>>2]|0;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 12)&-1;
 $27 = $21 >>> 1;
 $28 = ($26>>>0)<($27>>>0);
 $29 = $26 << 1;
 $30 = ($29>>>0)<($20>>>0);
 $$sroa$speculated = $30 ? $20 : $29;
 $$sroa$speculated$ = $28 ? $$sroa$speculated : $21;
 $31 = HEAP32[$6>>2]|0;
 $32 = (($31) - ($24))|0;
 $33 = (($32|0) / 12)&-1;
 __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($3,$$sroa$speculated$,$33,$4);
 __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEE18__construct_at_endEjRKS6_($3,$1,$2);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($0,$3);
 __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__214__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEE18__construct_at_endEjRKS6_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$pre = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $$pre = HEAP32[$3>>2]|0;
 $$0 = $1;$4 = $$pre;
 while(1) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($4,$2);
  $5 = HEAP32[$3>>2]|0;
  $6 = ((($5)) + 12|0);
  HEAP32[$3>>2] = $6;
  $7 = (($$0) + -1)|0;
  $8 = ($7|0)==(0);
  if ($8) {
   break;
  } else {
   $$0 = $7;$4 = $6;
  }
 }
 return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11NoBaseClass3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14getLightTypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (40|0);
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($0);
 return;
}
function __ZNSt3__213__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1|0)==($4|0);
 if ($5) {
  $10 = $1;
 } else {
  $7 = $4;
  while(1) {
   $6 = ((($7)) + -12|0);
   HEAP32[$3>>2] = $6;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
   $8 = HEAP32[$3>>2]|0;
   $9 = ($1|0)==($8|0);
   if ($9) {
    break;
   } else {
    $7 = $8;
   }
  }
  $$pre = HEAP32[$0>>2]|0;
  $10 = $$pre;
 }
 __ZdlPv($10);
 return;
}
function __ZN10emscripten8internal11LightTypeIDINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (40|0);
}
function __ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (64|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (80|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3150|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJvEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3153|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3155|0);
}
function __ZN10emscripten8internal12operator_newINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(12)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten8internal7InvokerIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEE6invokeEPFSC_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (FUNCTION_TABLE_i[$0 & 63]()|0);
 $2 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE10toWireTypeESC_($1)|0);
 return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE10toWireTypeESC_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (864|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvRKS9_EvPSB_JSD_EE6invokeERKSF_SG_PNS0_11BindingTypeIS9_EUt_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeESC_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $5 = $$unpack5 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $13 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $13 = $11;
 }
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($3,$2);
 FUNCTION_TABLE_vii[$13 & 127]($6,$3);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEERKSC_EE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEERKSC_EE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEERKSB_EEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvRKS9_EEEPT_RKSG_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeESC_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$1>>2]|0;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $5 = ($4>>>0)>(4294967279);
 if ($5) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $6 = ($4>>>0)<(11);
 if ($6) {
  $7 = $4&255;
  $8 = ((($0)) + 11|0);
  HEAP8[$8>>0] = $7;
  $$0 = $0;
 } else {
  $9 = (($4) + 16)|0;
  $10 = $9 & -16;
  $11 = (__Znwj($10)|0);
  HEAP32[$0>>2] = $11;
  $12 = $10 | -2147483648;
  $13 = ((($0)) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = ((($0)) + 4|0);
  HEAP32[$14>>2] = $4;
  $$0 = $11;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0,$3,$4)|0);
 $15 = (($$0) + ($4)|0);
 HEAP8[$2>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($15,$2);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEERKSB_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (868|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3259|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvjRKS9_EvPSB_JjSD_EE6invokeERKSF_SG_jPNS0_11BindingTypeIS9_EUt_E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt5 = 0, $$unpack = 0, $$unpack6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeESC_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt5 = ((($0)) + 4|0);
 $$unpack6 = HEAP32[$$elt5>>2]|0;
 $6 = $$unpack6 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $15 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $15 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($2)|0);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($4,$3);
 FUNCTION_TABLE_viii[$15 & 127]($7,$14,$4);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEEjRKSC_EE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEEjRKSC_EE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEEjRKSB_EEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvjRKS9_EEEPT_RKSG_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEEjRKSB_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (880|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3264|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEKFjvEjPKSB_JEE6invokeERKSD_SF_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeESD_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (FUNCTION_TABLE_ii[$12 & 127]($5)|0);
 HEAP32[$2>>2] = $13;
 $14 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($2)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEKFjvEEEPT_RKSE_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeESD_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (896|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3270|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEjES2_SE_JjEE6invokeEPSG_PSC_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($1)|0);
 $6 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($2)|0);
 FUNCTION_TABLE_viii[$4 & 127]($3,$5,$6);
 $7 = (__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($7|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEjEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEjEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEjEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEjEEEPT_RKSH_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __emval_incref(($1|0));
 $2 = HEAP32[$0>>2]|0;
 return ($2|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten3valD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 __emval_decref(($1|0));
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEjEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (904|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3293|0);
}
function __ZN10emscripten3valC2IRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZN10emscripten8internal12WireTypePackIJRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEC2ESA_($2,$1);
 $3 = (__ZN10emscripten8internal6TypeIDIRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 $4 = (__ZNK10emscripten8internal12WireTypePackIJRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEcvPKvEv($2)|0);
 $5 = (__emval_take_value(($3|0),($4|0))|0);
 HEAP32[$0>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN10emscripten3val9undefinedEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,(1));
 return;
}
function __ZN10emscripten8internal12WireTypePackIJRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEC2ESA_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = (__ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($1)|0);
 __ZN10emscripten8internal20writeGenericWireTypeINS0_11BindingTypeINSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUt_EEEvRPNS0_15GenericWireTypeEPT_($2,$3);
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($2);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZNK10emscripten8internal12WireTypePackIJRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEcvPKvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeINS0_11BindingTypeINSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEUt_EEEvRPNS0_15GenericWireTypeEPT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 8|0);
 HEAP32[$0>>2] = $4;
 return;
}
function __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $5 ? $3 : $7;
 $9 = (($8) + 4)|0;
 $10 = (_malloc($9)|0);
 HEAP32[$10>>2] = $8;
 $11 = ((($10)) + 4|0);
 $12 = ($2<<24>>24)<(0);
 $13 = HEAP32[$0>>2]|0;
 $14 = $12 ? $13 : $0;
 _memcpy(($11|0),($14|0),($8|0))|0;
 return ($10|0);
}
function __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal11LightTypeIDIRKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (104|0);
}
function __ZN10emscripten3valC2EPNS_8internal7_EM_VALE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEjRKS9_EbSC_JjSE_EE6invokeEPSG_PSB_jPNS0_11BindingTypeIS9_EUt_E($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($1)|0);
 $7 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($2)|0);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($4,$3);
 $8 = (FUNCTION_TABLE_iiii[$5 & 127]($6,$7,$4)|0);
 $9 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($8)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 STACKTOP = sp;return ($9|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEjRKSB_EE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEjRKSB_EE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEjRKSA_EEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFbRNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEjRKS9_EEEPT_RKSH_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEjRKSA_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (916|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3298|0);
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE6resizeEjRKj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $scevgep = 0, $scevgep46 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8>>>0)<($1>>>0);
 $10 = $4;
 if ($9) {
  $11 = (($1) - ($8))|0;
  __ZNSt3__26vectorIjNS_9allocatorIjEEE8__appendEjRKj($0,$11,$2);
  return;
 }
 $12 = ($8>>>0)<=($1>>>0);
 $13 = (($5) + ($1<<2)|0);
 $14 = ($13|0)==($10|0);
 $or$cond = $12 | $14;
 if ($or$cond) {
  return;
 }
 $15 = $1 ^ -1;
 $scevgep = (($10) + ($15<<2)|0);
 $16 = $scevgep;
 $17 = (($16) - ($6))|0;
 $18 = $17 >>> 2;
 $19 = $18 ^ -1;
 $scevgep46 = (($10) + ($19<<2)|0);
 HEAP32[$3>>2] = $scevgep46;
 return;
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIjNS2_9allocatorIjEEEEE3getERKS6_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = $5;
 $7 = (($4) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8>>>0)>($2>>>0);
 if ($9) {
  $10 = (($5) + ($2<<2)|0);
  __ZN10emscripten3valC2IRKjEEOT_($0,$10);
  return;
 } else {
  __ZN10emscripten3val9undefinedEv($0);
  return;
 }
}
function __ZN10emscripten8internal12VectorAccessINSt3__26vectorIjNS2_9allocatorIjEEEEE3setERS6_jRKj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + ($1<<2)|0);
 HEAP32[$5>>2] = $3;
 return 1;
}
function __ZNSt3__26vectorIjNS_9allocatorIjEEE8__appendEjRKj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$063 = 0, $$sroa$speculated = 0, $$sroa$speculated$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) - ($7))|0;
 $9 = $8 >> 2;
 $10 = ($9>>>0)<($1>>>0);
 if (!($10)) {
  $11 = $7;
  $$063 = $1;$13 = $11;
  while(1) {
   $12 = HEAP32[$2>>2]|0;
   HEAP32[$13>>2] = $12;
   $14 = HEAP32[$6>>2]|0;
   $15 = ((($14)) + 4|0);
   HEAP32[$6>>2] = $15;
   $16 = (($$063) + -1)|0;
   $17 = ($16|0)==(0);
   if ($17) {
    break;
   } else {
    $$063 = $16;$13 = $15;
   }
  }
  STACKTOP = sp;return;
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = (($7) - ($18))|0;
 $20 = $19 >> 2;
 $21 = (($20) + ($1))|0;
 $22 = (__ZNKSt3__26vectorIjNS_9allocatorIjEEE8max_sizeEv($0)|0);
 $23 = ($21>>>0)>($22>>>0);
 if ($23) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $24 = HEAP32[$4>>2]|0;
 $25 = HEAP32[$0>>2]|0;
 $26 = (($24) - ($25))|0;
 $27 = $26 >> 2;
 $28 = $22 >>> 1;
 $29 = ($27>>>0)<($28>>>0);
 $30 = $26 >> 1;
 $31 = ($30>>>0)<($21>>>0);
 $$sroa$speculated = $31 ? $21 : $30;
 $$sroa$speculated$ = $29 ? $$sroa$speculated : $22;
 $32 = HEAP32[$6>>2]|0;
 $33 = (($32) - ($25))|0;
 $34 = $33 >> 2;
 __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($3,$$sroa$speculated$,$34,$4);
 __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEE18__construct_at_endEjRKj($3,$1,$2);
 __ZNSt3__26vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($0,$3);
 __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__214__split_bufferIjRNS_9allocatorIjEEE18__construct_at_endEjRKj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$pre = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $$pre = HEAP32[$3>>2]|0;
 $$0 = $1;$5 = $$pre;
 while(1) {
  $4 = HEAP32[$2>>2]|0;
  HEAP32[$5>>2] = $4;
  $6 = HEAP32[$3>>2]|0;
  $7 = ((($6)) + 4|0);
  HEAP32[$3>>2] = $7;
  $8 = (($$0) + -1)|0;
  $9 = ($8|0)==(0);
  if ($9) {
   break;
  } else {
   $$0 = $8;$5 = $7;
  }
 }
 return;
}
function __ZN10emscripten8internal11NoBaseClass6verifyINSt3__26vectorIjNS3_9allocatorIjEEEEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeINSt3__26vectorIjNS2_9allocatorIjEEEEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIjNS2_9allocatorIjEEEEEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterINSt3__26vectorIjNS3_9allocatorIjEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterINSt3__26vectorIjNS3_9allocatorIjEEEEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorINSt3__26vectorIjNS2_9allocatorIjEEEEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZNSt3__26vectorIjNS_9allocatorIjEEED2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__26vectorIjNS2_9allocatorIjEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__26vectorIjNS2_9allocatorIjEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerINSt3__26vectorIjNS3_9allocatorIjEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIjNS2_9allocatorIjEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKNSt3__26vectorIjNS3_9allocatorIjEEEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIjNS2_9allocatorIjEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDINSt3__26vectorIjNS2_9allocatorIjEEEEEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (160|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__26vectorIjNS2_9allocatorIjEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (160|0);
}
function __ZN10emscripten8internal11LightTypeIDIPNSt3__26vectorIjNS2_9allocatorIjEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (184|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKNSt3__26vectorIjNS2_9allocatorIjEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (200|0);
}
function __ZN10emscripten8internal12operator_newINSt3__26vectorIjNS2_9allocatorIjEEEEJEEEPT_DpOT0_() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj(12)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return ($0|0);
}
function __ZN10emscripten8internal7InvokerIPNSt3__26vectorIjNS2_9allocatorIjEEEEJEE6invokeEPFS7_vE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (FUNCTION_TABLE_i[$0 & 63]()|0);
 $2 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIjNS2_9allocatorIjEEEEE10toWireTypeES7_($1)|0);
 return ($2|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIjNS5_9allocatorIjEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPNSt3__26vectorIjNS5_9allocatorIjEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIjNS4_9allocatorIjEEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIjNS2_9allocatorIjEEEEE10toWireTypeES7_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerINSt3__26vectorIjNS4_9allocatorIjEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (932|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIjNS2_9allocatorIjEEEEFvRKjEvPS6_JS8_EE6invokeERKSA_SB_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIjNS2_9allocatorIjEEEEE12fromWireTypeES7_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $5 = $$unpack3 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack3 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $14 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $13 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($2)|0);
 HEAP32[$3>>2] = $13;
 FUNCTION_TABLE_vii[$14 & 127]($6,$3);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIjNS5_9allocatorIjEEEEEERKjEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIjNS5_9allocatorIjEEEEEERKjEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIjNS4_9allocatorIjEEEEEERKjEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIjNS2_9allocatorIjEEEEFvRKjEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIjNS2_9allocatorIjEEEEE12fromWireTypeES7_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIjNS4_9allocatorIjEEEEEERKjEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (936|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIjNS2_9allocatorIjEEEEFvjRKjEvPS6_JjS8_EE6invokeERKSA_SB_jj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIPNSt3__26vectorIjNS2_9allocatorIjEEEEE12fromWireTypeES7_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $6 = $$unpack4 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack4 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $16 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $16 = $12;
 }
 $14 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($2)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($3)|0);
 HEAP32[$4>>2] = $15;
 FUNCTION_TABLE_viii[$16 & 127]($7,$14,$4);
 STACKTOP = sp;return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIjNS5_9allocatorIjEEEEEEjRKjEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIjNS5_9allocatorIjEEEEEEjRKjEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIjNS4_9allocatorIjEEEEEEjRKjEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIjNS2_9allocatorIjEEEEFvjRKjEEEPT_RKSB_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerINSt3__26vectorIjNS4_9allocatorIjEEEEEEjRKjEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (948|0);
}
function __ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIjNS2_9allocatorIjEEEEKFjvEjPKS6_JEE6invokeERKS8_SA_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIjNS2_9allocatorIjEEEEE12fromWireTypeES8_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (FUNCTION_TABLE_ii[$12 & 127]($5)|0);
 HEAP32[$2>>2] = $13;
 $14 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($2)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIjNS5_9allocatorIjEEEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIjNS5_9allocatorIjEEEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIjNS4_9allocatorIjEEEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMNSt3__26vectorIjNS2_9allocatorIjEEEEKFjvEEEPT_RKS9_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPKNSt3__26vectorIjNS2_9allocatorIjEEEEE12fromWireTypeES8_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerIKNSt3__26vectorIjNS4_9allocatorIjEEEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (964|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIjNS3_9allocatorIjEEEEjES2_S9_JjEE6invokeEPSB_PS7_j($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIjNS2_9allocatorIjEEEEE12fromWireTypeEPS6_($1)|0);
 $6 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($2)|0);
 FUNCTION_TABLE_viii[$4 & 127]($3,$5,$6);
 $7 = (__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_($3)|0);
 __ZN10emscripten3valD2Ev($3);
 STACKTOP = sp;return ($7|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIjNS5_9allocatorIjEEEEjEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valERKNSt3__26vectorIjNS5_9allocatorIjEEEEjEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIjNS4_9allocatorIjEEEEjEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFNS_3valERKNSt3__26vectorIjNS3_9allocatorIjEEEEjEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIjNS2_9allocatorIjEEEEE12fromWireTypeEPS6_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valERKNSt3__26vectorIjNS4_9allocatorIjEEEEjEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (972|0);
}
function __ZN10emscripten3valC2IRKjEEOT_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 __ZN10emscripten8internal12WireTypePackIJRKjEEC2ES3_($2,$1);
 $3 = (__ZN10emscripten8internal6TypeIDIRKjE3getEv()|0);
 $4 = (__ZNK10emscripten8internal12WireTypePackIJRKjEEcvPKvEv($2)|0);
 $5 = (__emval_take_value(($3|0),($4|0))|0);
 HEAP32[$0>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal12WireTypePackIJRKjEEC2ES3_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $0;
 $3 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($1)|0);
 __ZN10emscripten8internal20writeGenericWireTypeIjEEvRPNS0_15GenericWireTypeET_($2,$3);
 __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE($2);
 STACKTOP = sp;return;
}
function __ZN10emscripten8internal6TypeIDIRKjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKjE3getEv()|0);
 return ($0|0);
}
function __ZNK10emscripten8internal12WireTypePackIJRKjEEcvPKvEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal20writeGenericWireTypeIjEEvRPNS0_15GenericWireTypeET_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($3)) + 8|0);
 HEAP32[$0>>2] = $4;
 return;
}
function __ZN10emscripten8internal11LightTypeIDIRKjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (784|0);
}
function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIjNS2_9allocatorIjEEEEjRKjEbS7_JjS9_EE6invokeEPSB_PS6_jj($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIjNS2_9allocatorIjEEEEE12fromWireTypeEPS6_($1)|0);
 $7 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($2)|0);
 $8 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($3)|0);
 HEAP32[$4>>2] = $8;
 $9 = (FUNCTION_TABLE_iiii[$5 & 127]($6,$7,$4)|0);
 $10 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIjNS4_9allocatorIjEEEEjRKjEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbRNSt3__26vectorIjNS4_9allocatorIjEEEEjRKjEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIjNS3_9allocatorIjEEEEjRKjEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIPFbRNSt3__26vectorIjNS2_9allocatorIjEEEEjRKjEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(4)|0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbRNSt3__26vectorIjNS3_9allocatorIjEEEEjRKjEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (984|0);
}
function __ZN10emscripten8internal6TypeIDIRKhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKhE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14asGenericValueIhEEjT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&255;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIhE10toWireTypeERKh($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZN10emscripten8internal11LightTypeIDIRKhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (744|0);
}
function __ZN10emscripten8internal6TypeIDIRKiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKiE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14asGenericValueIiEEjT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZN10emscripten8internal11LightTypeIDIRKiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (776|0);
}
function __ZN10emscripten8internal6TypeIDIRKbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIRKbE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14asGenericValueIbEEjT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&1;
 return ($1|0);
}
function __ZN10emscripten8internal11LightTypeIDIRKbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (728|0);
}
function __ZN10emscripten8internal14asGenericValueIjEEjT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDIN4surf10SuffixTypeEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN4surf10SuffixTypeEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIN4surf10SuffixTypeEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (216|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyIN4surf4SuRFEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeIN4surf4SuRFEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDIN4surf4SuRFEEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterIN4surf4SuRFEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterIN4surf4SuRFEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorIN4surf4SuRFEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZN4surf4SuRFD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDIN4surf4SuRFEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN4surf4SuRFEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4surf4SuRFEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPN4surf4SuRFEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4surf4SuRFEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKN4surf4SuRFEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDIN4surf4SuRFEEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (224|0);
}
function __ZN4surf4SuRFD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 __ZN4surf4SuRF4IterD2Ev($1);
 return;
}
function __ZN10emscripten8internal11LightTypeIDIN4surf4SuRFEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (224|0);
}
function __ZN10emscripten8internal11LightTypeIDIPN4surf4SuRFEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (232|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKN4surf4SuRFEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (248|0);
}
function __ZN10emscripten8internal12operator_newIN4surf4SuRFEJKNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEKbKjKNS2_10SuffixTypeESG_SG_EEEPT_DpOT0_($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (__Znwj(108)|0);
 $7 = HEAP8[$1>>0]|0;
 $8 = $7 & 1;
 $9 = ($8<<24>>24)!=(0);
 $10 = HEAP32[$2>>2]|0;
 $11 = HEAP32[$3>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = HEAP32[$5>>2]|0;
 __ZN4surf4SuRFC2ERKNSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEbjNS_10SuffixTypeEjj($6,$0,$9,$10,$11,$12,$13);
 return ($6|0);
}
function __ZN10emscripten8internal7InvokerIPN4surf4SuRFEJOKNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEOKbOKjOKNS2_10SuffixTypeESK_SK_EE6invokeEPFS4_SG_SI_SK_SN_SK_SK_EPSE_bjSL_jj($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = sp + 16|0;
 $8 = sp + 28|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp + 4|0;
 $12 = sp;
 __ZN10emscripten8internal11BindingTypeIOKNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($7,$1);
 $13 = (__ZN10emscripten8internal11BindingTypeIOKbE12fromWireTypeEb($2)|0);
 $14 = $13&1;
 HEAP8[$8>>0] = $14;
 $15 = (__ZN10emscripten8internal11BindingTypeIOKjE12fromWireTypeEj($3)|0);
 HEAP32[$9>>2] = $15;
 $16 = (__ZN10emscripten8internal11BindingTypeIOKN4surf10SuffixTypeEE12fromWireTypeES3_($4)|0);
 HEAP32[$10>>2] = $16;
 $17 = (__ZN10emscripten8internal11BindingTypeIOKjE12fromWireTypeEj($5)|0);
 HEAP32[$11>>2] = $17;
 $18 = (__ZN10emscripten8internal11BindingTypeIOKjE12fromWireTypeEj($6)|0);
 HEAP32[$12>>2] = $18;
 $19 = (FUNCTION_TABLE_iiiiiii[$0 & 127]($7,$8,$9,$10,$11,$12)|0);
 $20 = (__ZN10emscripten8internal11BindingTypeIPN4surf4SuRFEE10toWireTypeES4_($19)|0);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($7);
 STACKTOP = sp;return ($20|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4surf4SuRFEOKNSt3__26vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEEOKbOKjOKNS5_10SuffixTypeESN_SN_EE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 7;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4surf4SuRFEOKNSt3__26vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEEOKbOKjOKNS5_10SuffixTypeESN_SN_EE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIN4surf4SuRFEEEOKNSt3__26vectorINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENSC_ISE_EEEEOKbOKjOKNS4_10SuffixTypeESM_SM_EEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPN4surf4SuRFEE10toWireTypeES4_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeIOKNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($1)|0);
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($0,$2);
 return;
}
function __ZN10emscripten8internal11BindingTypeIOKbE12fromWireTypeEb($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal11BindingTypeIbE12fromWireTypeEb($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIOKjE12fromWireTypeEj($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIOKN4surf10SuffixTypeEE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal15EnumBindingTypeIN4surf10SuffixTypeEE12fromWireTypeES3_($0)|0);
 return ($1|0);
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEC2ERKS8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($5) - ($6))|0;
 $8 = (($7|0) / 12)&-1;
 $9 = ($7|0)==(0);
 if ($9) {
  return;
 }
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8allocateEj($0,$8);
 $10 = HEAP32[$1>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPS6_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_j($0,$10,$11,$8);
 return;
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8allocateEj($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($0)|0);
 $3 = ($2>>>0)<($1>>>0);
 if ($3) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $4 = ($1>>>0)>(357913941);
 if ($4) {
  $5 = (___cxa_allocate_exception(8)|0);
  __ZNSt11logic_errorC2EPKc($5,2660);
  HEAP32[$5>>2] = (1860);
  ___cxa_throw(($5|0),(648|0),(18|0));
  // unreachable;
 } else {
  $6 = ($1*12)|0;
  $7 = (__Znwj($6)|0);
  $8 = ((($0)) + 4|0);
  HEAP32[$8>>2] = $7;
  HEAP32[$0>>2] = $7;
  $9 = (($7) + (($1*12)|0)|0);
  $10 = ((($0)) + 8|0);
  HEAP32[$10>>2] = $9;
  return;
 }
}
function __ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE18__construct_at_endIPS6_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESC_SC_j($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$030 = 0, $$pre = 0, $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = ($1|0)==($2|0);
 if ($5) {
  return;
 }
 $$pre = HEAP32[$4>>2]|0;
 $$030 = $1;$6 = $$pre;
 while(1) {
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($6,$$030);
  $7 = ((($$030)) + 12|0);
  $8 = HEAP32[$4>>2]|0;
  $9 = ((($8)) + 12|0);
  HEAP32[$4>>2] = $9;
  $10 = ($7|0)==($2|0);
  if ($10) {
   break;
  } else {
   $$030 = $7;$6 = $9;
  }
 }
 return;
}
function __ZN10emscripten8internal11BindingTypeIbE12fromWireTypeEb($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal15EnumBindingTypeIN4surf10SuffixTypeEE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIN4surf4SuRFEEEOKNSt3__26vectorINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENSC_ISE_EEEEOKbOKjOKNS4_10SuffixTypeESM_SM_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1000|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3521|0);
}
function __ZN4surf4SuRFC2ERKNSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEbjNS_10SuffixTypeEjj($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ((($0)) + 12|0);
 __ZN4surf4SuRF4IterC2Ev($7);
 __ZN4surf4SuRF6createERKNSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEbjNS_10SuffixTypeEjj($0,$1,$2,$3,$4,$5,$6);
 return;
}
function __ZN4surf4SuRF4IterC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4surf10LoudsDense4IterC2Ev($0);
 $1 = ((($0)) + 44|0);
 __ZN4surf11LoudsSparse4IterC2Ev($1);
 return;
}
function __ZN10emscripten8internal13MethodInvokerIMN4surf4SuRFEKFbRKNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEbPKS3_JSC_EE6invokeERKSE_SG_PNS0_11BindingTypeISA_EUt_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = (__ZN10emscripten8internal11BindingTypeIPKN4surf4SuRFEE12fromWireTypeES5_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $5 = $$unpack5 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $13 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $13 = $11;
 }
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($3,$2);
 $14 = (FUNCTION_TABLE_iii[$13 & 127]($6,$3)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($14)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
 STACKTOP = sp;return ($15|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIKN4surf4SuRFEEERKNSt3__212basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIKN4surf4SuRFEEERKNSt3__212basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerIKN4surf4SuRFEEERKNSt3__212basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMN4surf4SuRFEKFbRKNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEPT_RKSF_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPKN4surf4SuRFEE12fromWireTypeES5_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerIKN4surf4SuRFEEERKNSt3__212basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1028|0);
}
function __ZN10emscripten8internal13MethodInvokerIMN4surf4SuRFEKFNS3_4IterERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEbES4_PKS3_JSD_bEE6invokeERKSF_SH_PNS0_11BindingTypeISB_EUt_Eb($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt6 = 0, $$unpack = 0, $$unpack7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $4 = sp + 16|0;
 $5 = sp;
 $6 = (__ZN10emscripten8internal11BindingTypeIPKN4surf4SuRFEE12fromWireTypeES5_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt6 = ((($0)) + 4|0);
 $$unpack7 = HEAP32[$$elt6>>2]|0;
 $7 = $$unpack7 >> 1;
 $8 = (($6) + ($7)|0);
 $9 = $$unpack7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $14 = $$unpack;
  $16 = $14;
 } else {
  $11 = HEAP32[$8>>2]|0;
  $12 = (($11) + ($$unpack)|0);
  $13 = HEAP32[$12>>2]|0;
  $16 = $13;
 }
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($5,$2);
 $15 = (__ZN10emscripten8internal11BindingTypeIbE12fromWireTypeEb($3)|0);
 FUNCTION_TABLE_viiii[$16 & 127]($4,$8,$5,$15);
 $17 = (__ZN10emscripten8internal18GenericBindingTypeIN4surf4SuRF4IterEE10toWireTypeEOS4_($4)|0);
 __ZN4surf4SuRF4IterD2Ev($4);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($5);
 STACKTOP = sp;return ($17|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4surf4SuRF4IterENS0_17AllowedRawPointerIKS5_EERKNSt3__212basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEbEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4surf4SuRF4IterENS0_17AllowedRawPointerIKS5_EERKNSt3__212basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEbEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4surf4SuRF4IterENS0_17AllowedRawPointerIKS4_EERKNSt3__212basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEbEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMN4surf4SuRFEKFNS3_4IterERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEbEEEPT_RKSG_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal18GenericBindingTypeIN4surf4SuRF4IterEE10toWireTypeEOS4_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(96)|0);
 __ZN4surf4SuRF4IterC2EOS1_($1,$0);
 return ($1|0);
}
function __ZN4surf4SuRF4IterC2EOS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN4surf10LoudsDense4IterC2EOS1_($0,$1);
 $2 = ((($0)) + 44|0);
 $3 = ((($1)) + 44|0);
 __ZN4surf11LoudsSparse4IterC2EOS1_($2,$3);
 $4 = ((($0)) + 92|0);
 $5 = ((($1)) + 92|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 HEAP8[$4>>0] = $7;
 return;
}
function __ZN4surf10LoudsDense4IterC2EOS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$1+12>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = ((($0)) + 16|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 24|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $6;
 $7 = ((($1)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$4>>2] = $8;
 $9 = ((($1)) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$5>>2] = $10;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 HEAP32[$2>>2] = 0;
 $11 = ((($1)) + 28|0);
 $12 = ((($0)) + 28|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 32|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 36|0);
 HEAP32[$14>>2] = 0;
 $15 = HEAP32[$11>>2]|0;
 HEAP32[$12>>2] = $15;
 $16 = ((($1)) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$13>>2] = $17;
 $18 = ((($1)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$14>>2] = $19;
 HEAP32[$18>>2] = 0;
 HEAP32[$16>>2] = 0;
 HEAP32[$11>>2] = 0;
 $20 = ((($0)) + 40|0);
 $21 = ((($1)) + 40|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 & 1;
 HEAP8[$20>>0] = $23;
 return;
}
function __ZN4surf11LoudsSparse4IterC2EOS1_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$1+16>>2]|0;
 $2 = ((($1)) + 20|0);
 $3 = ((($0)) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 24|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($0)) + 28|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $6;
 $7 = ((($1)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$4>>2] = $8;
 $9 = ((($1)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$5>>2] = $10;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 HEAP32[$2>>2] = 0;
 $11 = ((($1)) + 32|0);
 $12 = ((($0)) + 32|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 36|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 40|0);
 HEAP32[$14>>2] = 0;
 $15 = HEAP32[$11>>2]|0;
 HEAP32[$12>>2] = $15;
 $16 = ((($1)) + 36|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$13>>2] = $17;
 $18 = ((($1)) + 40|0);
 $19 = HEAP32[$18>>2]|0;
 HEAP32[$14>>2] = $19;
 HEAP32[$18>>2] = 0;
 HEAP32[$16>>2] = 0;
 HEAP32[$11>>2] = 0;
 $20 = ((($0)) + 44|0);
 $21 = ((($1)) + 44|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22 & 1;
 HEAP8[$20>>0] = $23;
 return;
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4surf4SuRF4IterENS0_17AllowedRawPointerIKS4_EERKNSt3__212basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEbEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1040|0);
}
function __ZN10emscripten8internal13MethodInvokerIMN4surf4SuRFEKFNS3_4IterEvES4_PKS3_JEE6invokeERKS6_S8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPKN4surf4SuRFEE12fromWireTypeES5_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $4 = $$unpack4 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack4 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 FUNCTION_TABLE_vii[$12 & 127]($2,$5);
 $13 = (__ZN10emscripten8internal18GenericBindingTypeIN4surf4SuRF4IterEE10toWireTypeEOS4_($2)|0);
 __ZN4surf4SuRF4IterD2Ev($2);
 STACKTOP = sp;return ($13|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4surf4SuRF4IterENS0_17AllowedRawPointerIKS5_EEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4surf4SuRF4IterENS0_17AllowedRawPointerIKS5_EEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4surf4SuRF4IterENS0_17AllowedRawPointerIKS4_EEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMN4surf4SuRFEKFNS3_4IterEvEEEPT_RKS7_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4surf4SuRF4IterENS0_17AllowedRawPointerIKS4_EEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1056|0);
}
function __ZN10emscripten8internal13MethodInvokerIMN4surf4SuRFEFbRKNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbSC_bEbPS3_JSC_bSC_bEE6invokeERKSE_SF_PNS0_11BindingTypeISA_EUt_EbSM_b($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$elt8 = 0, $$unpack = 0, $$unpack9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 12|0;
 $7 = sp;
 $8 = (__ZN10emscripten8internal11BindingTypeIPN4surf4SuRFEE12fromWireTypeES4_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt8 = ((($0)) + 4|0);
 $$unpack9 = HEAP32[$$elt8>>2]|0;
 $9 = $$unpack9 >> 1;
 $10 = (($8) + ($9)|0);
 $11 = $$unpack9 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  $16 = $$unpack;
  $19 = $16;
 } else {
  $13 = HEAP32[$10>>2]|0;
  $14 = (($13) + ($$unpack)|0);
  $15 = HEAP32[$14>>2]|0;
  $19 = $15;
 }
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($6,$2);
 $17 = (__ZN10emscripten8internal11BindingTypeIbE12fromWireTypeEb($3)|0);
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($7,$4);
 $18 = (__ZN10emscripten8internal11BindingTypeIbE12fromWireTypeEb($5)|0);
 $20 = (FUNCTION_TABLE_iiiiii[$19 & 127]($10,$6,$17,$7,$18)|0);
 $21 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($20)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($7);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($6);
 STACKTOP = sp;return ($21|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIN4surf4SuRFEEERKNSt3__212basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEbSG_bEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIN4surf4SuRFEEERKNSt3__212basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEbSG_bEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerIN4surf4SuRFEEERKNSt3__212basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEbSF_bEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMN4surf4SuRFEFbRKNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbSC_bEEEPT_RKSF_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPN4surf4SuRFEE12fromWireTypeES4_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerIN4surf4SuRFEEERKNSt3__212basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEbSF_bEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1064|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJiiiiiiiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3548|0);
}
function __ZN10emscripten8internal13MethodInvokerIMN4surf4SuRFEKFjvEjPKS3_JEE6invokeERKS5_S7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPKN4surf4SuRFEE12fromWireTypeES5_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (FUNCTION_TABLE_ii[$12 & 127]($5)|0);
 HEAP32[$2>>2] = $13;
 $14 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($2)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf4SuRFEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf4SuRFEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerIKN4surf4SuRFEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMN4surf4SuRFEKFjvEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerIKN4surf4SuRFEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1088|0);
}
function __ZN10emscripten8internal13MethodInvokerIMN4surf4SuRFEFvvEvPS3_JEE6invokeERKS5_S6_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal11BindingTypeIPN4surf4SuRFEE12fromWireTypeES4_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($2) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
  FUNCTION_TABLE_vi[$11 & 127]($4);
  return;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
  FUNCTION_TABLE_vi[$11 & 127]($4);
  return;
 }
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN4surf4SuRFEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN4surf4SuRFEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerIN4surf4SuRFEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMN4surf4SuRFEFvvEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerIN4surf4SuRFEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1096|0);
}
function __ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3556|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyIN4surf4SuRF4IterEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeIN4surf4SuRF4IterEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDIN4surf4SuRF4IterEEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterIN4surf4SuRF4IterEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterIN4surf4SuRF4IterEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorIN4surf4SuRF4IterEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZN4surf4SuRF4IterD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDIN4surf4SuRF4IterEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN4surf4SuRF4IterEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4surf4SuRF4IterEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPN4surf4SuRF4IterEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4surf4SuRF4IterEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKN4surf4SuRF4IterEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDIN4surf4SuRF4IterEEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (264|0);
}
function __ZN10emscripten8internal11LightTypeIDIN4surf4SuRF4IterEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (264|0);
}
function __ZN10emscripten8internal11LightTypeIDIPN4surf4SuRF4IterEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (272|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKN4surf4SuRF4IterEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (288|0);
}
function __ZN10emscripten8internal13MethodInvokerIMN4surf4SuRF4IterEKFbvEbPKS4_JEE6invokeERKS6_S8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal11BindingTypeIPKN4surf4SuRF4IterEE12fromWireTypeES6_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($2) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (FUNCTION_TABLE_ii[$11 & 127]($4)|0);
 $13 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($12)|0);
 return ($13|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIKN4surf4SuRF4IterEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIKN4surf4SuRF4IterEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerIKN4surf4SuRF4IterEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMN4surf4SuRF4IterEKFbvEEEPT_RKS7_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPKN4surf4SuRF4IterEE12fromWireTypeES6_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerIKN4surf4SuRF4IterEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1104|0);
}
function __ZN10emscripten8internal13MethodInvokerIMN4surf4SuRF4IterEKFiRKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEiPKS4_JSD_EE6invokeERKSF_SH_PNS0_11BindingTypeISB_EUt_E($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 12|0;
 $4 = sp;
 $5 = (__ZN10emscripten8internal11BindingTypeIPKN4surf4SuRF4IterEE12fromWireTypeES6_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $6 = $$unpack5 >> 1;
 $7 = (($5) + ($6)|0);
 $8 = $$unpack5 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $13 = $$unpack;
  $14 = $13;
 } else {
  $10 = HEAP32[$7>>2]|0;
  $11 = (($10) + ($$unpack)|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 }
 __ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($4,$2);
 $15 = (FUNCTION_TABLE_iii[$14 & 127]($7,$4)|0);
 HEAP32[$3>>2] = $15;
 $16 = (__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi($3)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($4);
 STACKTOP = sp;return ($16|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerIKN4surf4SuRF4IterEEERKNSt3__212basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiNS0_17AllowedRawPointerIKN4surf4SuRF4IterEEERKNSt3__212basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNS0_17AllowedRawPointerIKN4surf4SuRF4IterEEERKNSt3__212basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMN4surf4SuRF4IterEKFiRKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEPT_RKSG_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiNS0_17AllowedRawPointerIKN4surf4SuRF4IterEEERKNSt3__212basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1112|0);
}
function __ZN10emscripten8internal13MethodInvokerIMN4surf4SuRF4IterEKFNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEvESB_PKS4_JEE6invokeERKSD_SF_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPKN4surf4SuRF4IterEE12fromWireTypeES6_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $4 = $$unpack4 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack4 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 FUNCTION_TABLE_vii[$12 & 127]($2,$5);
 $13 = (__ZN10emscripten8internal11BindingTypeINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($2)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 STACKTOP = sp;return ($13|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_17AllowedRawPointerIKN4surf4SuRF4IterEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS0_17AllowedRawPointerIKN4surf4SuRF4IterEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_17AllowedRawPointerIKN4surf4SuRF4IterEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMN4surf4SuRF4IterEKFNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEvEEEPT_RKSE_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNSt3__212basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS0_17AllowedRawPointerIKN4surf4SuRF4IterEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1124|0);
}
function __ZN10emscripten8internal13MethodInvokerIMN4surf4SuRF4IterEFbiEbPS4_JiEE6invokeERKS6_S7_i($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIPN4surf4SuRF4IterEE12fromWireTypeES5_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($2)|0);
 $14 = (FUNCTION_TABLE_iii[$13 & 127]($5,$12)|0);
 $15 = (__ZN10emscripten8internal11BindingTypeIbE10toWireTypeEb($14)|0);
 return ($15|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIN4surf4SuRF4IterEEEiEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJbNS0_17AllowedRawPointerIN4surf4SuRF4IterEEEiEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerIN4surf4SuRF4IterEEEiEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMN4surf4SuRF4IterEFbiEEEPT_RKS7_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPN4surf4SuRF4IterEE12fromWireTypeES5_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJbNS0_17AllowedRawPointerIN4surf4SuRF4IterEEEiEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1132|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyIN4surf16SuRFAccessHelperEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeIN4surf16SuRFAccessHelperEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDIN4surf16SuRFAccessHelperEEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterIN4surf16SuRFAccessHelperEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterIN4surf16SuRFAccessHelperEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorIN4surf16SuRFAccessHelperEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDIN4surf16SuRFAccessHelperEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN4surf16SuRFAccessHelperEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4surf16SuRFAccessHelperEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPN4surf16SuRFAccessHelperEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4surf16SuRFAccessHelperEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKN4surf16SuRFAccessHelperEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDIN4surf16SuRFAccessHelperEEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (304|0);
}
function __ZN10emscripten8internal11LightTypeIDIN4surf16SuRFAccessHelperEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (304|0);
}
function __ZN10emscripten8internal11LightTypeIDIPN4surf16SuRFAccessHelperEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (312|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKN4surf16SuRFAccessHelperEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (328|0);
}
function __ZN10emscripten8internal12operator_newIN4surf16SuRFAccessHelperEJRKNS2_4SuRFEEEEPT_DpOT0_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(4)|0);
 __ZN4surf16SuRFAccessHelperC2ERKNS_4SuRFE($1,$0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerIPN4surf16SuRFAccessHelperEJRKNS2_4SuRFEEE6invokeEPFS4_S7_EPS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal18GenericBindingTypeIN4surf4SuRFEE12fromWireTypeEPS3_($1)|0);
 $3 = (FUNCTION_TABLE_ii[$0 & 127]($2)|0);
 $4 = (__ZN10emscripten8internal11BindingTypeIPN4surf16SuRFAccessHelperEE10toWireTypeES4_($3)|0);
 return ($4|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4surf16SuRFAccessHelperERKNS5_4SuRFEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4surf16SuRFAccessHelperERKNS5_4SuRFEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIN4surf16SuRFAccessHelperEEERKNS4_4SuRFEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPN4surf16SuRFAccessHelperEE10toWireTypeES4_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal18GenericBindingTypeIN4surf4SuRFEE12fromWireTypeEPS3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIN4surf16SuRFAccessHelperEEERKNS4_4SuRFEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1144|0);
}
function __ZN4surf16SuRFAccessHelperC2ERKNS_4SuRFE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function __ZN10emscripten8internal13MethodInvokerIMN4surf16SuRFAccessHelperEKFjvEjPKS3_JEE6invokeERKS5_S7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPKN4surf16SuRFAccessHelperEE12fromWireTypeES5_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (FUNCTION_TABLE_ii[$12 & 127]($5)|0);
 HEAP32[$2>>2] = $13;
 $14 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($2)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf16SuRFAccessHelperEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf16SuRFAccessHelperEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerIKN4surf16SuRFAccessHelperEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMN4surf16SuRFAccessHelperEKFjvEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPKN4surf16SuRFAccessHelperEE12fromWireTypeES5_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerIKN4surf16SuRFAccessHelperEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1152|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyIN4surf11SuRFBuilderEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeIN4surf11SuRFBuilderEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDIN4surf11SuRFBuilderEEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterIN4surf11SuRFBuilderEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterIN4surf11SuRFBuilderEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorIN4surf11SuRFBuilderEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZN4surf11SuRFBuilderD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDIN4surf11SuRFBuilderEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN4surf11SuRFBuilderEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4surf11SuRFBuilderEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPN4surf11SuRFBuilderEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4surf11SuRFBuilderEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKN4surf11SuRFBuilderEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDIN4surf11SuRFBuilderEEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (344|0);
}
function __ZN10emscripten8internal11LightTypeIDIN4surf11SuRFBuilderEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (344|0);
}
function __ZN10emscripten8internal11LightTypeIDIPN4surf11SuRFBuilderEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (352|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKN4surf11SuRFBuilderEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (368|0);
}
function __ZN10emscripten8internal12operator_newIN4surf11SuRFBuilderEJbjNS2_10SuffixTypeEjjEEEPT_DpOT0_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__Znwj(144)|0);
 $6 = HEAP8[$0>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)!=(0);
 $9 = HEAP32[$1>>2]|0;
 $10 = HEAP32[$2>>2]|0;
 $11 = HEAP32[$3>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 __ZN4surf11SuRFBuilderC2EbjNS_10SuffixTypeEjj($5,$8,$9,$10,$11,$12);
 return ($5|0);
}
function __ZN10emscripten8internal7InvokerIPN4surf11SuRFBuilderEJObOjONS2_10SuffixTypeES6_S6_EE6invokeEPFS4_S5_S6_S8_S6_S6_EbjS7_jj($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 $11 = (__ZN10emscripten8internal11BindingTypeIObE12fromWireTypeEb($1)|0);
 $12 = $11&1;
 HEAP8[$6>>0] = $12;
 $13 = (__ZN10emscripten8internal11BindingTypeIOjE12fromWireTypeEj($2)|0);
 HEAP32[$7>>2] = $13;
 $14 = (__ZN10emscripten8internal11BindingTypeION4surf10SuffixTypeEE12fromWireTypeES3_($3)|0);
 HEAP32[$8>>2] = $14;
 $15 = (__ZN10emscripten8internal11BindingTypeIOjE12fromWireTypeEj($4)|0);
 HEAP32[$9>>2] = $15;
 $16 = (__ZN10emscripten8internal11BindingTypeIOjE12fromWireTypeEj($5)|0);
 HEAP32[$10>>2] = $16;
 $17 = (FUNCTION_TABLE_iiiiii[$0 & 127]($6,$7,$8,$9,$10)|0);
 $18 = (__ZN10emscripten8internal11BindingTypeIPN4surf11SuRFBuilderEE10toWireTypeES4_($17)|0);
 STACKTOP = sp;return ($18|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4surf11SuRFBuilderEObOjONS5_10SuffixTypeES9_S9_EE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 6;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4surf11SuRFBuilderEObOjONS5_10SuffixTypeES9_S9_EE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIN4surf11SuRFBuilderEEEObOjONS4_10SuffixTypeES8_S8_EEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPN4surf11SuRFBuilderEE10toWireTypeES4_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal11BindingTypeIObE12fromWireTypeEb($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal11BindingTypeIbE12fromWireTypeEb($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIOjE12fromWireTypeEj($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal11BindingTypeIjE12fromWireTypeEj($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeION4surf10SuffixTypeEE12fromWireTypeES3_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal15EnumBindingTypeIN4surf10SuffixTypeEE12fromWireTypeES3_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIN4surf11SuRFBuilderEEEObOjONS4_10SuffixTypeES8_S8_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1160|0);
}
function __ZN10emscripten8internal13MethodInvokerIMN4surf11SuRFBuilderEFvRKNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEvPS3_JSF_EE6invokeERKSH_SI_PSD_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIPN4surf11SuRFBuilderEE12fromWireTypeES4_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $4 = $$unpack4 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack4 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE12fromWireTypeEPSB_($2)|0);
 FUNCTION_TABLE_vii[$13 & 127]($5,$12);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN4surf11SuRFBuilderEEERKNSt3__26vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIN4surf11SuRFBuilderEEERKNSt3__26vectorINS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENSD_ISF_EEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerIN4surf11SuRFBuilderEEERKNSt3__26vectorINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENSC_ISE_EEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMN4surf11SuRFBuilderEFvRKNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEEEPT_RKSI_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPN4surf11SuRFBuilderEE12fromWireTypeES4_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerIN4surf11SuRFBuilderEEERKNSt3__26vectorINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENSC_ISE_EEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1184|0);
}
function __ZN10emscripten8internal13MethodInvokerIMN4surf11SuRFBuilderEKFjvEjPKS3_JEE6invokeERKS5_S7_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (__ZN10emscripten8internal11BindingTypeIPKN4surf11SuRFBuilderEE12fromWireTypeES5_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $4 = $$unpack3 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack3 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $12 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $12 = $10;
 }
 $13 = (FUNCTION_TABLE_ii[$12 & 127]($5)|0);
 HEAP32[$2>>2] = $13;
 $14 = (__ZN10emscripten8internal11BindingTypeIjE10toWireTypeERKj($2)|0);
 STACKTOP = sp;return ($14|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf11SuRFBuilderEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJjNS0_17AllowedRawPointerIKN4surf11SuRFBuilderEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerIKN4surf11SuRFBuilderEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMN4surf11SuRFBuilderEKFjvEEEPT_RKS6_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPKN4surf11SuRFBuilderEE12fromWireTypeES5_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJjNS0_17AllowedRawPointerIKN4surf11SuRFBuilderEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1196|0);
}
function __ZN10emscripten8internal13MethodInvokerIMN4surf11SuRFBuilderEKFNS2_10SuffixTypeEvES4_PKS3_JEE6invokeERKS6_S8_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$elt2 = 0, $$unpack = 0, $$unpack3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal11BindingTypeIPKN4surf11SuRFBuilderEE12fromWireTypeES5_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt2 = ((($0)) + 4|0);
 $$unpack3 = HEAP32[$$elt2>>2]|0;
 $3 = $$unpack3 >> 1;
 $4 = (($2) + ($3)|0);
 $5 = $$unpack3 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $10 = $$unpack;
  $11 = $10;
 } else {
  $7 = HEAP32[$4>>2]|0;
  $8 = (($7) + ($$unpack)|0);
  $9 = HEAP32[$8>>2]|0;
  $11 = $9;
 }
 $12 = (FUNCTION_TABLE_ii[$11 & 127]($4)|0);
 $13 = (__ZN10emscripten8internal15EnumBindingTypeIN4surf10SuffixTypeEE10toWireTypeES3_($12)|0);
 return ($13|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4surf10SuffixTypeENS0_17AllowedRawPointerIKNS4_11SuRFBuilderEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJN4surf10SuffixTypeENS0_17AllowedRawPointerIKNS4_11SuRFBuilderEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4surf10SuffixTypeENS0_17AllowedRawPointerIKNS3_11SuRFBuilderEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMN4surf11SuRFBuilderEKFNS2_10SuffixTypeEvEEEPT_RKS7_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal15EnumBindingTypeIN4surf10SuffixTypeEE10toWireTypeES3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJN4surf10SuffixTypeENS0_17AllowedRawPointerIKNS3_11SuRFBuilderEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1204|0);
}
function __ZN10emscripten8internal11NoBaseClass6verifyIN4surf23SuRFBuilderAccessHelperEEEvv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10emscripten8internal13getActualTypeIN4surf23SuRFBuilderAccessHelperEEEPKvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14getLightTypeIDIN4surf23SuRFBuilderAccessHelperEEEPKvRKT_($0)|0);
 return ($1|0);
}
function __ZN10emscripten8internal11NoBaseClass11getUpcasterIN4surf23SuRFBuilderAccessHelperEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal11NoBaseClass13getDowncasterIN4surf23SuRFBuilderAccessHelperEEEPFvvEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZN10emscripten8internal14raw_destructorIN4surf23SuRFBuilderAccessHelperEEEvPT_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 __ZdlPv($0);
 return;
}
function __ZN10emscripten8internal6TypeIDIN4surf23SuRFBuilderAccessHelperEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIN4surf23SuRFBuilderAccessHelperEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIN4surf23SuRFBuilderAccessHelperEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPN4surf23SuRFBuilderAccessHelperEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIPKN4surf23SuRFBuilderAccessHelperEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal14getLightTypeIDIN4surf23SuRFBuilderAccessHelperEEEPKvRKT_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (384|0);
}
function __ZN10emscripten8internal11LightTypeIDIN4surf23SuRFBuilderAccessHelperEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (384|0);
}
function __ZN10emscripten8internal11LightTypeIDIPN4surf23SuRFBuilderAccessHelperEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (392|0);
}
function __ZN10emscripten8internal11LightTypeIDIPKN4surf23SuRFBuilderAccessHelperEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (408|0);
}
function __ZN10emscripten8internal12operator_newIN4surf23SuRFBuilderAccessHelperEJRKNS2_11SuRFBuilderEEEEPT_DpOT0_($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(4)|0);
 __ZN4surf23SuRFBuilderAccessHelperC2ERKNS_11SuRFBuilderE($1,$0);
 return ($1|0);
}
function __ZN10emscripten8internal7InvokerIPN4surf23SuRFBuilderAccessHelperEJRKNS2_11SuRFBuilderEEE6invokeEPFS4_S7_EPS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__ZN10emscripten8internal18GenericBindingTypeIN4surf11SuRFBuilderEE12fromWireTypeEPS3_($1)|0);
 $3 = (FUNCTION_TABLE_ii[$0 & 127]($2)|0);
 $4 = (__ZN10emscripten8internal11BindingTypeIPN4surf23SuRFBuilderAccessHelperEE10toWireTypeES4_($3)|0);
 return ($4|0);
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4surf23SuRFBuilderAccessHelperERKNS5_11SuRFBuilderEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNK10emscripten8internal12WithPoliciesIJNS_18allow_raw_pointersEEE11ArgTypeListIJPN4surf23SuRFBuilderAccessHelperERKNS5_11SuRFBuilderEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIN4surf23SuRFBuilderAccessHelperEEERKNS4_11SuRFBuilderEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPN4surf23SuRFBuilderAccessHelperEE10toWireTypeES4_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal18GenericBindingTypeIN4surf11SuRFBuilderEE12fromWireTypeEPS3_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS0_17AllowedRawPointerIN4surf23SuRFBuilderAccessHelperEEERKNS4_11SuRFBuilderEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1212|0);
}
function __ZN4surf23SuRFBuilderAccessHelperC2ERKNS_11SuRFBuilderE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = $1;
 return;
}
function __ZN10emscripten8internal13MethodInvokerIMN4surf23SuRFBuilderAccessHelperEKFvRNSt3__26vectorIjNS4_9allocatorIjEEEES9_EvPKS3_JS9_S9_EE6invokeERKSB_SD_PS8_SH_($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$elt4 = 0, $$unpack = 0, $$unpack5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__ZN10emscripten8internal11BindingTypeIPKN4surf23SuRFBuilderAccessHelperEE12fromWireTypeES5_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt4 = ((($0)) + 4|0);
 $$unpack5 = HEAP32[$$elt4>>2]|0;
 $5 = $$unpack5 >> 1;
 $6 = (($4) + ($5)|0);
 $7 = $$unpack5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $12 = $$unpack;
  $15 = $12;
 } else {
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + ($$unpack)|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $13 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIjNS2_9allocatorIjEEEEE12fromWireTypeEPS6_($2)|0);
 $14 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIjNS2_9allocatorIjEEEEE12fromWireTypeEPS6_($3)|0);
 FUNCTION_TABLE_viii[$15 & 127]($6,$13,$14);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEESE_EE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEESE_EE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS8_9allocatorIjEEEESD_EEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMN4surf23SuRFBuilderAccessHelperEKFvRNSt3__26vectorIjNS4_9allocatorIjEEEES9_EEEPT_RKSC_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal11BindingTypeIPKN4surf23SuRFBuilderAccessHelperEE12fromWireTypeES5_($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS8_9allocatorIjEEEESD_EEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1220|0);
}
function __ZN10emscripten8internal13MethodInvokerIMN4surf23SuRFBuilderAccessHelperEKFvRNSt3__26vectorIjNS4_9allocatorIjEEEEEvPKS3_JS9_EE6invokeERKSB_SD_PS8_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$elt3 = 0, $$unpack = 0, $$unpack4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10emscripten8internal11BindingTypeIPKN4surf23SuRFBuilderAccessHelperEE12fromWireTypeES5_($1)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt3 = ((($0)) + 4|0);
 $$unpack4 = HEAP32[$$elt3>>2]|0;
 $4 = $$unpack4 >> 1;
 $5 = (($3) + ($4)|0);
 $6 = $$unpack4 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = $$unpack;
  $13 = $11;
 } else {
  $8 = HEAP32[$5>>2]|0;
  $9 = (($8) + ($$unpack)|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (__ZN10emscripten8internal18GenericBindingTypeINSt3__26vectorIjNS2_9allocatorIjEEEEE12fromWireTypeEPS6_($2)|0);
 FUNCTION_TABLE_vii[$13 & 127]($5,$12);
 return;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEEEE8getCountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS9_9allocatorIjEEEEEE8getTypesEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS8_9allocatorIjEEEEEEEE3getEv()|0);
 return ($1|0);
}
function __ZN10emscripten8internal10getContextIMN4surf23SuRFBuilderAccessHelperEKFvRNSt3__26vectorIjNS4_9allocatorIjEEEEEEEPT_RKSC_($0) {
 $0 = $0|0;
 var $$elt1 = 0, $$repack4 = 0, $$unpack = 0, $$unpack2 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj(8)|0);
 $$unpack = HEAP32[$0>>2]|0;
 $$elt1 = ((($0)) + 4|0);
 $$unpack2 = HEAP32[$$elt1>>2]|0;
 HEAP32[$1>>2] = $$unpack;
 $$repack4 = ((($1)) + 4|0);
 HEAP32[$$repack4>>2] = $$unpack2;
 return ($1|0);
}
function __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS0_17AllowedRawPointerIKN4surf23SuRFBuilderAccessHelperEEERNSt3__26vectorIjNS8_9allocatorIjEEEEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1236|0);
}
function __GLOBAL__sub_I_js_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 ___cxx_global_var_init_1();
 ___cxx_global_var_init_3();
 return;
}
function __GLOBAL__sub_I_bind_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init_2();
 return;
}
function ___cxx_global_var_init_2() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev(0);
 return;
}
function __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDIvE3getEv()|0);
 __embind_register_void(($1|0),(3848|0));
 $2 = (__ZN10emscripten8internal6TypeIDIbE3getEv()|0);
 __embind_register_bool(($2|0),(3853|0),1,1,0);
 __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerItEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc();
 __ZN12_GLOBAL__N_1L16register_integerImEEvPKc();
 __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc();
 __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc();
 $3 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 __embind_register_std_string(($3|0),(3858|0));
 $4 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 __embind_register_std_string(($4|0),(3870|0));
 $5 = (__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 __embind_register_std_wstring(($5|0),4,(3903|0));
 $6 = (__ZN10emscripten8internal6TypeIDINS_3valEE3getEv()|0);
 __embind_register_emval(($6|0),(3916|0));
 __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(3932);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(3969);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(4008);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(4039);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(4079);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(4108);
 __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc(4146);
 __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc(4178);
 __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc(4211);
 __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc(4244);
 __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc(4278);
 __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc(4311);
 __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc();
 __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc();
 return;
}
function __ZN10emscripten8internal6TypeIDIvE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIvE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDIbE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIbE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIcE3getEv()|0);
 __embind_register_integer(($0|0),(5138|0),1,-128,127);
 return;
}
function __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIaE3getEv()|0);
 __embind_register_integer(($0|0),(5126|0),1,-128,127);
 return;
}
function __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIhE3getEv()|0);
 __embind_register_integer(($0|0),(5112|0),1,0,255);
 return;
}
function __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIsE3getEv()|0);
 __embind_register_integer(($0|0),(5106|0),2,-32768,32767);
 return;
}
function __ZN12_GLOBAL__N_1L16register_integerItEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDItE3getEv()|0);
 __embind_register_integer(($0|0),(5091|0),2,0,65535);
 return;
}
function __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIiE3getEv()|0);
 __embind_register_integer(($0|0),(5087|0),4,-2147483648,2147483647);
 return;
}
function __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIjE3getEv()|0);
 __embind_register_integer(($0|0),(5074|0),4,0,-1);
 return;
}
function __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIlE3getEv()|0);
 __embind_register_integer(($0|0),(5069|0),4,-2147483648,2147483647);
 return;
}
function __ZN12_GLOBAL__N_1L16register_integerImEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDImE3getEv()|0);
 __embind_register_integer(($0|0),(5055|0),4,0,-1);
 return;
}
function __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIfE3getEv()|0);
 __embind_register_float(($0|0),(5049|0),4);
 return;
}
function __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDIdE3getEv()|0);
 __embind_register_float(($0|0),(5042|0),8);
 return;
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal6TypeIDINS_3valEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv()|0);
 return ($0|0);
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv()|0);
 __embind_register_memory_view(($0|0),0,(4855|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv()|0);
 __embind_register_memory_view(($1|0),0,($0|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv()|0);
 __embind_register_memory_view(($1|0),1,($0|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv()|0);
 __embind_register_memory_view(($1|0),2,($0|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv()|0);
 __embind_register_memory_view(($1|0),3,($0|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv()|0);
 __embind_register_memory_view(($1|0),4,($0|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv()|0);
 __embind_register_memory_view(($1|0),5,($0|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv()|0);
 __embind_register_memory_view(($0|0),4,(4608|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv()|0);
 __embind_register_memory_view(($0|0),5,(4538|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv()|0);
 __embind_register_memory_view(($0|0),6,(4476|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv()|0);
 __embind_register_memory_view(($0|0),7,(4413|0));
 return;
}
function __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv()|0);
 __embind_register_memory_view(($0|0),7,(4345|0));
 return;
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (424|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (432|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (440|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (448|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (456|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (464|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (472|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (480|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (488|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (496|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (504|0);
}
function __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (512|0);
}
function __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (128|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (520|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (544|0);
}
function __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (104|0);
}
function __ZN10emscripten8internal6TypeIDIdE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIdE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIdE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (816|0);
}
function __ZN10emscripten8internal6TypeIDIfE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIfE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIfE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (808|0);
}
function __ZN10emscripten8internal6TypeIDImE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDImE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDImE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (800|0);
}
function __ZN10emscripten8internal6TypeIDIlE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIlE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIlE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (792|0);
}
function __ZN10emscripten8internal6TypeIDIjE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIjE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIjE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (784|0);
}
function __ZN10emscripten8internal6TypeIDIiE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIiE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIiE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (776|0);
}
function __ZN10emscripten8internal6TypeIDItE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDItE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDItE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (768|0);
}
function __ZN10emscripten8internal6TypeIDIsE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIsE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIsE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (760|0);
}
function __ZN10emscripten8internal6TypeIDIhE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIhE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIhE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (744|0);
}
function __ZN10emscripten8internal6TypeIDIaE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIaE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIaE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (752|0);
}
function __ZN10emscripten8internal6TypeIDIcE3getEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZN10emscripten8internal11LightTypeIDIcE3getEv()|0);
 return ($0|0);
}
function __ZN10emscripten8internal11LightTypeIDIcE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (736|0);
}
function __ZN10emscripten8internal11LightTypeIDIbE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (728|0);
}
function __ZN10emscripten8internal11LightTypeIDIvE3getEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (712|0);
}
function ___getTypeName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (___strdup($2)|0);
 return ($3|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0172$lcssa$i = 0, $$01724$i = 0, $$0173$lcssa$i = 0, $$01733$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0;
 var $$024367$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0, $$124466$i = 0;
 var $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i199 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$4236$i = 0, $$4329$lcssa$i = 0;
 var $$43298$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43357$i = 0, $$49$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i207 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i208Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0, $$sink1$i$i = 0;
 var $$sink12$i = 0, $$sink2$i = 0, $$sink2$i202 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i206 = 0, $not$$i = 0, $not$3$i = 0;
 var $or$cond$i = 0, $or$cond$i200 = 0, $or$cond1$i = 0, $or$cond1$i198 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[2070]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (8320 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[2070] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(8288)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (8320 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[2070] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(8300)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (8320 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[2070] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(8288)>>2] = $76;
     HEAP32[(8300)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(8284)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (8584 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($130|0)==(0|0);
     $$sink12$i = $131&1;
     $132 = (((($124)) + 16|0) + ($$sink12$i<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($133|0)==(0|0);
     if ($134) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01724$i = $124;$$01733$i = $128;$136 = $133;
      while(1) {
       $135 = ((($136)) + 4|0);
       $137 = HEAP32[$135>>2]|0;
       $138 = $137 & -8;
       $139 = (($138) - ($6))|0;
       $140 = ($139>>>0)<($$01733$i>>>0);
       $$$0173$i = $140 ? $139 : $$01733$i;
       $$$0172$i = $140 ? $136 : $$01724$i;
       $141 = ((($136)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       $$sink1$i = $143&1;
       $144 = (((($136)) + 16|0) + ($$sink1$i<<2)|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = ($145|0)==(0|0);
       if ($146) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01724$i = $$$0172$i;$$01733$i = $$$0173$i;$136 = $145;
       }
      }
     }
     $147 = (($$0172$lcssa$i) + ($6)|0);
     $148 = ($147>>>0)>($$0172$lcssa$i>>>0);
     if ($148) {
      $149 = ((($$0172$lcssa$i)) + 24|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ((($$0172$lcssa$i)) + 12|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = ($152|0)==($$0172$lcssa$i|0);
      do {
       if ($153) {
        $158 = ((($$0172$lcssa$i)) + 20|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = ($159|0)==(0|0);
        if ($160) {
         $161 = ((($$0172$lcssa$i)) + 16|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = ($162|0)==(0|0);
         if ($163) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $162;$$1178$i = $161;
         }
        } else {
         $$1176$i = $159;$$1178$i = $158;
        }
        while(1) {
         $164 = ((($$1176$i)) + 20|0);
         $165 = HEAP32[$164>>2]|0;
         $166 = ($165|0)==(0|0);
         if (!($166)) {
          $$1176$i = $165;$$1178$i = $164;
          continue;
         }
         $167 = ((($$1176$i)) + 16|0);
         $168 = HEAP32[$167>>2]|0;
         $169 = ($168|0)==(0|0);
         if ($169) {
          break;
         } else {
          $$1176$i = $168;$$1178$i = $167;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $154 = ((($$0172$lcssa$i)) + 8|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ((($155)) + 12|0);
        HEAP32[$156>>2] = $152;
        $157 = ((($152)) + 8|0);
        HEAP32[$157>>2] = $155;
        $$3$i = $152;
       }
      } while(0);
      $170 = ($150|0)==(0|0);
      do {
       if (!($170)) {
        $171 = ((($$0172$lcssa$i)) + 28|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = (8584 + ($172<<2)|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($$0172$lcssa$i|0)==($174|0);
        if ($175) {
         HEAP32[$173>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $176 = 1 << $172;
          $177 = $176 ^ -1;
          $178 = $98 & $177;
          HEAP32[(8284)>>2] = $178;
          break;
         }
        } else {
         $179 = ((($150)) + 16|0);
         $180 = HEAP32[$179>>2]|0;
         $181 = ($180|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $181&1;
         $182 = (((($150)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$182>>2] = $$3$i;
         $183 = ($$3$i|0)==(0|0);
         if ($183) {
          break;
         }
        }
        $184 = ((($$3$i)) + 24|0);
        HEAP32[$184>>2] = $150;
        $185 = ((($$0172$lcssa$i)) + 16|0);
        $186 = HEAP32[$185>>2]|0;
        $187 = ($186|0)==(0|0);
        if (!($187)) {
         $188 = ((($$3$i)) + 16|0);
         HEAP32[$188>>2] = $186;
         $189 = ((($186)) + 24|0);
         HEAP32[$189>>2] = $$3$i;
        }
        $190 = ((($$0172$lcssa$i)) + 20|0);
        $191 = HEAP32[$190>>2]|0;
        $192 = ($191|0)==(0|0);
        if (!($192)) {
         $193 = ((($$3$i)) + 20|0);
         HEAP32[$193>>2] = $191;
         $194 = ((($191)) + 24|0);
         HEAP32[$194>>2] = $$3$i;
        }
       }
      } while(0);
      $195 = ($$0173$lcssa$i>>>0)<(16);
      if ($195) {
       $196 = (($$0173$lcssa$i) + ($6))|0;
       $197 = $196 | 3;
       $198 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = (($$0172$lcssa$i) + ($196)|0);
       $200 = ((($199)) + 4|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = $201 | 1;
       HEAP32[$200>>2] = $202;
      } else {
       $203 = $6 | 3;
       $204 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$204>>2] = $203;
       $205 = $$0173$lcssa$i | 1;
       $206 = ((($147)) + 4|0);
       HEAP32[$206>>2] = $205;
       $207 = (($147) + ($$0173$lcssa$i)|0);
       HEAP32[$207>>2] = $$0173$lcssa$i;
       $208 = ($33|0)==(0);
       if (!($208)) {
        $209 = HEAP32[(8300)>>2]|0;
        $210 = $33 >>> 3;
        $211 = $210 << 1;
        $212 = (8320 + ($211<<2)|0);
        $213 = 1 << $210;
        $214 = $8 & $213;
        $215 = ($214|0)==(0);
        if ($215) {
         $216 = $8 | $213;
         HEAP32[2070] = $216;
         $$pre$i = ((($212)) + 8|0);
         $$0$i = $212;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $217 = ((($212)) + 8|0);
         $218 = HEAP32[$217>>2]|0;
         $$0$i = $218;$$pre$phi$iZ2D = $217;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $209;
        $219 = ((($$0$i)) + 12|0);
        HEAP32[$219>>2] = $209;
        $220 = ((($209)) + 8|0);
        HEAP32[$220>>2] = $$0$i;
        $221 = ((($209)) + 12|0);
        HEAP32[$221>>2] = $212;
       }
       HEAP32[(8288)>>2] = $$0173$lcssa$i;
       HEAP32[(8300)>>2] = $147;
      }
      $222 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $222;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $223 = ($0>>>0)>(4294967231);
   if ($223) {
    $$0192 = -1;
   } else {
    $224 = (($0) + 11)|0;
    $225 = $224 & -8;
    $226 = HEAP32[(8284)>>2]|0;
    $227 = ($226|0)==(0);
    if ($227) {
     $$0192 = $225;
    } else {
     $228 = (0 - ($225))|0;
     $229 = $224 >>> 8;
     $230 = ($229|0)==(0);
     if ($230) {
      $$0336$i = 0;
     } else {
      $231 = ($225>>>0)>(16777215);
      if ($231) {
       $$0336$i = 31;
      } else {
       $232 = (($229) + 1048320)|0;
       $233 = $232 >>> 16;
       $234 = $233 & 8;
       $235 = $229 << $234;
       $236 = (($235) + 520192)|0;
       $237 = $236 >>> 16;
       $238 = $237 & 4;
       $239 = $238 | $234;
       $240 = $235 << $238;
       $241 = (($240) + 245760)|0;
       $242 = $241 >>> 16;
       $243 = $242 & 2;
       $244 = $239 | $243;
       $245 = (14 - ($244))|0;
       $246 = $240 << $243;
       $247 = $246 >>> 15;
       $248 = (($245) + ($247))|0;
       $249 = $248 << 1;
       $250 = (($248) + 7)|0;
       $251 = $225 >>> $250;
       $252 = $251 & 1;
       $253 = $252 | $249;
       $$0336$i = $253;
      }
     }
     $254 = (8584 + ($$0336$i<<2)|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = ($255|0)==(0|0);
     L74: do {
      if ($256) {
       $$2333$i = 0;$$3$i199 = 0;$$3328$i = $228;
       label = 57;
      } else {
       $257 = ($$0336$i|0)==(31);
       $258 = $$0336$i >>> 1;
       $259 = (25 - ($258))|0;
       $260 = $257 ? 0 : $259;
       $261 = $225 << $260;
       $$0320$i = 0;$$0325$i = $228;$$0331$i = $255;$$0337$i = $261;$$0340$i = 0;
       while(1) {
        $262 = ((($$0331$i)) + 4|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $263 & -8;
        $265 = (($264) - ($225))|0;
        $266 = ($265>>>0)<($$0325$i>>>0);
        if ($266) {
         $267 = ($265|0)==(0);
         if ($267) {
          $$43298$i = 0;$$43357$i = $$0331$i;$$49$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $265;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $268 = ((($$0331$i)) + 20|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = $$0337$i >>> 31;
        $271 = (((($$0331$i)) + 16|0) + ($270<<2)|0);
        $272 = HEAP32[$271>>2]|0;
        $273 = ($269|0)==(0|0);
        $274 = ($269|0)==($272|0);
        $or$cond1$i198 = $273 | $274;
        $$1341$i = $or$cond1$i198 ? $$0340$i : $269;
        $275 = ($272|0)==(0|0);
        $not$3$i = $275 ^ 1;
        $276 = $not$3$i&1;
        $$0337$$i = $$0337$i << $276;
        if ($275) {
         $$2333$i = $$1341$i;$$3$i199 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $272;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $277 = ($$2333$i|0)==(0|0);
      $278 = ($$3$i199|0)==(0|0);
      $or$cond$i200 = $277 & $278;
      if ($or$cond$i200) {
       $279 = 2 << $$0336$i;
       $280 = (0 - ($279))|0;
       $281 = $279 | $280;
       $282 = $226 & $281;
       $283 = ($282|0)==(0);
       if ($283) {
        $$0192 = $225;
        break;
       }
       $284 = (0 - ($282))|0;
       $285 = $282 & $284;
       $286 = (($285) + -1)|0;
       $287 = $286 >>> 12;
       $288 = $287 & 16;
       $289 = $286 >>> $288;
       $290 = $289 >>> 5;
       $291 = $290 & 8;
       $292 = $291 | $288;
       $293 = $289 >>> $291;
       $294 = $293 >>> 2;
       $295 = $294 & 4;
       $296 = $292 | $295;
       $297 = $293 >>> $295;
       $298 = $297 >>> 1;
       $299 = $298 & 2;
       $300 = $296 | $299;
       $301 = $297 >>> $299;
       $302 = $301 >>> 1;
       $303 = $302 & 1;
       $304 = $300 | $303;
       $305 = $301 >>> $303;
       $306 = (($304) + ($305))|0;
       $307 = (8584 + ($306<<2)|0);
       $308 = HEAP32[$307>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $308;
      } else {
       $$4$ph$i = $$3$i199;$$4335$ph$i = $$2333$i;
      }
      $309 = ($$4335$ph$i|0)==(0|0);
      if ($309) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$43298$i = $$3328$i;$$43357$i = $$4335$ph$i;$$49$i = $$4$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $310 = ((($$43357$i)) + 4|0);
       $311 = HEAP32[$310>>2]|0;
       $312 = $311 & -8;
       $313 = (($312) - ($225))|0;
       $314 = ($313>>>0)<($$43298$i>>>0);
       $$$4329$i = $314 ? $313 : $$43298$i;
       $$4335$$4$i = $314 ? $$43357$i : $$49$i;
       $315 = ((($$43357$i)) + 16|0);
       $316 = HEAP32[$315>>2]|0;
       $317 = ($316|0)==(0|0);
       $$sink2$i202 = $317&1;
       $318 = (((($$43357$i)) + 16|0) + ($$sink2$i202<<2)|0);
       $319 = HEAP32[$318>>2]|0;
       $320 = ($319|0)==(0|0);
       if ($320) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$43298$i = $$$4329$i;$$43357$i = $319;$$49$i = $$4335$$4$i;
        label = 61;
       }
      }
     }
     $321 = ($$4$lcssa$i|0)==(0|0);
     if ($321) {
      $$0192 = $225;
     } else {
      $322 = HEAP32[(8288)>>2]|0;
      $323 = (($322) - ($225))|0;
      $324 = ($$4329$lcssa$i>>>0)<($323>>>0);
      if ($324) {
       $325 = (($$4$lcssa$i) + ($225)|0);
       $326 = ($325>>>0)>($$4$lcssa$i>>>0);
       if (!($326)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $327 = ((($$4$lcssa$i)) + 24|0);
       $328 = HEAP32[$327>>2]|0;
       $329 = ((($$4$lcssa$i)) + 12|0);
       $330 = HEAP32[$329>>2]|0;
       $331 = ($330|0)==($$4$lcssa$i|0);
       do {
        if ($331) {
         $336 = ((($$4$lcssa$i)) + 20|0);
         $337 = HEAP32[$336>>2]|0;
         $338 = ($337|0)==(0|0);
         if ($338) {
          $339 = ((($$4$lcssa$i)) + 16|0);
          $340 = HEAP32[$339>>2]|0;
          $341 = ($340|0)==(0|0);
          if ($341) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $340;$$1351$i = $339;
          }
         } else {
          $$1347$i = $337;$$1351$i = $336;
         }
         while(1) {
          $342 = ((($$1347$i)) + 20|0);
          $343 = HEAP32[$342>>2]|0;
          $344 = ($343|0)==(0|0);
          if (!($344)) {
           $$1347$i = $343;$$1351$i = $342;
           continue;
          }
          $345 = ((($$1347$i)) + 16|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($346|0)==(0|0);
          if ($347) {
           break;
          } else {
           $$1347$i = $346;$$1351$i = $345;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $332 = ((($$4$lcssa$i)) + 8|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ((($333)) + 12|0);
         HEAP32[$334>>2] = $330;
         $335 = ((($330)) + 8|0);
         HEAP32[$335>>2] = $333;
         $$3349$i = $330;
        }
       } while(0);
       $348 = ($328|0)==(0|0);
       do {
        if ($348) {
         $431 = $226;
        } else {
         $349 = ((($$4$lcssa$i)) + 28|0);
         $350 = HEAP32[$349>>2]|0;
         $351 = (8584 + ($350<<2)|0);
         $352 = HEAP32[$351>>2]|0;
         $353 = ($$4$lcssa$i|0)==($352|0);
         if ($353) {
          HEAP32[$351>>2] = $$3349$i;
          $cond$i206 = ($$3349$i|0)==(0|0);
          if ($cond$i206) {
           $354 = 1 << $350;
           $355 = $354 ^ -1;
           $356 = $226 & $355;
           HEAP32[(8284)>>2] = $356;
           $431 = $356;
           break;
          }
         } else {
          $357 = ((($328)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)!=($$4$lcssa$i|0);
          $$sink3$i = $359&1;
          $360 = (((($328)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$360>>2] = $$3349$i;
          $361 = ($$3349$i|0)==(0|0);
          if ($361) {
           $431 = $226;
           break;
          }
         }
         $362 = ((($$3349$i)) + 24|0);
         HEAP32[$362>>2] = $328;
         $363 = ((($$4$lcssa$i)) + 16|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if (!($365)) {
          $366 = ((($$3349$i)) + 16|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
         }
         $368 = ((($$4$lcssa$i)) + 20|0);
         $369 = HEAP32[$368>>2]|0;
         $370 = ($369|0)==(0|0);
         if ($370) {
          $431 = $226;
         } else {
          $371 = ((($$3349$i)) + 20|0);
          HEAP32[$371>>2] = $369;
          $372 = ((($369)) + 24|0);
          HEAP32[$372>>2] = $$3349$i;
          $431 = $226;
         }
        }
       } while(0);
       $373 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($373) {
         $374 = (($$4329$lcssa$i) + ($225))|0;
         $375 = $374 | 3;
         $376 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$376>>2] = $375;
         $377 = (($$4$lcssa$i) + ($374)|0);
         $378 = ((($377)) + 4|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = $379 | 1;
         HEAP32[$378>>2] = $380;
        } else {
         $381 = $225 | 3;
         $382 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$382>>2] = $381;
         $383 = $$4329$lcssa$i | 1;
         $384 = ((($325)) + 4|0);
         HEAP32[$384>>2] = $383;
         $385 = (($325) + ($$4329$lcssa$i)|0);
         HEAP32[$385>>2] = $$4329$lcssa$i;
         $386 = $$4329$lcssa$i >>> 3;
         $387 = ($$4329$lcssa$i>>>0)<(256);
         if ($387) {
          $388 = $386 << 1;
          $389 = (8320 + ($388<<2)|0);
          $390 = HEAP32[2070]|0;
          $391 = 1 << $386;
          $392 = $390 & $391;
          $393 = ($392|0)==(0);
          if ($393) {
           $394 = $390 | $391;
           HEAP32[2070] = $394;
           $$pre$i207 = ((($389)) + 8|0);
           $$0345$i = $389;$$pre$phi$i208Z2D = $$pre$i207;
          } else {
           $395 = ((($389)) + 8|0);
           $396 = HEAP32[$395>>2]|0;
           $$0345$i = $396;$$pre$phi$i208Z2D = $395;
          }
          HEAP32[$$pre$phi$i208Z2D>>2] = $325;
          $397 = ((($$0345$i)) + 12|0);
          HEAP32[$397>>2] = $325;
          $398 = ((($325)) + 8|0);
          HEAP32[$398>>2] = $$0345$i;
          $399 = ((($325)) + 12|0);
          HEAP32[$399>>2] = $389;
          break;
         }
         $400 = $$4329$lcssa$i >>> 8;
         $401 = ($400|0)==(0);
         if ($401) {
          $$0339$i = 0;
         } else {
          $402 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($402) {
           $$0339$i = 31;
          } else {
           $403 = (($400) + 1048320)|0;
           $404 = $403 >>> 16;
           $405 = $404 & 8;
           $406 = $400 << $405;
           $407 = (($406) + 520192)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 4;
           $410 = $409 | $405;
           $411 = $406 << $409;
           $412 = (($411) + 245760)|0;
           $413 = $412 >>> 16;
           $414 = $413 & 2;
           $415 = $410 | $414;
           $416 = (14 - ($415))|0;
           $417 = $411 << $414;
           $418 = $417 >>> 15;
           $419 = (($416) + ($418))|0;
           $420 = $419 << 1;
           $421 = (($419) + 7)|0;
           $422 = $$4329$lcssa$i >>> $421;
           $423 = $422 & 1;
           $424 = $423 | $420;
           $$0339$i = $424;
          }
         }
         $425 = (8584 + ($$0339$i<<2)|0);
         $426 = ((($325)) + 28|0);
         HEAP32[$426>>2] = $$0339$i;
         $427 = ((($325)) + 16|0);
         $428 = ((($427)) + 4|0);
         HEAP32[$428>>2] = 0;
         HEAP32[$427>>2] = 0;
         $429 = 1 << $$0339$i;
         $430 = $431 & $429;
         $432 = ($430|0)==(0);
         if ($432) {
          $433 = $431 | $429;
          HEAP32[(8284)>>2] = $433;
          HEAP32[$425>>2] = $325;
          $434 = ((($325)) + 24|0);
          HEAP32[$434>>2] = $425;
          $435 = ((($325)) + 12|0);
          HEAP32[$435>>2] = $325;
          $436 = ((($325)) + 8|0);
          HEAP32[$436>>2] = $325;
          break;
         }
         $437 = HEAP32[$425>>2]|0;
         $438 = ($$0339$i|0)==(31);
         $439 = $$0339$i >>> 1;
         $440 = (25 - ($439))|0;
         $441 = $438 ? 0 : $440;
         $442 = $$4329$lcssa$i << $441;
         $$0322$i = $442;$$0323$i = $437;
         while(1) {
          $443 = ((($$0323$i)) + 4|0);
          $444 = HEAP32[$443>>2]|0;
          $445 = $444 & -8;
          $446 = ($445|0)==($$4329$lcssa$i|0);
          if ($446) {
           label = 97;
           break;
          }
          $447 = $$0322$i >>> 31;
          $448 = (((($$0323$i)) + 16|0) + ($447<<2)|0);
          $449 = $$0322$i << 1;
          $450 = HEAP32[$448>>2]|0;
          $451 = ($450|0)==(0|0);
          if ($451) {
           label = 96;
           break;
          } else {
           $$0322$i = $449;$$0323$i = $450;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$448>>2] = $325;
          $452 = ((($325)) + 24|0);
          HEAP32[$452>>2] = $$0323$i;
          $453 = ((($325)) + 12|0);
          HEAP32[$453>>2] = $325;
          $454 = ((($325)) + 8|0);
          HEAP32[$454>>2] = $325;
          break;
         }
         else if ((label|0) == 97) {
          $455 = ((($$0323$i)) + 8|0);
          $456 = HEAP32[$455>>2]|0;
          $457 = ((($456)) + 12|0);
          HEAP32[$457>>2] = $325;
          HEAP32[$455>>2] = $325;
          $458 = ((($325)) + 8|0);
          HEAP32[$458>>2] = $456;
          $459 = ((($325)) + 12|0);
          HEAP32[$459>>2] = $$0323$i;
          $460 = ((($325)) + 24|0);
          HEAP32[$460>>2] = 0;
          break;
         }
        }
       } while(0);
       $461 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $461;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $225;
      }
     }
    }
   }
  }
 } while(0);
 $462 = HEAP32[(8288)>>2]|0;
 $463 = ($462>>>0)<($$0192>>>0);
 if (!($463)) {
  $464 = (($462) - ($$0192))|0;
  $465 = HEAP32[(8300)>>2]|0;
  $466 = ($464>>>0)>(15);
  if ($466) {
   $467 = (($465) + ($$0192)|0);
   HEAP32[(8300)>>2] = $467;
   HEAP32[(8288)>>2] = $464;
   $468 = $464 | 1;
   $469 = ((($467)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($465) + ($462)|0);
   HEAP32[$470>>2] = $464;
   $471 = $$0192 | 3;
   $472 = ((($465)) + 4|0);
   HEAP32[$472>>2] = $471;
  } else {
   HEAP32[(8288)>>2] = 0;
   HEAP32[(8300)>>2] = 0;
   $473 = $462 | 3;
   $474 = ((($465)) + 4|0);
   HEAP32[$474>>2] = $473;
   $475 = (($465) + ($462)|0);
   $476 = ((($475)) + 4|0);
   $477 = HEAP32[$476>>2]|0;
   $478 = $477 | 1;
   HEAP32[$476>>2] = $478;
  }
  $479 = ((($465)) + 8|0);
  $$0 = $479;
  STACKTOP = sp;return ($$0|0);
 }
 $480 = HEAP32[(8292)>>2]|0;
 $481 = ($480>>>0)>($$0192>>>0);
 if ($481) {
  $482 = (($480) - ($$0192))|0;
  HEAP32[(8292)>>2] = $482;
  $483 = HEAP32[(8304)>>2]|0;
  $484 = (($483) + ($$0192)|0);
  HEAP32[(8304)>>2] = $484;
  $485 = $482 | 1;
  $486 = ((($484)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = $$0192 | 3;
  $488 = ((($483)) + 4|0);
  HEAP32[$488>>2] = $487;
  $489 = ((($483)) + 8|0);
  $$0 = $489;
  STACKTOP = sp;return ($$0|0);
 }
 $490 = HEAP32[2188]|0;
 $491 = ($490|0)==(0);
 if ($491) {
  HEAP32[(8760)>>2] = 4096;
  HEAP32[(8756)>>2] = 4096;
  HEAP32[(8764)>>2] = -1;
  HEAP32[(8768)>>2] = -1;
  HEAP32[(8772)>>2] = 0;
  HEAP32[(8724)>>2] = 0;
  $492 = $1;
  $493 = $492 & -16;
  $494 = $493 ^ 1431655768;
  HEAP32[2188] = $494;
  $498 = 4096;
 } else {
  $$pre$i195 = HEAP32[(8760)>>2]|0;
  $498 = $$pre$i195;
 }
 $495 = (($$0192) + 48)|0;
 $496 = (($$0192) + 47)|0;
 $497 = (($498) + ($496))|0;
 $499 = (0 - ($498))|0;
 $500 = $497 & $499;
 $501 = ($500>>>0)>($$0192>>>0);
 if (!($501)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $502 = HEAP32[(8720)>>2]|0;
 $503 = ($502|0)==(0);
 if (!($503)) {
  $504 = HEAP32[(8712)>>2]|0;
  $505 = (($504) + ($500))|0;
  $506 = ($505>>>0)<=($504>>>0);
  $507 = ($505>>>0)>($502>>>0);
  $or$cond1$i = $506 | $507;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $508 = HEAP32[(8724)>>2]|0;
 $509 = $508 & 4;
 $510 = ($509|0)==(0);
 L167: do {
  if ($510) {
   $511 = HEAP32[(8304)>>2]|0;
   $512 = ($511|0)==(0|0);
   L169: do {
    if ($512) {
     label = 118;
    } else {
     $$0$i20$i = (8728);
     while(1) {
      $513 = HEAP32[$$0$i20$i>>2]|0;
      $514 = ($513>>>0)>($511>>>0);
      if (!($514)) {
       $515 = ((($$0$i20$i)) + 4|0);
       $516 = HEAP32[$515>>2]|0;
       $517 = (($513) + ($516)|0);
       $518 = ($517>>>0)>($511>>>0);
       if ($518) {
        break;
       }
      }
      $519 = ((($$0$i20$i)) + 8|0);
      $520 = HEAP32[$519>>2]|0;
      $521 = ($520|0)==(0|0);
      if ($521) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $520;
      }
     }
     $544 = (($497) - ($480))|0;
     $545 = $544 & $499;
     $546 = ($545>>>0)<(2147483647);
     if ($546) {
      $547 = (_sbrk(($545|0))|0);
      $548 = HEAP32[$$0$i20$i>>2]|0;
      $549 = HEAP32[$515>>2]|0;
      $550 = (($548) + ($549)|0);
      $551 = ($547|0)==($550|0);
      if ($551) {
       $552 = ($547|0)==((-1)|0);
       if ($552) {
        $$2234243136$i = $545;
       } else {
        $$723947$i = $545;$$748$i = $547;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $547;$$2253$ph$i = $545;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $522 = (_sbrk(0)|0);
     $523 = ($522|0)==((-1)|0);
     if ($523) {
      $$2234243136$i = 0;
     } else {
      $524 = $522;
      $525 = HEAP32[(8756)>>2]|0;
      $526 = (($525) + -1)|0;
      $527 = $526 & $524;
      $528 = ($527|0)==(0);
      $529 = (($526) + ($524))|0;
      $530 = (0 - ($525))|0;
      $531 = $529 & $530;
      $532 = (($531) - ($524))|0;
      $533 = $528 ? 0 : $532;
      $$$i = (($533) + ($500))|0;
      $534 = HEAP32[(8712)>>2]|0;
      $535 = (($$$i) + ($534))|0;
      $536 = ($$$i>>>0)>($$0192>>>0);
      $537 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $536 & $537;
      if ($or$cond$i) {
       $538 = HEAP32[(8720)>>2]|0;
       $539 = ($538|0)==(0);
       if (!($539)) {
        $540 = ($535>>>0)<=($534>>>0);
        $541 = ($535>>>0)>($538>>>0);
        $or$cond2$i = $540 | $541;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $542 = (_sbrk(($$$i|0))|0);
       $543 = ($542|0)==($522|0);
       if ($543) {
        $$723947$i = $$$i;$$748$i = $522;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $542;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $553 = (0 - ($$2253$ph$i))|0;
     $554 = ($$2247$ph$i|0)!=((-1)|0);
     $555 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $555 & $554;
     $556 = ($495>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $556 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $566 = ($$2247$ph$i|0)==((-1)|0);
      if ($566) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $557 = HEAP32[(8760)>>2]|0;
     $558 = (($496) - ($$2253$ph$i))|0;
     $559 = (($558) + ($557))|0;
     $560 = (0 - ($557))|0;
     $561 = $559 & $560;
     $562 = ($561>>>0)<(2147483647);
     if (!($562)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $563 = (_sbrk(($561|0))|0);
     $564 = ($563|0)==((-1)|0);
     if ($564) {
      (_sbrk(($553|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $565 = (($561) + ($$2253$ph$i))|0;
      $$723947$i = $565;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $567 = HEAP32[(8724)>>2]|0;
   $568 = $567 | 4;
   HEAP32[(8724)>>2] = $568;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $569 = ($500>>>0)<(2147483647);
  if ($569) {
   $570 = (_sbrk(($500|0))|0);
   $571 = (_sbrk(0)|0);
   $572 = ($570|0)!=((-1)|0);
   $573 = ($571|0)!=((-1)|0);
   $or$cond5$i = $572 & $573;
   $574 = ($570>>>0)<($571>>>0);
   $or$cond11$i = $574 & $or$cond5$i;
   $575 = $571;
   $576 = $570;
   $577 = (($575) - ($576))|0;
   $578 = (($$0192) + 40)|0;
   $579 = ($577>>>0)>($578>>>0);
   $$$4236$i = $579 ? $577 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $580 = ($570|0)==((-1)|0);
   $not$$i = $579 ^ 1;
   $581 = $580 | $not$$i;
   $or$cond49$i = $581 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $570;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $582 = HEAP32[(8712)>>2]|0;
  $583 = (($582) + ($$723947$i))|0;
  HEAP32[(8712)>>2] = $583;
  $584 = HEAP32[(8716)>>2]|0;
  $585 = ($583>>>0)>($584>>>0);
  if ($585) {
   HEAP32[(8716)>>2] = $583;
  }
  $586 = HEAP32[(8304)>>2]|0;
  $587 = ($586|0)==(0|0);
  do {
   if ($587) {
    $588 = HEAP32[(8296)>>2]|0;
    $589 = ($588|0)==(0|0);
    $590 = ($$748$i>>>0)<($588>>>0);
    $or$cond12$i = $589 | $590;
    if ($or$cond12$i) {
     HEAP32[(8296)>>2] = $$748$i;
    }
    HEAP32[(8728)>>2] = $$748$i;
    HEAP32[(8732)>>2] = $$723947$i;
    HEAP32[(8740)>>2] = 0;
    $591 = HEAP32[2188]|0;
    HEAP32[(8316)>>2] = $591;
    HEAP32[(8312)>>2] = -1;
    HEAP32[(8332)>>2] = (8320);
    HEAP32[(8328)>>2] = (8320);
    HEAP32[(8340)>>2] = (8328);
    HEAP32[(8336)>>2] = (8328);
    HEAP32[(8348)>>2] = (8336);
    HEAP32[(8344)>>2] = (8336);
    HEAP32[(8356)>>2] = (8344);
    HEAP32[(8352)>>2] = (8344);
    HEAP32[(8364)>>2] = (8352);
    HEAP32[(8360)>>2] = (8352);
    HEAP32[(8372)>>2] = (8360);
    HEAP32[(8368)>>2] = (8360);
    HEAP32[(8380)>>2] = (8368);
    HEAP32[(8376)>>2] = (8368);
    HEAP32[(8388)>>2] = (8376);
    HEAP32[(8384)>>2] = (8376);
    HEAP32[(8396)>>2] = (8384);
    HEAP32[(8392)>>2] = (8384);
    HEAP32[(8404)>>2] = (8392);
    HEAP32[(8400)>>2] = (8392);
    HEAP32[(8412)>>2] = (8400);
    HEAP32[(8408)>>2] = (8400);
    HEAP32[(8420)>>2] = (8408);
    HEAP32[(8416)>>2] = (8408);
    HEAP32[(8428)>>2] = (8416);
    HEAP32[(8424)>>2] = (8416);
    HEAP32[(8436)>>2] = (8424);
    HEAP32[(8432)>>2] = (8424);
    HEAP32[(8444)>>2] = (8432);
    HEAP32[(8440)>>2] = (8432);
    HEAP32[(8452)>>2] = (8440);
    HEAP32[(8448)>>2] = (8440);
    HEAP32[(8460)>>2] = (8448);
    HEAP32[(8456)>>2] = (8448);
    HEAP32[(8468)>>2] = (8456);
    HEAP32[(8464)>>2] = (8456);
    HEAP32[(8476)>>2] = (8464);
    HEAP32[(8472)>>2] = (8464);
    HEAP32[(8484)>>2] = (8472);
    HEAP32[(8480)>>2] = (8472);
    HEAP32[(8492)>>2] = (8480);
    HEAP32[(8488)>>2] = (8480);
    HEAP32[(8500)>>2] = (8488);
    HEAP32[(8496)>>2] = (8488);
    HEAP32[(8508)>>2] = (8496);
    HEAP32[(8504)>>2] = (8496);
    HEAP32[(8516)>>2] = (8504);
    HEAP32[(8512)>>2] = (8504);
    HEAP32[(8524)>>2] = (8512);
    HEAP32[(8520)>>2] = (8512);
    HEAP32[(8532)>>2] = (8520);
    HEAP32[(8528)>>2] = (8520);
    HEAP32[(8540)>>2] = (8528);
    HEAP32[(8536)>>2] = (8528);
    HEAP32[(8548)>>2] = (8536);
    HEAP32[(8544)>>2] = (8536);
    HEAP32[(8556)>>2] = (8544);
    HEAP32[(8552)>>2] = (8544);
    HEAP32[(8564)>>2] = (8552);
    HEAP32[(8560)>>2] = (8552);
    HEAP32[(8572)>>2] = (8560);
    HEAP32[(8568)>>2] = (8560);
    HEAP32[(8580)>>2] = (8568);
    HEAP32[(8576)>>2] = (8568);
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(8304)>>2] = $600;
    HEAP32[(8292)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($$748$i) + ($592)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(8768)>>2]|0;
    HEAP32[(8308)>>2] = $606;
   } else {
    $$024367$i = (8728);
    while(1) {
     $607 = HEAP32[$$024367$i>>2]|0;
     $608 = ((($$024367$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 143;
      break;
     }
     $612 = ((($$024367$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024367$i = $613;
     }
    }
    if ((label|0) == 143) {
     $615 = ((($$024367$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($607>>>0)<=($586>>>0);
      $620 = ($$748$i>>>0)>($586>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(8292)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($586)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($586) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(8304)>>2] = $631;
       HEAP32[(8292)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($586) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(8768)>>2]|0;
       HEAP32[(8308)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(8296)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(8296)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124466$i = (8728);
    while(1) {
     $641 = HEAP32[$$124466$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 151;
      break;
     }
     $643 = ((($$124466$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      $$0$i$i$i = (8728);
      break;
     } else {
      $$124466$i = $644;
     }
    }
    if ((label|0) == 151) {
     $646 = ((($$124466$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124466$i>>2] = $$748$i;
      $650 = ((($$124466$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($586|0)==($668|0);
      do {
       if ($676) {
        $677 = HEAP32[(8292)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(8292)>>2] = $678;
        HEAP32[(8304)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(8300)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(8288)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(8288)>>2] = $684;
         HEAP32[(8300)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L234: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[2070]|0;
            $703 = $702 & $701;
            HEAP32[2070] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (8584 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(8284)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(8284)>>2] = $736;
             break L234;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)!=($668|0);
             $$sink1$i$i = $739&1;
             $740 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$740>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L234;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0260$i$i = $754;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0260$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0260$i$i)|0);
        HEAP32[$760>>2] = $$0260$i$i;
        $761 = $$0260$i$i >>> 3;
        $762 = ($$0260$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (8320 + ($763<<2)|0);
         $765 = HEAP32[2070]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[2070] = $769;
          $$pre$i17$i = ((($764)) + 8|0);
          $$0268$i$i = $764;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0268$i$i = $771;$$pre$phi$i18$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $772 = ((($$0268$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0268$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0260$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0269$i$i = 0;
         } else {
          $777 = ($$0260$i$i>>>0)>(16777215);
          if ($777) {
           $$0269$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0260$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0269$i$i = $799;
         }
        } while(0);
        $800 = (8584 + ($$0269$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0269$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(8284)>>2]|0;
        $805 = 1 << $$0269$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(8284)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ($$0269$i$i|0)==(31);
        $814 = $$0269$i$i >>> 1;
        $815 = (25 - ($814))|0;
        $816 = $813 ? 0 : $815;
        $817 = $$0260$i$i << $816;
        $$0261$i$i = $817;$$0262$i$i = $812;
        while(1) {
         $818 = ((($$0262$i$i)) + 4|0);
         $819 = HEAP32[$818>>2]|0;
         $820 = $819 & -8;
         $821 = ($820|0)==($$0260$i$i|0);
         if ($821) {
          label = 192;
          break;
         }
         $822 = $$0261$i$i >>> 31;
         $823 = (((($$0262$i$i)) + 16|0) + ($822<<2)|0);
         $824 = $$0261$i$i << 1;
         $825 = HEAP32[$823>>2]|0;
         $826 = ($825|0)==(0|0);
         if ($826) {
          label = 191;
          break;
         } else {
          $$0261$i$i = $824;$$0262$i$i = $825;
         }
        }
        if ((label|0) == 191) {
         HEAP32[$823>>2] = $672;
         $827 = ((($672)) + 24|0);
         HEAP32[$827>>2] = $$0262$i$i;
         $828 = ((($672)) + 12|0);
         HEAP32[$828>>2] = $672;
         $829 = ((($672)) + 8|0);
         HEAP32[$829>>2] = $672;
         break;
        }
        else if ((label|0) == 192) {
         $830 = ((($$0262$i$i)) + 8|0);
         $831 = HEAP32[$830>>2]|0;
         $832 = ((($831)) + 12|0);
         HEAP32[$832>>2] = $672;
         HEAP32[$830>>2] = $672;
         $833 = ((($672)) + 8|0);
         HEAP32[$833>>2] = $831;
         $834 = ((($672)) + 12|0);
         HEAP32[$834>>2] = $$0262$i$i;
         $835 = ((($672)) + 24|0);
         HEAP32[$835>>2] = 0;
         break;
        }
       }
      } while(0);
      $960 = ((($660)) + 8|0);
      $$0 = $960;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (8728);
     }
    }
    while(1) {
     $836 = HEAP32[$$0$i$i$i>>2]|0;
     $837 = ($836>>>0)>($586>>>0);
     if (!($837)) {
      $838 = ((($$0$i$i$i)) + 4|0);
      $839 = HEAP32[$838>>2]|0;
      $840 = (($836) + ($839)|0);
      $841 = ($840>>>0)>($586>>>0);
      if ($841) {
       break;
      }
     }
     $842 = ((($$0$i$i$i)) + 8|0);
     $843 = HEAP32[$842>>2]|0;
     $$0$i$i$i = $843;
    }
    $844 = ((($840)) + -47|0);
    $845 = ((($844)) + 8|0);
    $846 = $845;
    $847 = $846 & 7;
    $848 = ($847|0)==(0);
    $849 = (0 - ($846))|0;
    $850 = $849 & 7;
    $851 = $848 ? 0 : $850;
    $852 = (($844) + ($851)|0);
    $853 = ((($586)) + 16|0);
    $854 = ($852>>>0)<($853>>>0);
    $855 = $854 ? $586 : $852;
    $856 = ((($855)) + 8|0);
    $857 = ((($855)) + 24|0);
    $858 = (($$723947$i) + -40)|0;
    $859 = ((($$748$i)) + 8|0);
    $860 = $859;
    $861 = $860 & 7;
    $862 = ($861|0)==(0);
    $863 = (0 - ($860))|0;
    $864 = $863 & 7;
    $865 = $862 ? 0 : $864;
    $866 = (($$748$i) + ($865)|0);
    $867 = (($858) - ($865))|0;
    HEAP32[(8304)>>2] = $866;
    HEAP32[(8292)>>2] = $867;
    $868 = $867 | 1;
    $869 = ((($866)) + 4|0);
    HEAP32[$869>>2] = $868;
    $870 = (($$748$i) + ($858)|0);
    $871 = ((($870)) + 4|0);
    HEAP32[$871>>2] = 40;
    $872 = HEAP32[(8768)>>2]|0;
    HEAP32[(8308)>>2] = $872;
    $873 = ((($855)) + 4|0);
    HEAP32[$873>>2] = 27;
    ;HEAP32[$856>>2]=HEAP32[(8728)>>2]|0;HEAP32[$856+4>>2]=HEAP32[(8728)+4>>2]|0;HEAP32[$856+8>>2]=HEAP32[(8728)+8>>2]|0;HEAP32[$856+12>>2]=HEAP32[(8728)+12>>2]|0;
    HEAP32[(8728)>>2] = $$748$i;
    HEAP32[(8732)>>2] = $$723947$i;
    HEAP32[(8740)>>2] = 0;
    HEAP32[(8736)>>2] = $856;
    $875 = $857;
    while(1) {
     $874 = ((($875)) + 4|0);
     HEAP32[$874>>2] = 7;
     $876 = ((($875)) + 8|0);
     $877 = ($876>>>0)<($840>>>0);
     if ($877) {
      $875 = $874;
     } else {
      break;
     }
    }
    $878 = ($855|0)==($586|0);
    if (!($878)) {
     $879 = $855;
     $880 = $586;
     $881 = (($879) - ($880))|0;
     $882 = HEAP32[$873>>2]|0;
     $883 = $882 & -2;
     HEAP32[$873>>2] = $883;
     $884 = $881 | 1;
     $885 = ((($586)) + 4|0);
     HEAP32[$885>>2] = $884;
     HEAP32[$855>>2] = $881;
     $886 = $881 >>> 3;
     $887 = ($881>>>0)<(256);
     if ($887) {
      $888 = $886 << 1;
      $889 = (8320 + ($888<<2)|0);
      $890 = HEAP32[2070]|0;
      $891 = 1 << $886;
      $892 = $890 & $891;
      $893 = ($892|0)==(0);
      if ($893) {
       $894 = $890 | $891;
       HEAP32[2070] = $894;
       $$pre$i$i = ((($889)) + 8|0);
       $$0206$i$i = $889;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $895 = ((($889)) + 8|0);
       $896 = HEAP32[$895>>2]|0;
       $$0206$i$i = $896;$$pre$phi$i$iZ2D = $895;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $586;
      $897 = ((($$0206$i$i)) + 12|0);
      HEAP32[$897>>2] = $586;
      $898 = ((($586)) + 8|0);
      HEAP32[$898>>2] = $$0206$i$i;
      $899 = ((($586)) + 12|0);
      HEAP32[$899>>2] = $889;
      break;
     }
     $900 = $881 >>> 8;
     $901 = ($900|0)==(0);
     if ($901) {
      $$0207$i$i = 0;
     } else {
      $902 = ($881>>>0)>(16777215);
      if ($902) {
       $$0207$i$i = 31;
      } else {
       $903 = (($900) + 1048320)|0;
       $904 = $903 >>> 16;
       $905 = $904 & 8;
       $906 = $900 << $905;
       $907 = (($906) + 520192)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 4;
       $910 = $909 | $905;
       $911 = $906 << $909;
       $912 = (($911) + 245760)|0;
       $913 = $912 >>> 16;
       $914 = $913 & 2;
       $915 = $910 | $914;
       $916 = (14 - ($915))|0;
       $917 = $911 << $914;
       $918 = $917 >>> 15;
       $919 = (($916) + ($918))|0;
       $920 = $919 << 1;
       $921 = (($919) + 7)|0;
       $922 = $881 >>> $921;
       $923 = $922 & 1;
       $924 = $923 | $920;
       $$0207$i$i = $924;
      }
     }
     $925 = (8584 + ($$0207$i$i<<2)|0);
     $926 = ((($586)) + 28|0);
     HEAP32[$926>>2] = $$0207$i$i;
     $927 = ((($586)) + 20|0);
     HEAP32[$927>>2] = 0;
     HEAP32[$853>>2] = 0;
     $928 = HEAP32[(8284)>>2]|0;
     $929 = 1 << $$0207$i$i;
     $930 = $928 & $929;
     $931 = ($930|0)==(0);
     if ($931) {
      $932 = $928 | $929;
      HEAP32[(8284)>>2] = $932;
      HEAP32[$925>>2] = $586;
      $933 = ((($586)) + 24|0);
      HEAP32[$933>>2] = $925;
      $934 = ((($586)) + 12|0);
      HEAP32[$934>>2] = $586;
      $935 = ((($586)) + 8|0);
      HEAP32[$935>>2] = $586;
      break;
     }
     $936 = HEAP32[$925>>2]|0;
     $937 = ($$0207$i$i|0)==(31);
     $938 = $$0207$i$i >>> 1;
     $939 = (25 - ($938))|0;
     $940 = $937 ? 0 : $939;
     $941 = $881 << $940;
     $$0201$i$i = $941;$$0202$i$i = $936;
     while(1) {
      $942 = ((($$0202$i$i)) + 4|0);
      $943 = HEAP32[$942>>2]|0;
      $944 = $943 & -8;
      $945 = ($944|0)==($881|0);
      if ($945) {
       label = 213;
       break;
      }
      $946 = $$0201$i$i >>> 31;
      $947 = (((($$0202$i$i)) + 16|0) + ($946<<2)|0);
      $948 = $$0201$i$i << 1;
      $949 = HEAP32[$947>>2]|0;
      $950 = ($949|0)==(0|0);
      if ($950) {
       label = 212;
       break;
      } else {
       $$0201$i$i = $948;$$0202$i$i = $949;
      }
     }
     if ((label|0) == 212) {
      HEAP32[$947>>2] = $586;
      $951 = ((($586)) + 24|0);
      HEAP32[$951>>2] = $$0202$i$i;
      $952 = ((($586)) + 12|0);
      HEAP32[$952>>2] = $586;
      $953 = ((($586)) + 8|0);
      HEAP32[$953>>2] = $586;
      break;
     }
     else if ((label|0) == 213) {
      $954 = ((($$0202$i$i)) + 8|0);
      $955 = HEAP32[$954>>2]|0;
      $956 = ((($955)) + 12|0);
      HEAP32[$956>>2] = $586;
      HEAP32[$954>>2] = $586;
      $957 = ((($586)) + 8|0);
      HEAP32[$957>>2] = $955;
      $958 = ((($586)) + 12|0);
      HEAP32[$958>>2] = $$0202$i$i;
      $959 = ((($586)) + 24|0);
      HEAP32[$959>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $961 = HEAP32[(8292)>>2]|0;
  $962 = ($961>>>0)>($$0192>>>0);
  if ($962) {
   $963 = (($961) - ($$0192))|0;
   HEAP32[(8292)>>2] = $963;
   $964 = HEAP32[(8304)>>2]|0;
   $965 = (($964) + ($$0192)|0);
   HEAP32[(8304)>>2] = $965;
   $966 = $963 | 1;
   $967 = ((($965)) + 4|0);
   HEAP32[$967>>2] = $966;
   $968 = $$0192 | 3;
   $969 = ((($964)) + 4|0);
   HEAP32[$969>>2] = $968;
   $970 = ((($964)) + 8|0);
   $$0 = $970;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $971 = (___errno_location()|0);
 HEAP32[$971>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond373 = 0;
 var $cond374 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(8296)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(8300)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
    HEAP32[(8288)>>2] = $15;
    $83 = $80 & -2;
    HEAP32[$79>>2] = $83;
    $84 = $15 | 1;
    $85 = ((($14)) + 4|0);
    HEAP32[$85>>2] = $84;
    $86 = (($14) + ($15)|0);
    HEAP32[$86>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[2070]|0;
     $29 = $28 & $27;
     HEAP32[2070] = $29;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (8584 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond373 = ($$3|0)==(0|0);
     if ($cond373) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(8284)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(8284)>>2] = $62;
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)!=($14|0);
     $$sink3 = $65&1;
     $66 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$66>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1347 = $15;$87 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1347 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$87 = $2;
  }
 } while(0);
 $88 = ($87>>>0)<($7>>>0);
 if (!($88)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(8304)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(8292)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(8292)>>2] = $98;
   HEAP32[(8304)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(8300)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(8300)>>2] = 0;
   HEAP32[(8288)>>2] = 0;
   return;
  }
  $103 = HEAP32[(8300)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(8288)>>2]|0;
   $106 = (($105) + ($$1347))|0;
   HEAP32[(8288)>>2] = $106;
   HEAP32[(8300)>>2] = $87;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($87) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1347))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[2070]|0;
     $122 = $121 & $120;
     HEAP32[2070] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $138;$$1367 = $134;
       }
      } else {
       $$1363 = $136;$$1367 = $135;
      }
      while(1) {
       $140 = ((($$1363)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if (!($142)) {
        $$1363 = $141;$$1367 = $140;
        continue;
       }
       $143 = ((($$1363)) + 16|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = ($144|0)==(0|0);
       if ($145) {
        break;
       } else {
        $$1363 = $144;$$1367 = $143;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3365 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (8584 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3365;
      $cond374 = ($$3365|0)==(0|0);
      if ($cond374) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(8284)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(8284)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)!=($7|0);
      $$sink5 = $158&1;
      $159 = (((($126)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$159>>2] = $$3365;
      $160 = ($$3365|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3365)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3365)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3365;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3365)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3365;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($87) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(8300)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(8288)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1347 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($87) + ($$1347)|0);
  HEAP32[$180>>2] = $$1347;
  $$2 = $$1347;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (8320 + ($183<<2)|0);
  $185 = HEAP32[2070]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[2070] = $189;
   $$pre = ((($184)) + 8|0);
   $$0368 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0368 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0368)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0368;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0361 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0361 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0361 = $219;
  }
 }
 $220 = (8584 + ($$0361<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0361;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(8284)>>2]|0;
 $225 = 1 << $$0361;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(8284)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ($$0361|0)==(31);
   $234 = $$0361 >>> 1;
   $235 = (25 - ($234))|0;
   $236 = $233 ? 0 : $235;
   $237 = $$2 << $236;
   $$0348 = $237;$$0349 = $232;
   while(1) {
    $238 = ((($$0349)) + 4|0);
    $239 = HEAP32[$238>>2]|0;
    $240 = $239 & -8;
    $241 = ($240|0)==($$2|0);
    if ($241) {
     label = 73;
     break;
    }
    $242 = $$0348 >>> 31;
    $243 = (((($$0349)) + 16|0) + ($242<<2)|0);
    $244 = $$0348 << 1;
    $245 = HEAP32[$243>>2]|0;
    $246 = ($245|0)==(0|0);
    if ($246) {
     label = 72;
     break;
    } else {
     $$0348 = $244;$$0349 = $245;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$243>>2] = $$1;
    $247 = ((($$1)) + 24|0);
    HEAP32[$247>>2] = $$0349;
    $248 = ((($$1)) + 12|0);
    HEAP32[$248>>2] = $$1;
    $249 = ((($$1)) + 8|0);
    HEAP32[$249>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $250 = ((($$0349)) + 8|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = ((($251)) + 12|0);
    HEAP32[$252>>2] = $$1;
    HEAP32[$250>>2] = $$1;
    $253 = ((($$1)) + 8|0);
    HEAP32[$253>>2] = $251;
    $254 = ((($$1)) + 12|0);
    HEAP32[$254>>2] = $$0349;
    $255 = ((($$1)) + 24|0);
    HEAP32[$255>>2] = 0;
    break;
   }
  }
 } while(0);
 $256 = HEAP32[(8312)>>2]|0;
 $257 = (($256) + -1)|0;
 HEAP32[(8312)>>2] = $257;
 $258 = ($257|0)==(0);
 if ($258) {
  $$0195$in$i = (8736);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $259 = ($$0195$i|0)==(0|0);
  $260 = ((($$0195$i)) + 8|0);
  if ($259) {
   break;
  } else {
   $$0195$in$i = $260;
  }
 }
 HEAP32[(8312)>>2] = -1;
 return;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 4;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8840|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function _dummy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_254()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function ___pthread_self_254() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (5143 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 5231;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 5231;
  } else {
   $$01214 = 5231;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1504|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = (_memcpy(($3|0),($0|0),($2|0))|0);
  $$0 = $5;
 }
 return ($$0|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 127]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0;
 var $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$279$ = 0, $$286 = 0, $$287 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre = 0, $$pre342 = 0, $$pre344 = 0, $$pre345 = 0, $$pre345$pre = 0, $$pre346 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
 var $arglist_next3 = 0, $brmerge = 0, $brmerge308 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond281 = 0, $storemerge274 = 0, $trunc = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP32[$5>>2]|0;
  $21 = HEAP8[$20>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   label = 88;
   break;
  } else {
   $23 = $21;$25 = $20;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249303 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249303;
      break L12;
     }
     $30 = ((($$0249303)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249303 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $20;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out($0,$20,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$$0269 = $$0269$phi;
   continue;
  }
  $38 = HEAP32[$5>>2]|0;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (_isdigit($41)|0);
  $43 = ($42|0)==(0);
  $$pre342 = HEAP32[$5>>2]|0;
  if ($43) {
   $$0253 = -1;$$1270 = $$0269;$$sink = 1;
  } else {
   $44 = ((($$pre342)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(36);
   if ($46) {
    $47 = ((($$pre342)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (($49) + -48)|0;
    $$0253 = $50;$$1270 = 1;$$sink = 3;
   } else {
    $$0253 = -1;$$1270 = $$0269;$$sink = 1;
   }
  }
  $51 = (($$pre342) + ($$sink)|0);
  HEAP32[$5>>2] = $51;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (($53) + -32)|0;
  $55 = ($54>>>0)>(31);
  $56 = 1 << $54;
  $57 = $56 & 75913;
  $58 = ($57|0)==(0);
  $brmerge308 = $55 | $58;
  if ($brmerge308) {
   $$0262$lcssa = 0;$$lcssa291 = $52;$$lcssa292 = $51;
  } else {
   $$0262309 = 0;$60 = $52;$65 = $51;
   while(1) {
    $59 = $60 << 24 >> 24;
    $61 = (($59) + -32)|0;
    $62 = 1 << $61;
    $63 = $62 | $$0262309;
    $64 = ((($65)) + 1|0);
    HEAP32[$5>>2] = $64;
    $66 = HEAP8[$64>>0]|0;
    $67 = $66 << 24 >> 24;
    $68 = (($67) + -32)|0;
    $69 = ($68>>>0)>(31);
    $70 = 1 << $68;
    $71 = $70 & 75913;
    $72 = ($71|0)==(0);
    $brmerge = $69 | $72;
    if ($brmerge) {
     $$0262$lcssa = $63;$$lcssa291 = $66;$$lcssa292 = $64;
     break;
    } else {
     $$0262309 = $63;$60 = $66;$65 = $64;
    }
   }
  }
  $73 = ($$lcssa291<<24>>24)==(42);
  if ($73) {
   $74 = ((($$lcssa292)) + 1|0);
   $75 = HEAP8[$74>>0]|0;
   $76 = $75 << 24 >> 24;
   $77 = (_isdigit($76)|0);
   $78 = ($77|0)==(0);
   if ($78) {
    label = 23;
   } else {
    $79 = HEAP32[$5>>2]|0;
    $80 = ((($79)) + 2|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = ($81<<24>>24)==(36);
    if ($82) {
     $83 = ((($79)) + 1|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = $84 << 24 >> 24;
     $86 = (($85) + -48)|0;
     $87 = (($4) + ($86<<2)|0);
     HEAP32[$87>>2] = 10;
     $88 = HEAP8[$83>>0]|0;
     $89 = $88 << 24 >> 24;
     $90 = (($89) + -48)|0;
     $91 = (($3) + ($90<<3)|0);
     $92 = $91;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = (($92) + 4)|0;
     $96 = $95;
     $97 = HEAP32[$96>>2]|0;
     $98 = ((($79)) + 3|0);
     $$0259 = $94;$$2271 = 1;$storemerge274 = $98;
    } else {
     label = 23;
    }
   }
   if ((label|0) == 23) {
    label = 0;
    $99 = ($$1270|0)==(0);
    if (!($99)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $100 = $arglist_current;
     $101 = ((0) + 4|0);
     $expanded4 = $101;
     $expanded = (($expanded4) - 1)|0;
     $102 = (($100) + ($expanded))|0;
     $103 = ((0) + 4|0);
     $expanded8 = $103;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $104 = $102 & $expanded6;
     $105 = $104;
     $106 = HEAP32[$105>>2]|0;
     $arglist_next = ((($105)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $363 = $106;
    } else {
     $363 = 0;
    }
    $107 = HEAP32[$5>>2]|0;
    $108 = ((($107)) + 1|0);
    $$0259 = $363;$$2271 = 0;$storemerge274 = $108;
   }
   HEAP32[$5>>2] = $storemerge274;
   $109 = ($$0259|0)<(0);
   $110 = $$0262$lcssa | 8192;
   $111 = (0 - ($$0259))|0;
   $$$0262 = $109 ? $110 : $$0262$lcssa;
   $$$0259 = $109 ? $111 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$115 = $storemerge274;
  } else {
   $112 = (_getint($5)|0);
   $113 = ($112|0)<(0);
   if ($113) {
    $$0 = -1;
    break;
   }
   $$pre344 = HEAP32[$5>>2]|0;
   $$1260 = $112;$$1263 = $$0262$lcssa;$$3272 = $$1270;$115 = $$pre344;
  }
  $114 = HEAP8[$115>>0]|0;
  $116 = ($114<<24>>24)==(46);
  do {
   if ($116) {
    $117 = ((($115)) + 1|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = ($118<<24>>24)==(42);
    if (!($119)) {
     $155 = ((($115)) + 1|0);
     HEAP32[$5>>2] = $155;
     $156 = (_getint($5)|0);
     $$pre345$pre = HEAP32[$5>>2]|0;
     $$0254 = $156;$$pre345 = $$pre345$pre;
     break;
    }
    $120 = ((($115)) + 2|0);
    $121 = HEAP8[$120>>0]|0;
    $122 = $121 << 24 >> 24;
    $123 = (_isdigit($122)|0);
    $124 = ($123|0)==(0);
    if (!($124)) {
     $125 = HEAP32[$5>>2]|0;
     $126 = ((($125)) + 3|0);
     $127 = HEAP8[$126>>0]|0;
     $128 = ($127<<24>>24)==(36);
     if ($128) {
      $129 = ((($125)) + 2|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = (($131) + -48)|0;
      $133 = (($4) + ($132<<2)|0);
      HEAP32[$133>>2] = 10;
      $134 = HEAP8[$129>>0]|0;
      $135 = $134 << 24 >> 24;
      $136 = (($135) + -48)|0;
      $137 = (($3) + ($136<<3)|0);
      $138 = $137;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = (($138) + 4)|0;
      $142 = $141;
      $143 = HEAP32[$142>>2]|0;
      $144 = ((($125)) + 4|0);
      HEAP32[$5>>2] = $144;
      $$0254 = $140;$$pre345 = $144;
      break;
     }
    }
    $145 = ($$3272|0)==(0);
    if (!($145)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $146 = $arglist_current2;
     $147 = ((0) + 4|0);
     $expanded11 = $147;
     $expanded10 = (($expanded11) - 1)|0;
     $148 = (($146) + ($expanded10))|0;
     $149 = ((0) + 4|0);
     $expanded15 = $149;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $150 = $148 & $expanded13;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $arglist_next3 = ((($151)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $364 = $152;
    } else {
     $364 = 0;
    }
    $153 = HEAP32[$5>>2]|0;
    $154 = ((($153)) + 2|0);
    HEAP32[$5>>2] = $154;
    $$0254 = $364;$$pre345 = $154;
   } else {
    $$0254 = -1;$$pre345 = $115;
   }
  } while(0);
  $$0252 = 0;$158 = $$pre345;
  while(1) {
   $157 = HEAP8[$158>>0]|0;
   $159 = $157 << 24 >> 24;
   $160 = (($159) + -65)|0;
   $161 = ($160>>>0)>(57);
   if ($161) {
    $$0 = -1;
    break L1;
   }
   $162 = ((($158)) + 1|0);
   HEAP32[$5>>2] = $162;
   $163 = HEAP8[$158>>0]|0;
   $164 = $163 << 24 >> 24;
   $165 = (($164) + -65)|0;
   $166 = ((7035 + (($$0252*58)|0)|0) + ($165)|0);
   $167 = HEAP8[$166>>0]|0;
   $168 = $167&255;
   $169 = (($168) + -1)|0;
   $170 = ($169>>>0)<(8);
   if ($170) {
    $$0252 = $168;$158 = $162;
   } else {
    break;
   }
  }
  $171 = ($167<<24>>24)==(0);
  if ($171) {
   $$0 = -1;
   break;
  }
  $172 = ($167<<24>>24)==(19);
  $173 = ($$0253|0)>(-1);
  do {
   if ($172) {
    if ($173) {
     $$0 = -1;
     break L1;
    } else {
     label = 50;
    }
   } else {
    if ($173) {
     $174 = (($4) + ($$0253<<2)|0);
     HEAP32[$174>>2] = $168;
     $175 = (($3) + ($$0253<<3)|0);
     $176 = $175;
     $177 = $176;
     $178 = HEAP32[$177>>2]|0;
     $179 = (($176) + 4)|0;
     $180 = $179;
     $181 = HEAP32[$180>>2]|0;
     $182 = $6;
     $183 = $182;
     HEAP32[$183>>2] = $178;
     $184 = (($182) + 4)|0;
     $185 = $184;
     HEAP32[$185>>2] = $181;
     label = 50;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($6,$168,$2);
    $$pre346 = HEAP32[$5>>2]|0;
    $187 = $$pre346;
   }
  } while(0);
  if ((label|0) == 50) {
   label = 0;
   if ($10) {
    $187 = $162;
   } else {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
    continue;
   }
  }
  $186 = ((($187)) + -1|0);
  $188 = HEAP8[$186>>0]|0;
  $189 = $188 << 24 >> 24;
  $190 = ($$0252|0)!=(0);
  $191 = $189 & 15;
  $192 = ($191|0)==(3);
  $or$cond276 = $190 & $192;
  $193 = $189 & -33;
  $$0235 = $or$cond276 ? $193 : $189;
  $194 = $$1263 & 8192;
  $195 = ($194|0)==(0);
  $196 = $$1263 & -65537;
  $$1263$ = $195 ? $$1263 : $196;
  L73: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $203 = HEAP32[$6>>2]|0;
     HEAP32[$203>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 1:  {
     $204 = HEAP32[$6>>2]|0;
     HEAP32[$204>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 2:  {
     $205 = ($$1248|0)<(0);
     $206 = $205 << 31 >> 31;
     $207 = HEAP32[$6>>2]|0;
     $208 = $207;
     $209 = $208;
     HEAP32[$209>>2] = $$1248;
     $210 = (($208) + 4)|0;
     $211 = $210;
     HEAP32[$211>>2] = $206;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 3:  {
     $212 = $$1248&65535;
     $213 = HEAP32[$6>>2]|0;
     HEAP16[$213>>1] = $212;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 4:  {
     $214 = $$1248&255;
     $215 = HEAP32[$6>>2]|0;
     HEAP8[$215>>0] = $214;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 6:  {
     $216 = HEAP32[$6>>2]|0;
     HEAP32[$216>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    case 7:  {
     $217 = ($$1248|0)<(0);
     $218 = $217 << 31 >> 31;
     $219 = HEAP32[$6>>2]|0;
     $220 = $219;
     $221 = $220;
     HEAP32[$221>>2] = $$1248;
     $222 = (($220) + 4)|0;
     $223 = $222;
     HEAP32[$223>>2] = $218;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $224 = ($$0254>>>0)>(8);
    $225 = $224 ? $$0254 : 8;
    $226 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $225;$$3265 = $226;
    label = 62;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 62;
    break;
   }
   case 111:  {
    $242 = $6;
    $243 = $242;
    $244 = HEAP32[$243>>2]|0;
    $245 = (($242) + 4)|0;
    $246 = $245;
    $247 = HEAP32[$246>>2]|0;
    $248 = (_fmt_o($244,$247,$11)|0);
    $249 = $$1263$ & 8;
    $250 = ($249|0)==(0);
    $251 = $248;
    $252 = (($12) - ($251))|0;
    $253 = ($$0254|0)>($252|0);
    $254 = (($252) + 1)|0;
    $255 = $250 | $253;
    $$0254$$0254$ = $255 ? $$0254 : $254;
    $$0228 = $248;$$1233 = 0;$$1238 = 7499;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$280 = $244;$282 = $247;
    label = 68;
    break;
   }
   case 105: case 100:  {
    $256 = $6;
    $257 = $256;
    $258 = HEAP32[$257>>2]|0;
    $259 = (($256) + 4)|0;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = ($261|0)<(0);
    if ($262) {
     $263 = (_i64Subtract(0,0,($258|0),($261|0))|0);
     $264 = tempRet0;
     $265 = $6;
     $266 = $265;
     HEAP32[$266>>2] = $263;
     $267 = (($265) + 4)|0;
     $268 = $267;
     HEAP32[$268>>2] = $264;
     $$0232 = 1;$$0237 = 7499;$275 = $263;$276 = $264;
     label = 67;
     break L73;
    } else {
     $269 = $$1263$ & 2048;
     $270 = ($269|0)==(0);
     $271 = $$1263$ & 1;
     $272 = ($271|0)==(0);
     $$ = $272 ? 7499 : (7501);
     $$$ = $270 ? $$ : (7500);
     $273 = $$1263$ & 2049;
     $274 = ($273|0)!=(0);
     $$279$ = $274&1;
     $$0232 = $$279$;$$0237 = $$$;$275 = $258;$276 = $261;
     label = 67;
     break L73;
    }
    break;
   }
   case 117:  {
    $197 = $6;
    $198 = $197;
    $199 = HEAP32[$198>>2]|0;
    $200 = (($197) + 4)|0;
    $201 = $200;
    $202 = HEAP32[$201>>2]|0;
    $$0232 = 0;$$0237 = 7499;$275 = $199;$276 = $202;
    label = 67;
    break;
   }
   case 99:  {
    $292 = $6;
    $293 = $292;
    $294 = HEAP32[$293>>2]|0;
    $295 = (($292) + 4)|0;
    $296 = $295;
    $297 = HEAP32[$296>>2]|0;
    $298 = $294&255;
    HEAP8[$13>>0] = $298;
    $$2 = $13;$$2234 = 0;$$2239 = 7499;$$2251 = $11;$$5 = 1;$$6268 = $196;
    break;
   }
   case 109:  {
    $299 = (___errno_location()|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = (_strerror($300)|0);
    $$1 = $301;
    label = 72;
    break;
   }
   case 115:  {
    $302 = HEAP32[$6>>2]|0;
    $303 = ($302|0)!=(0|0);
    $304 = $303 ? $302 : 7509;
    $$1 = $304;
    label = 72;
    break;
   }
   case 67:  {
    $311 = $6;
    $312 = $311;
    $313 = HEAP32[$312>>2]|0;
    $314 = (($311) + 4)|0;
    $315 = $314;
    $316 = HEAP32[$315>>2]|0;
    HEAP32[$8>>2] = $313;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258354 = -1;$365 = $8;
    label = 76;
    break;
   }
   case 83:  {
    $$pre348 = HEAP32[$6>>2]|0;
    $317 = ($$0254|0)==(0);
    if ($317) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa356 = 0;
     label = 85;
    } else {
     $$4258354 = $$0254;$365 = $$pre348;
     label = 76;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $339 = +HEAPF64[$6>>3];
    $340 = (_fmt_fp($0,$339,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $340;$$0247 = $$1248;$$0269 = $$3272;
    continue L1;
    break;
   }
   default: {
    $$2 = $20;$$2234 = 0;$$2239 = 7499;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L97: do {
   if ((label|0) == 62) {
    label = 0;
    $227 = $6;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = (($227) + 4)|0;
    $231 = $230;
    $232 = HEAP32[$231>>2]|0;
    $233 = $$1236 & 32;
    $234 = (_fmt_x($229,$232,$11,$233)|0);
    $235 = ($229|0)==(0);
    $236 = ($232|0)==(0);
    $237 = $235 & $236;
    $238 = $$3265 & 8;
    $239 = ($238|0)==(0);
    $or$cond278 = $239 | $237;
    $240 = $$1236 >> 4;
    $241 = (7499 + ($240)|0);
    $$286 = $or$cond278 ? 7499 : $241;
    $$287 = $or$cond278 ? 0 : 2;
    $$0228 = $234;$$1233 = $$287;$$1238 = $$286;$$2256 = $$1255;$$4266 = $$3265;$280 = $229;$282 = $232;
    label = 68;
   }
   else if ((label|0) == 67) {
    label = 0;
    $277 = (_fmt_u($275,$276,$11)|0);
    $$0228 = $277;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$280 = $275;$282 = $276;
    label = 68;
   }
   else if ((label|0) == 72) {
    label = 0;
    $305 = (_memchr($$1,0,$$0254)|0);
    $306 = ($305|0)==(0|0);
    $307 = $305;
    $308 = $$1;
    $309 = (($307) - ($308))|0;
    $310 = (($$1) + ($$0254)|0);
    $$3257 = $306 ? $$0254 : $309;
    $$1250 = $306 ? $310 : $305;
    $$2 = $$1;$$2234 = 0;$$2239 = 7499;$$2251 = $$1250;$$5 = $$3257;$$6268 = $196;
   }
   else if ((label|0) == 76) {
    label = 0;
    $$0229316 = $365;$$0240315 = 0;$$1244314 = 0;
    while(1) {
     $318 = HEAP32[$$0229316>>2]|0;
     $319 = ($318|0)==(0);
     if ($319) {
      $$0240$lcssa = $$0240315;$$2245 = $$1244314;
      break;
     }
     $320 = (_wctomb($9,$318)|0);
     $321 = ($320|0)<(0);
     $322 = (($$4258354) - ($$0240315))|0;
     $323 = ($320>>>0)>($322>>>0);
     $or$cond281 = $321 | $323;
     if ($or$cond281) {
      $$0240$lcssa = $$0240315;$$2245 = $320;
      break;
     }
     $324 = ((($$0229316)) + 4|0);
     $325 = (($320) + ($$0240315))|0;
     $326 = ($$4258354>>>0)>($325>>>0);
     if ($326) {
      $$0229316 = $324;$$0240315 = $325;$$1244314 = $320;
     } else {
      $$0240$lcssa = $325;$$2245 = $320;
      break;
     }
    }
    $327 = ($$2245|0)<(0);
    if ($327) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $328 = ($$0240$lcssa|0)==(0);
    if ($328) {
     $$0240$lcssa356 = 0;
     label = 85;
    } else {
     $$1230327 = $365;$$1241326 = 0;
     while(1) {
      $329 = HEAP32[$$1230327>>2]|0;
      $330 = ($329|0)==(0);
      if ($330) {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break L97;
      }
      $331 = (_wctomb($9,$329)|0);
      $332 = (($331) + ($$1241326))|0;
      $333 = ($332|0)>($$0240$lcssa|0);
      if ($333) {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break L97;
      }
      $334 = ((($$1230327)) + 4|0);
      _out($0,$9,$331);
      $335 = ($332>>>0)<($$0240$lcssa>>>0);
      if ($335) {
       $$1230327 = $334;$$1241326 = $332;
      } else {
       $$0240$lcssa356 = $$0240$lcssa;
       label = 85;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 68) {
   label = 0;
   $278 = ($$2256|0)>(-1);
   $279 = $$4266 & -65537;
   $$$4266 = $278 ? $279 : $$4266;
   $281 = ($280|0)!=(0);
   $283 = ($282|0)!=(0);
   $284 = $281 | $283;
   $285 = ($$2256|0)!=(0);
   $or$cond = $285 | $284;
   $286 = $$0228;
   $287 = (($12) - ($286))|0;
   $288 = $284 ^ 1;
   $289 = $288&1;
   $290 = (($287) + ($289))|0;
   $291 = ($$2256|0)>($290|0);
   $$2256$ = $291 ? $$2256 : $290;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 85) {
   label = 0;
   $336 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa356,$336);
   $337 = ($$1260|0)>($$0240$lcssa356|0);
   $338 = $337 ? $$1260 : $$0240$lcssa356;
   $$0243 = $338;$$0247 = $$1248;$$0269 = $$3272;
   continue;
  }
  $341 = $$2251;
  $342 = $$2;
  $343 = (($341) - ($342))|0;
  $344 = ($$5|0)<($343|0);
  $$$5 = $344 ? $343 : $$5;
  $345 = (($$$5) + ($$2234))|0;
  $346 = ($$1260|0)<($345|0);
  $$2261 = $346 ? $345 : $$1260;
  _pad($0,32,$$2261,$345,$$6268);
  _out($0,$$2239,$$2234);
  $347 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$345,$347);
  _pad($0,48,$$$5,$343,0);
  _out($0,$$2,$343);
  $348 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$345,$348);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;
 }
 L116: do {
  if ((label|0) == 88) {
   $349 = ($0|0)==(0|0);
   if ($349) {
    $350 = ($$0269|0)==(0);
    if ($350) {
     $$0 = 0;
    } else {
     $$2242302 = 1;
     while(1) {
      $351 = (($4) + ($$2242302<<2)|0);
      $352 = HEAP32[$351>>2]|0;
      $353 = ($352|0)==(0);
      if ($353) {
       $$2242$lcssa = $$2242302;
       break;
      }
      $355 = (($3) + ($$2242302<<3)|0);
      _pop_arg($355,$352,$2);
      $356 = (($$2242302) + 1)|0;
      $357 = ($$2242302|0)<(9);
      if ($357) {
       $$2242302 = $356;
      } else {
       $$2242$lcssa = $356;
       break;
      }
     }
     $354 = ($$2242$lcssa|0)<(10);
     if ($354) {
      $$3300 = $$2242$lcssa;
      while(1) {
       $360 = (($4) + ($$3300<<2)|0);
       $361 = HEAP32[$360>>2]|0;
       $362 = ($361|0)==(0);
       if (!($362)) {
        $$0 = -1;
        break L116;
       }
       $358 = (($$3300) + 1)|0;
       $359 = ($$3300|0)<(9);
       if ($359) {
        $$3300 = $358;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (7551 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$564 = 0.0, $$$3484 = 0, $$$3484699 = 0, $$$3484700 = 0, $$$3501 = 0, $$$4502 = 0, $$$543 = 0.0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488 = 0, $$0488655 = 0, $$0488657 = 0;
 var $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0510 = 0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0;
 var $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$549 = 0, $$2476$$551 = 0, $$2483$ph = 0;
 var $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$534$ = 0;
 var $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$557 = 0, $$5605 = 0, $$561 = 0, $$564 = 0.0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0;
 var $$9$ph = 0, $$lcssa675 = 0, $$neg = 0, $$neg568 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre690 = 0, $$pre693 = 0, $$pre697 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0;
 var $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond542 = 0, $or$cond545 = 0, $or$cond556 = 0, $or$cond6 = 0, $scevgep686 = 0, $scevgep686687 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_352($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = - $1;
  $$0471 = $14;$$0520 = 1;$$0521 = 7516;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (7517) : (7522);
  $$$ = $16 ? $$ : (7519);
  $19 = $4 & 2049;
  $20 = ($19|0)!=(0);
  $$534$ = $20&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_352($$0471)|0);
 $21 = tempRet0;
 $22 = $21 & 2146435072;
 $23 = (0)==(0);
 $24 = ($22|0)==(2146435072);
 $25 = $23 & $24;
 do {
  if ($25) {
   $26 = $5 & 32;
   $27 = ($26|0)!=(0);
   $28 = $27 ? 7535 : 7539;
   $29 = ($$0471 != $$0471) | (0.0 != 0.0);
   $30 = $27 ? 7543 : 7547;
   $$0510 = $29 ? $30 : $28;
   $31 = (($$0520) + 3)|0;
   $32 = $4 & -65537;
   _pad($0,32,$2,$31,$32);
   _out($0,$$0521,$$0520);
   _out($0,$$0510,3);
   $33 = $4 ^ 8192;
   _pad($0,32,$2,$31,$33);
   $$sink560 = $31;
  } else {
   $34 = (+_frexpl($$0471,$7));
   $35 = $34 * 2.0;
   $36 = $35 != 0.0;
   if ($36) {
    $37 = HEAP32[$7>>2]|0;
    $38 = (($37) + -1)|0;
    HEAP32[$7>>2] = $38;
   }
   $39 = $5 | 32;
   $40 = ($39|0)==(97);
   if ($40) {
    $41 = $5 & 32;
    $42 = ($41|0)==(0);
    $43 = ((($$0521)) + 9|0);
    $$0521$ = $42 ? $$0521 : $43;
    $44 = $$0520 | 2;
    $45 = ($3>>>0)>(11);
    $46 = (12 - ($3))|0;
    $47 = ($46|0)==(0);
    $48 = $45 | $47;
    do {
     if ($48) {
      $$1472 = $35;
     } else {
      $$0509585 = 8.0;$$1508586 = $46;
      while(1) {
       $49 = (($$1508586) + -1)|0;
       $50 = $$0509585 * 16.0;
       $51 = ($49|0)==(0);
       if ($51) {
        break;
       } else {
        $$0509585 = $50;$$1508586 = $49;
       }
      }
      $52 = HEAP8[$$0521$>>0]|0;
      $53 = ($52<<24>>24)==(45);
      if ($53) {
       $54 = - $35;
       $55 = $54 - $50;
       $56 = $50 + $55;
       $57 = - $56;
       $$1472 = $57;
       break;
      } else {
       $58 = $35 + $50;
       $59 = $58 - $50;
       $$1472 = $59;
       break;
      }
     }
    } while(0);
    $60 = HEAP32[$7>>2]|0;
    $61 = ($60|0)<(0);
    $62 = (0 - ($60))|0;
    $63 = $61 ? $62 : $60;
    $64 = ($63|0)<(0);
    $65 = $64 << 31 >> 31;
    $66 = (_fmt_u($63,$65,$11)|0);
    $67 = ($66|0)==($11|0);
    if ($67) {
     $68 = ((($10)) + 11|0);
     HEAP8[$68>>0] = 48;
     $$0511 = $68;
    } else {
     $$0511 = $66;
    }
    $69 = $60 >> 31;
    $70 = $69 & 2;
    $71 = (($70) + 43)|0;
    $72 = $71&255;
    $73 = ((($$0511)) + -1|0);
    HEAP8[$73>>0] = $72;
    $74 = (($5) + 15)|0;
    $75 = $74&255;
    $76 = ((($$0511)) + -2|0);
    HEAP8[$76>>0] = $75;
    $77 = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (7551 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $41 | $83;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $93 = $89 == 0.0;
      $or$cond3$not = $77 & $93;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $94 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $94;
      }
     } else {
      $$1524 = $86;
     }
     $95 = $89 != 0.0;
     if ($95) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $96 = ($3|0)==(0);
    $$pre693 = $$1524;
    if ($96) {
     label = 24;
    } else {
     $97 = (-2 - ($9))|0;
     $98 = (($97) + ($$pre693))|0;
     $99 = ($98|0)<($3|0);
     if ($99) {
      $100 = (($3) + 2)|0;
      $$pre690 = (($$pre693) - ($9))|0;
      $$pre$phi691Z2D = $$pre690;$$sink = $100;
     } else {
      label = 24;
     }
    }
    if ((label|0) == 24) {
     $101 = (($$pre693) - ($9))|0;
     $$pre$phi691Z2D = $101;$$sink = $101;
    }
    $102 = $11;
    $103 = $76;
    $104 = (($102) - ($103))|0;
    $105 = (($104) + ($44))|0;
    $106 = (($105) + ($$sink))|0;
    _pad($0,32,$2,$106,$4);
    _out($0,$$0521$,$44);
    $107 = $4 ^ 65536;
    _pad($0,48,$2,$106,$107);
    _out($0,$8,$$pre$phi691Z2D);
    $108 = (($$sink) - ($$pre$phi691Z2D))|0;
    _pad($0,48,$108,0,0);
    _out($0,$76,$104);
    $109 = $4 ^ 8192;
    _pad($0,32,$2,$106,$109);
    $$sink560 = $106;
    break;
   }
   $110 = ($3|0)<(0);
   $$540 = $110 ? 6 : $3;
   if ($36) {
    $111 = $35 * 268435456.0;
    $112 = HEAP32[$7>>2]|0;
    $113 = (($112) + -28)|0;
    HEAP32[$7>>2] = $113;
    $$3 = $111;$$pr = $113;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $35;$$pr = $$pre;
   }
   $114 = ($$pr|0)<(0);
   $115 = ((($6)) + 288|0);
   $$561 = $114 ? $6 : $115;
   $$0498 = $$561;$$4 = $$3;
   while(1) {
    $116 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $116;
    $117 = ((($$0498)) + 4|0);
    $118 = (+($116>>>0));
    $119 = $$4 - $118;
    $120 = $119 * 1.0E+9;
    $121 = $120 != 0.0;
    if ($121) {
     $$0498 = $117;$$4 = $120;
    } else {
     break;
    }
   }
   $122 = ($$pr|0)>(0);
   if ($122) {
    $$1482663 = $$561;$$1499662 = $117;$123 = $$pr;
    while(1) {
     $124 = ($123|0)<(29);
     $125 = $124 ? $123 : 29;
     $$0488655 = ((($$1499662)) + -4|0);
     $126 = ($$0488655>>>0)<($$1482663>>>0);
     if ($126) {
      $$2483$ph = $$1482663;
     } else {
      $$0488657 = $$0488655;$$0497656 = 0;
      while(1) {
       $127 = HEAP32[$$0488657>>2]|0;
       $128 = (_bitshift64Shl(($127|0),0,($125|0))|0);
       $129 = tempRet0;
       $130 = (_i64Add(($128|0),($129|0),($$0497656|0),0)|0);
       $131 = tempRet0;
       $132 = (___uremdi3(($130|0),($131|0),1000000000,0)|0);
       $133 = tempRet0;
       HEAP32[$$0488657>>2] = $132;
       $134 = (___udivdi3(($130|0),($131|0),1000000000,0)|0);
       $135 = tempRet0;
       $$0488 = ((($$0488657)) + -4|0);
       $136 = ($$0488>>>0)<($$1482663>>>0);
       if ($136) {
        break;
       } else {
        $$0488657 = $$0488;$$0497656 = $134;
       }
      }
      $137 = ($134|0)==(0);
      if ($137) {
       $$2483$ph = $$1482663;
      } else {
       $138 = ((($$1482663)) + -4|0);
       HEAP32[$138>>2] = $134;
       $$2483$ph = $138;
      }
     }
     $$2500 = $$1499662;
     while(1) {
      $139 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($139)) {
       break;
      }
      $140 = ((($$2500)) + -4|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($141|0)==(0);
      if ($142) {
       $$2500 = $140;
      } else {
       break;
      }
     }
     $143 = HEAP32[$7>>2]|0;
     $144 = (($143) - ($125))|0;
     HEAP32[$7>>2] = $144;
     $145 = ($144|0)>(0);
     if ($145) {
      $$1482663 = $$2483$ph;$$1499662 = $$2500;$123 = $144;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr566 = $144;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561;$$1499$lcssa = $117;$$pr566 = $$pr;
   }
   $146 = ($$pr566|0)<(0);
   if ($146) {
    $147 = (($$540) + 25)|0;
    $148 = (($147|0) / 9)&-1;
    $149 = (($148) + 1)|0;
    $150 = ($39|0)==(102);
    $$3484650 = $$1482$lcssa;$$3501649 = $$1499$lcssa;$152 = $$pr566;
    while(1) {
     $151 = (0 - ($152))|0;
     $153 = ($151|0)<(9);
     $154 = $153 ? $151 : 9;
     $155 = ($$3484650>>>0)<($$3501649>>>0);
     if ($155) {
      $159 = 1 << $154;
      $160 = (($159) + -1)|0;
      $161 = 1000000000 >>> $154;
      $$0487644 = 0;$$1489643 = $$3484650;
      while(1) {
       $162 = HEAP32[$$1489643>>2]|0;
       $163 = $162 & $160;
       $164 = $162 >>> $154;
       $165 = (($164) + ($$0487644))|0;
       HEAP32[$$1489643>>2] = $165;
       $166 = Math_imul($163, $161)|0;
       $167 = ((($$1489643)) + 4|0);
       $168 = ($167>>>0)<($$3501649>>>0);
       if ($168) {
        $$0487644 = $166;$$1489643 = $167;
       } else {
        break;
       }
      }
      $169 = HEAP32[$$3484650>>2]|0;
      $170 = ($169|0)==(0);
      $171 = ((($$3484650)) + 4|0);
      $$$3484 = $170 ? $171 : $$3484650;
      $172 = ($166|0)==(0);
      if ($172) {
       $$$3484700 = $$$3484;$$4502 = $$3501649;
      } else {
       $173 = ((($$3501649)) + 4|0);
       HEAP32[$$3501649>>2] = $166;
       $$$3484700 = $$$3484;$$4502 = $173;
      }
     } else {
      $156 = HEAP32[$$3484650>>2]|0;
      $157 = ($156|0)==(0);
      $158 = ((($$3484650)) + 4|0);
      $$$3484699 = $157 ? $158 : $$3484650;
      $$$3484700 = $$$3484699;$$4502 = $$3501649;
     }
     $174 = $150 ? $$561 : $$$3484700;
     $175 = $$4502;
     $176 = $174;
     $177 = (($175) - ($176))|0;
     $178 = $177 >> 2;
     $179 = ($178|0)>($149|0);
     $180 = (($174) + ($149<<2)|0);
     $$$4502 = $179 ? $180 : $$4502;
     $181 = HEAP32[$7>>2]|0;
     $182 = (($181) + ($154))|0;
     HEAP32[$7>>2] = $182;
     $183 = ($182|0)<(0);
     if ($183) {
      $$3484650 = $$$3484700;$$3501649 = $$$4502;$152 = $182;
     } else {
      $$3484$lcssa = $$$3484700;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $184 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $185 = $$561;
   if ($184) {
    $186 = $$3484$lcssa;
    $187 = (($185) - ($186))|0;
    $188 = $187 >> 2;
    $189 = ($188*9)|0;
    $190 = HEAP32[$$3484$lcssa>>2]|0;
    $191 = ($190>>>0)<(10);
    if ($191) {
     $$1515 = $189;
    } else {
     $$0514639 = $189;$$0530638 = 10;
     while(1) {
      $192 = ($$0530638*10)|0;
      $193 = (($$0514639) + 1)|0;
      $194 = ($190>>>0)<($192>>>0);
      if ($194) {
       $$1515 = $193;
       break;
      } else {
       $$0514639 = $193;$$0530638 = $192;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $195 = ($39|0)!=(102);
   $196 = $195 ? $$1515 : 0;
   $197 = (($$540) - ($196))|0;
   $198 = ($39|0)==(103);
   $199 = ($$540|0)!=(0);
   $200 = $199 & $198;
   $$neg = $200 << 31 >> 31;
   $201 = (($197) + ($$neg))|0;
   $202 = $$3501$lcssa;
   $203 = (($202) - ($185))|0;
   $204 = $203 >> 2;
   $205 = ($204*9)|0;
   $206 = (($205) + -9)|0;
   $207 = ($201|0)<($206|0);
   if ($207) {
    $208 = ((($$561)) + 4|0);
    $209 = (($201) + 9216)|0;
    $210 = (($209|0) / 9)&-1;
    $211 = (($210) + -1024)|0;
    $212 = (($208) + ($211<<2)|0);
    $213 = (($209|0) % 9)&-1;
    $214 = ($213|0)<(8);
    if ($214) {
     $$0527$in633 = $213;$$1531632 = 10;
     while(1) {
      $$0527 = (($$0527$in633) + 1)|0;
      $215 = ($$1531632*10)|0;
      $216 = ($$0527$in633|0)<(7);
      if ($216) {
       $$0527$in633 = $$0527;$$1531632 = $215;
      } else {
       $$1531$lcssa = $215;
       break;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $217 = HEAP32[$212>>2]|0;
    $218 = (($217>>>0) % ($$1531$lcssa>>>0))&-1;
    $219 = ($218|0)==(0);
    $220 = ((($212)) + 4|0);
    $221 = ($220|0)==($$3501$lcssa|0);
    $or$cond542 = $221 & $219;
    if ($or$cond542) {
     $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $222 = (($217>>>0) / ($$1531$lcssa>>>0))&-1;
     $223 = $222 & 1;
     $224 = ($223|0)==(0);
     $$543 = $224 ? 9007199254740992.0 : 9007199254740994.0;
     $225 = (($$1531$lcssa|0) / 2)&-1;
     $226 = ($218>>>0)<($225>>>0);
     $227 = ($218|0)==($225|0);
     $or$cond545 = $221 & $227;
     $$564 = $or$cond545 ? 1.0 : 1.5;
     $$$564 = $226 ? 0.5 : $$564;
     $228 = ($$0520|0)==(0);
     if ($228) {
      $$1467 = $$$564;$$1469 = $$543;
     } else {
      $229 = HEAP8[$$0521>>0]|0;
      $230 = ($229<<24>>24)==(45);
      $231 = - $$543;
      $232 = - $$$564;
      $$$543 = $230 ? $231 : $$543;
      $$$$564 = $230 ? $232 : $$$564;
      $$1467 = $$$$564;$$1469 = $$$543;
     }
     $233 = (($217) - ($218))|0;
     HEAP32[$212>>2] = $233;
     $234 = $$1469 + $$1467;
     $235 = $234 != $$1469;
     if ($235) {
      $236 = (($233) + ($$1531$lcssa))|0;
      HEAP32[$212>>2] = $236;
      $237 = ($236>>>0)>(999999999);
      if ($237) {
       $$5486626 = $$3484$lcssa;$$sink547625 = $212;
       while(1) {
        $238 = ((($$sink547625)) + -4|0);
        HEAP32[$$sink547625>>2] = 0;
        $239 = ($238>>>0)<($$5486626>>>0);
        if ($239) {
         $240 = ((($$5486626)) + -4|0);
         HEAP32[$240>>2] = 0;
         $$6 = $240;
        } else {
         $$6 = $$5486626;
        }
        $241 = HEAP32[$238>>2]|0;
        $242 = (($241) + 1)|0;
        HEAP32[$238>>2] = $242;
        $243 = ($242>>>0)>(999999999);
        if ($243) {
         $$5486626 = $$6;$$sink547625 = $238;
        } else {
         $$5486$lcssa = $$6;$$sink547$lcssa = $238;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink547$lcssa = $212;
      }
      $244 = $$5486$lcssa;
      $245 = (($185) - ($244))|0;
      $246 = $245 >> 2;
      $247 = ($246*9)|0;
      $248 = HEAP32[$$5486$lcssa>>2]|0;
      $249 = ($248>>>0)<(10);
      if ($249) {
       $$4492 = $$sink547$lcssa;$$4518 = $247;$$8 = $$5486$lcssa;
      } else {
       $$2516621 = $247;$$2532620 = 10;
       while(1) {
        $250 = ($$2532620*10)|0;
        $251 = (($$2516621) + 1)|0;
        $252 = ($248>>>0)<($250>>>0);
        if ($252) {
         $$4492 = $$sink547$lcssa;$$4518 = $251;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516621 = $251;$$2532620 = $250;
        }
       }
      }
     } else {
      $$4492 = $212;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $253 = ((($$4492)) + 4|0);
    $254 = ($$3501$lcssa>>>0)>($253>>>0);
    $$$3501 = $254 ? $253 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $255 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($255)) {
     $$lcssa675 = 0;
     break;
    }
    $256 = ((($$7505)) + -4|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = ($257|0)==(0);
    if ($258) {
     $$7505 = $256;
    } else {
     $$lcssa675 = 1;
     break;
    }
   }
   $259 = (0 - ($$5519$ph))|0;
   do {
    if ($198) {
     $not$ = $199 ^ 1;
     $260 = $not$&1;
     $$540$ = (($$540) + ($260))|0;
     $261 = ($$540$|0)>($$5519$ph|0);
     $262 = ($$5519$ph|0)>(-5);
     $or$cond6 = $261 & $262;
     if ($or$cond6) {
      $263 = (($5) + -1)|0;
      $$neg568 = (($$540$) + -1)|0;
      $264 = (($$neg568) - ($$5519$ph))|0;
      $$0479 = $263;$$2476 = $264;
     } else {
      $265 = (($5) + -2)|0;
      $266 = (($$540$) + -1)|0;
      $$0479 = $265;$$2476 = $266;
     }
     $267 = $4 & 8;
     $268 = ($267|0)==(0);
     if ($268) {
      if ($$lcssa675) {
       $269 = ((($$7505)) + -4|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = ($270|0)==(0);
       if ($271) {
        $$2529 = 9;
       } else {
        $272 = (($270>>>0) % 10)&-1;
        $273 = ($272|0)==(0);
        if ($273) {
         $$1528617 = 0;$$3533616 = 10;
         while(1) {
          $274 = ($$3533616*10)|0;
          $275 = (($$1528617) + 1)|0;
          $276 = (($270>>>0) % ($274>>>0))&-1;
          $277 = ($276|0)==(0);
          if ($277) {
           $$1528617 = $275;$$3533616 = $274;
          } else {
           $$2529 = $275;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $278 = $$0479 | 32;
      $279 = ($278|0)==(102);
      $280 = $$7505;
      $281 = (($280) - ($185))|0;
      $282 = $281 >> 2;
      $283 = ($282*9)|0;
      $284 = (($283) + -9)|0;
      if ($279) {
       $285 = (($284) - ($$2529))|0;
       $286 = ($285|0)>(0);
       $$548 = $286 ? $285 : 0;
       $287 = ($$2476|0)<($$548|0);
       $$2476$$549 = $287 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi698Z2D = 0;
       break;
      } else {
       $288 = (($284) + ($$5519$ph))|0;
       $289 = (($288) - ($$2529))|0;
       $290 = ($289|0)>(0);
       $$550 = $290 ? $289 : 0;
       $291 = ($$2476|0)<($$550|0);
       $$2476$$551 = $291 ? $$2476 : $$550;
       $$1480 = $$0479;$$3477 = $$2476$$551;$$pre$phi698Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi698Z2D = $267;
     }
    } else {
     $$pre697 = $4 & 8;
     $$1480 = $5;$$3477 = $$540;$$pre$phi698Z2D = $$pre697;
    }
   } while(0);
   $292 = $$3477 | $$pre$phi698Z2D;
   $293 = ($292|0)!=(0);
   $294 = $293&1;
   $295 = $$1480 | 32;
   $296 = ($295|0)==(102);
   if ($296) {
    $297 = ($$5519$ph|0)>(0);
    $298 = $297 ? $$5519$ph : 0;
    $$2513 = 0;$$pn = $298;
   } else {
    $299 = ($$5519$ph|0)<(0);
    $300 = $299 ? $259 : $$5519$ph;
    $301 = ($300|0)<(0);
    $302 = $301 << 31 >> 31;
    $303 = (_fmt_u($300,$302,$11)|0);
    $304 = $11;
    $305 = $303;
    $306 = (($304) - ($305))|0;
    $307 = ($306|0)<(2);
    if ($307) {
     $$1512610 = $303;
     while(1) {
      $308 = ((($$1512610)) + -1|0);
      HEAP8[$308>>0] = 48;
      $309 = $308;
      $310 = (($304) - ($309))|0;
      $311 = ($310|0)<(2);
      if ($311) {
       $$1512610 = $308;
      } else {
       $$1512$lcssa = $308;
       break;
      }
     }
    } else {
     $$1512$lcssa = $303;
    }
    $312 = $$5519$ph >> 31;
    $313 = $312 & 2;
    $314 = (($313) + 43)|0;
    $315 = $314&255;
    $316 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$316>>0] = $315;
    $317 = $$1480&255;
    $318 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$318>>0] = $317;
    $319 = $318;
    $320 = (($304) - ($319))|0;
    $$2513 = $318;$$pn = $320;
   }
   $321 = (($$0520) + 1)|0;
   $322 = (($321) + ($$3477))|0;
   $$1526 = (($322) + ($294))|0;
   $323 = (($$1526) + ($$pn))|0;
   _pad($0,32,$2,$323,$4);
   _out($0,$$0521,$$0520);
   $324 = $4 ^ 65536;
   _pad($0,48,$2,$323,$324);
   if ($296) {
    $325 = ($$9$ph>>>0)>($$561>>>0);
    $$0496$$9 = $325 ? $$561 : $$9$ph;
    $326 = ((($8)) + 9|0);
    $327 = $326;
    $328 = ((($8)) + 8|0);
    $$5493600 = $$0496$$9;
    while(1) {
     $329 = HEAP32[$$5493600>>2]|0;
     $330 = (_fmt_u($329,0,$326)|0);
     $331 = ($$5493600|0)==($$0496$$9|0);
     if ($331) {
      $337 = ($330|0)==($326|0);
      if ($337) {
       HEAP8[$328>>0] = 48;
       $$1465 = $328;
      } else {
       $$1465 = $330;
      }
     } else {
      $332 = ($330>>>0)>($8>>>0);
      if ($332) {
       $333 = $330;
       $334 = (($333) - ($9))|0;
       _memset(($8|0),48,($334|0))|0;
       $$0464597 = $330;
       while(1) {
        $335 = ((($$0464597)) + -1|0);
        $336 = ($335>>>0)>($8>>>0);
        if ($336) {
         $$0464597 = $335;
        } else {
         $$1465 = $335;
         break;
        }
       }
      } else {
       $$1465 = $330;
      }
     }
     $338 = $$1465;
     $339 = (($327) - ($338))|0;
     _out($0,$$1465,$339);
     $340 = ((($$5493600)) + 4|0);
     $341 = ($340>>>0)>($$561>>>0);
     if ($341) {
      break;
     } else {
      $$5493600 = $340;
     }
    }
    $342 = ($292|0)==(0);
    if (!($342)) {
     _out($0,7567,1);
    }
    $343 = ($340>>>0)<($$7505>>>0);
    $344 = ($$3477|0)>(0);
    $345 = $343 & $344;
    if ($345) {
     $$4478593 = $$3477;$$6494592 = $340;
     while(1) {
      $346 = HEAP32[$$6494592>>2]|0;
      $347 = (_fmt_u($346,0,$326)|0);
      $348 = ($347>>>0)>($8>>>0);
      if ($348) {
       $349 = $347;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0463587 = $347;
       while(1) {
        $351 = ((($$0463587)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0463587 = $351;
        } else {
         $$0463$lcssa = $351;
         break;
        }
       }
      } else {
       $$0463$lcssa = $347;
      }
      $353 = ($$4478593|0)<(9);
      $354 = $353 ? $$4478593 : 9;
      _out($0,$$0463$lcssa,$354);
      $355 = ((($$6494592)) + 4|0);
      $356 = (($$4478593) + -9)|0;
      $357 = ($355>>>0)<($$7505>>>0);
      $358 = ($$4478593|0)>(9);
      $359 = $357 & $358;
      if ($359) {
       $$4478593 = $356;$$6494592 = $355;
      } else {
       $$4478$lcssa = $356;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $360 = (($$4478$lcssa) + 9)|0;
    _pad($0,48,$360,9,0);
   } else {
    $361 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa675 ? $$7505 : $361;
    $362 = ($$3477|0)>(-1);
    if ($362) {
     $363 = ((($8)) + 9|0);
     $364 = ($$pre$phi698Z2D|0)==(0);
     $365 = $363;
     $366 = (0 - ($9))|0;
     $367 = ((($8)) + 8|0);
     $$5605 = $$3477;$$7495604 = $$9$ph;
     while(1) {
      $368 = HEAP32[$$7495604>>2]|0;
      $369 = (_fmt_u($368,0,$363)|0);
      $370 = ($369|0)==($363|0);
      if ($370) {
       HEAP8[$367>>0] = 48;
       $$0 = $367;
      } else {
       $$0 = $369;
      }
      $371 = ($$7495604|0)==($$9$ph|0);
      do {
       if ($371) {
        $375 = ((($$0)) + 1|0);
        _out($0,$$0,1);
        $376 = ($$5605|0)<(1);
        $or$cond556 = $364 & $376;
        if ($or$cond556) {
         $$2 = $375;
         break;
        }
        _out($0,7567,1);
        $$2 = $375;
       } else {
        $372 = ($$0>>>0)>($8>>>0);
        if (!($372)) {
         $$2 = $$0;
         break;
        }
        $scevgep686 = (($$0) + ($366)|0);
        $scevgep686687 = $scevgep686;
        _memset(($8|0),48,($scevgep686687|0))|0;
        $$1601 = $$0;
        while(1) {
         $373 = ((($$1601)) + -1|0);
         $374 = ($373>>>0)>($8>>>0);
         if ($374) {
          $$1601 = $373;
         } else {
          $$2 = $373;
          break;
         }
        }
       }
      } while(0);
      $377 = $$2;
      $378 = (($365) - ($377))|0;
      $379 = ($$5605|0)>($378|0);
      $380 = $379 ? $378 : $$5605;
      _out($0,$$2,$380);
      $381 = (($$5605) - ($378))|0;
      $382 = ((($$7495604)) + 4|0);
      $383 = ($382>>>0)<($$7505$>>>0);
      $384 = ($381|0)>(-1);
      $385 = $383 & $384;
      if ($385) {
       $$5605 = $381;$$7495604 = $382;
      } else {
       $$5$lcssa = $381;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $386 = (($$5$lcssa) + 18)|0;
    _pad($0,48,$386,18,0);
    $387 = $11;
    $388 = $$2513;
    $389 = (($387) - ($388))|0;
    _out($0,$$2513,$389);
   }
   $390 = $4 ^ 8192;
   _pad($0,32,$2,$323,$390);
   $$sink560 = $323;
  }
 } while(0);
 $391 = ($$sink560|0)<($2|0);
 $$557 = $391 ? $2 : $$sink560;
 STACKTOP = sp;return ($$557|0);
}
function ___DOUBLE_BITS_352($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_815()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_815() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 127]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 127]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   (_memcpy(($31|0),($$141|0),($$143|0))|0);
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((8844|0));
 return (8852|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((8844|0));
 return;
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 127]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[343]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[343]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 127]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 127]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __Znwj($0) {
 $0 = $0|0;
 var $$ = 0, $$lcssa = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 $$ = $1 ? 1 : $0;
 while(1) {
  $2 = (_malloc($$)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$lcssa = $2;
   break;
  }
  $4 = (__ZSt15get_new_handlerv()|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$4 & 127]();
 }
 return ($$lcssa|0);
}
function __Znaj($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__Znwj($0)|0);
 return ($1|0);
}
function __ZdlPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function __ZdaPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($0);
 return;
}
function __ZNSt3__218__libcpp_refstringC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = (($2) + 13)|0;
 $4 = (__Znwj($3)|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($4)|0);
 $8 = (($2) + 1)|0;
 _memcpy(($7|0),($1|0),($8|0))|0;
 HEAP32[$0>>2] = $7;
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 return ($1|0);
}
function __ZNSt11logic_errorC2EPKc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1840);
 $2 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringC2EPKc($2,$1);
 return;
}
function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $3 = ((($1)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)<(0);
 if ($5) {
  $6 = HEAP32[$1>>2]|0;
  $7 = ((($1)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8>>>0)>(4294967279);
  if ($9) {
   __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
   // unreachable;
  }
  $10 = ($8>>>0)<(11);
  if ($10) {
   $11 = $8&255;
   $12 = ((($0)) + 11|0);
   HEAP8[$12>>0] = $11;
   $$0$i = $0;
  } else {
   $13 = (($8) + 16)|0;
   $14 = $13 & -16;
   $15 = (__Znwj($14)|0);
   HEAP32[$0>>2] = $15;
   $16 = $14 | -2147483648;
   $17 = ((($0)) + 8|0);
   HEAP32[$17>>2] = $16;
   $18 = ((($0)) + 4|0);
   HEAP32[$18>>2] = $8;
   $$0$i = $15;
  }
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i,$6,$8)|0);
  $19 = (($$0$i) + ($8)|0);
  HEAP8[$2>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($19,$2);
 } else {
  ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i = 0, $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $6 = ((($1)) + 11|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)<(0);
 $9 = ((($1)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $7&255;
 $12 = $8 ? $10 : $11;
 $13 = ($12>>>0)<($2>>>0);
 if ($13) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_out_of_rangeEv($0);
  // unreachable;
 }
 $14 = HEAP32[$1>>2]|0;
 $15 = $8 ? $14 : $1;
 $16 = (($15) + ($2)|0);
 $17 = (($12) - ($2))|0;
 $18 = ($17>>>0)<($3>>>0);
 $$sroa$speculated = $18 ? $17 : $3;
 $19 = ($$sroa$speculated>>>0)>(4294967279);
 if ($19) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $20 = ($$sroa$speculated>>>0)<(11);
 if ($20) {
  $21 = $$sroa$speculated&255;
  $22 = ((($0)) + 11|0);
  HEAP8[$22>>0] = $21;
  $$0$i = $0;
 } else {
  $23 = (($$sroa$speculated) + 16)|0;
  $24 = $23 & -16;
  $25 = (__Znwj($24)|0);
  HEAP32[$0>>2] = $25;
  $26 = $24 | -2147483648;
  $27 = ((($0)) + 8|0);
  HEAP32[$27>>2] = $26;
  $28 = ((($0)) + 4|0);
  HEAP32[$28>>2] = $$sroa$speculated;
  $$0$i = $25;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcj($$0$i,$16,$$sroa$speculated)|0);
 $29 = (($$0$i) + ($$sroa$speculated)|0);
 HEAP8[$5>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($29,$5);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 11|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)<(0);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 if (!($2)) {
  $3 = ((($1)) + 11|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)<(0);
  $6 = HEAP32[$1>>2]|0;
  $7 = ((($1)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $4&255;
  $10 = $5 ? $6 : $1;
  $11 = $5 ? $8 : $9;
  (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0,$10,$11)|0);
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $10 = $phitmp$i;
 } else {
  $10 = 10;
 }
 $11 = ($10>>>0)<($2>>>0);
 do {
  if ($11) {
   if ($6) {
    $19 = ((($0)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $23 = $20;
   } else {
    $21 = $5&255;
    $23 = $21;
   }
   $22 = (($2) - ($10))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$10,$22,$23,0,$23,$2,$1);
  } else {
   if ($6) {
    $12 = HEAP32[$0>>2]|0;
    $13 = $12;
   } else {
    $13 = $0;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcj($13,$1,$2)|0);
   $14 = (($13) + ($2)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($14,$3);
   $15 = HEAP8[$4>>0]|0;
   $16 = ($15<<24>>24)<(0);
   if ($16) {
    $17 = ((($0)) + 4|0);
    HEAP32[$17>>2] = $2;
    break;
   } else {
    $18 = $2&255;
    HEAP8[$4>>0] = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__211char_traitsIcE4moveEPcPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if (!($3)) {
  _memmove(($0|0),($1|0),($2|0))|0;
 }
 return ($0|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$sroa$speculated = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $8 = sp;
 $9 = (-18 - ($1))|0;
 $10 = ($9>>>0)<($2>>>0);
 if ($10) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($0);
  // unreachable;
 }
 $11 = ((($0)) + 11|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)<(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $25 = $14;
 } else {
  $25 = $0;
 }
 $15 = ($1>>>0)<(2147483623);
 if ($15) {
  $16 = (($2) + ($1))|0;
  $17 = $1 << 1;
  $18 = ($16>>>0)<($17>>>0);
  $$sroa$speculated = $18 ? $17 : $16;
  $19 = ($$sroa$speculated>>>0)<(11);
  $20 = (($$sroa$speculated) + 16)|0;
  $21 = $20 & -16;
  $phitmp = $19 ? 11 : $21;
  $22 = $phitmp;
 } else {
  $22 = -17;
 }
 $23 = (__Znwj($22)|0);
 $24 = ($4|0)==(0);
 if (!($24)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($23,$25,$4)|0);
 }
 $26 = ($6|0)==(0);
 if (!($26)) {
  $27 = (($23) + ($4)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($27,$7,$6)|0);
 }
 $28 = (($3) - ($5))|0;
 $29 = (($28) - ($4))|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  $31 = (($23) + ($4)|0);
  $32 = (($31) + ($6)|0);
  $33 = (($25) + ($4)|0);
  $34 = (($33) + ($5)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcj($32,$34,$29)|0);
 }
 $35 = ($1|0)==(10);
 if (!($35)) {
  __ZdlPv($25);
 }
 HEAP32[$0>>2] = $23;
 $36 = $22 | -2147483648;
 $37 = ((($0)) + 8|0);
 HEAP32[$37>>2] = $36;
 $38 = (($28) + ($6))|0;
 $39 = ((($0)) + 4|0);
 HEAP32[$39>>2] = $38;
 $40 = (($23) + ($38)|0);
 HEAP8[$8>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($40,$8);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)<(0);
 if ($6) {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 2147483647;
  $phitmp$i = (($9) + -1)|0;
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;$15 = $phitmp$i;
 } else {
  $12 = $5&255;
  $14 = $12;$15 = 10;
 }
 $13 = (($15) - ($14))|0;
 $16 = ($13>>>0)<($2>>>0);
 if ($16) {
  $27 = (($2) - ($15))|0;
  $28 = (($27) + ($14))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($0,$15,$28,$14,$14,0,$2,$1);
 } else {
  $17 = ($2|0)==(0);
  if (!($17)) {
   if ($6) {
    $18 = HEAP32[$0>>2]|0;
    $20 = $18;
   } else {
    $20 = $0;
   }
   $19 = (($20) + ($14)|0);
   (__ZNSt3__211char_traitsIcE4copyEPcPKcj($19,$1,$2)|0);
   $21 = (($14) + ($2))|0;
   $22 = HEAP8[$4>>0]|0;
   $23 = ($22<<24>>24)<(0);
   if ($23) {
    $24 = ((($0)) + 4|0);
    HEAP32[$24>>2] = $21;
   } else {
    $25 = $21&255;
    HEAP8[$4>>0] = $25;
   }
   $26 = (($20) + ($21)|0);
   HEAP8[$3>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($26,$3);
  }
 }
 STACKTOP = sp;return ($0|0);
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = sp + 36|0;
 $1 = (___cxa_get_globals_fast()|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[$1>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   $5 = ((($3)) + 80|0);
   $6 = ((($3)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if (!($16)) {
    HEAP32[$vararg_buffer7>>2] = 7705;
    _abort_message(7655,$vararg_buffer7);
    // unreachable;
   }
   $17 = ($9|0)==(1126902529);
   $18 = ($12|0)==(1129074247);
   $19 = $17 & $18;
   if ($19) {
    $20 = ((($3)) + 44|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
   } else {
    $22 = $5;
   }
   HEAP32[$0>>2] = $22;
   $23 = HEAP32[$3>>2]|0;
   $24 = ((($23)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[142]|0;
   $27 = ((($26)) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (FUNCTION_TABLE_iiii[$28 & 127](568,$23,$0)|0);
   if ($29) {
    $30 = HEAP32[$0>>2]|0;
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 127]($30)|0);
    HEAP32[$vararg_buffer>>2] = 7705;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $25;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(7569,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 7705;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $25;
    _abort_message(7614,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(7693,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_once((8856|0),(126|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[2215]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(7844,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function _abort_message($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[344]|0;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($4) {
  $$2 = 1;
 } else {
  $5 = ($1|0)==(0|0);
  if ($5) {
   $$2 = 0;
  } else {
   $6 = (___dynamic_cast($1,592,576,0)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$2 = 0;
   } else {
    $8 = ((($3)) + 4|0);
    dest=$8; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$3>>2] = $6;
    $9 = ((($3)) + 8|0);
    HEAP32[$9>>2] = $0;
    $10 = ((($3)) + 12|0);
    HEAP32[$10>>2] = -1;
    $11 = ((($3)) + 48|0);
    HEAP32[$11>>2] = 1;
    $12 = HEAP32[$6>>2]|0;
    $13 = ((($12)) + 28|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP32[$2>>2]|0;
    FUNCTION_TABLE_viiii[$14 & 127]($6,$3,$15,1);
    $16 = ((($3)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = ((($3)) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$2>>2] = $20;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if ($9) {
    $10 = ((($1)) + 16|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==($2|0);
    if (!($12)) {
     $13 = ((($1)) + 20|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)==($2|0);
     if (!($15)) {
      $18 = ((($1)) + 32|0);
      HEAP32[$18>>2] = $3;
      HEAP32[$13>>2] = $2;
      $19 = ((($1)) + 40|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (($20) + 1)|0;
      HEAP32[$19>>2] = $21;
      $22 = ((($1)) + 36|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==(1);
      if ($24) {
       $25 = ((($1)) + 24|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==(2);
       if ($27) {
        $28 = ((($1)) + 54|0);
        HEAP8[$28>>0] = 1;
       }
      }
      $29 = ((($1)) + 44|0);
      HEAP32[$29>>2] = 4;
      break;
     }
    }
    $16 = ($3|0)==(1);
    if ($16) {
     $17 = ((($1)) + 32|0);
     HEAP32[$17>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 }
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==($1|0);
 return ($3|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   HEAP32[$4>>2] = $2;
   $7 = ((($1)) + 24|0);
   HEAP32[$7>>2] = $3;
   $8 = ((($1)) + 36|0);
   HEAP32[$8>>2] = 1;
  } else {
   $9 = ($5|0)==($2|0);
   if (!($9)) {
    $13 = ((($1)) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 1)|0;
    HEAP32[$13>>2] = $15;
    $16 = ((($1)) + 24|0);
    HEAP32[$16>>2] = 2;
    $17 = ((($1)) + 54|0);
    HEAP8[$17>>0] = 1;
    break;
   }
   $10 = ((($1)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(2);
   if ($12) {
    HEAP32[$10>>2] = $3;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($2|0);
 if ($6) {
  $7 = ((($1)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if (!($9)) {
   HEAP32[$7>>2] = $3;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 53|0);
 HEAP8[$5>>0] = 1;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($3|0);
 do {
  if ($8) {
   $9 = ((($1)) + 52|0);
   HEAP8[$9>>0] = 1;
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$10>>2] = $2;
    $13 = ((($1)) + 24|0);
    HEAP32[$13>>2] = $4;
    $14 = ((($1)) + 36|0);
    HEAP32[$14>>2] = 1;
    $15 = ((($1)) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==(1);
    $18 = ($4|0)==(1);
    $or$cond = $17 & $18;
    if (!($or$cond)) {
     break;
    }
    $19 = ((($1)) + 54|0);
    HEAP8[$19>>0] = 1;
    break;
   }
   $20 = ($11|0)==($2|0);
   if (!($20)) {
    $30 = ((($1)) + 36|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$30>>2] = $32;
    $33 = ((($1)) + 54|0);
    HEAP8[$33>>0] = 1;
    break;
   }
   $21 = ((($1)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(2);
   if ($23) {
    HEAP32[$21>>2] = $4;
    $27 = $4;
   } else {
    $27 = $22;
   }
   $24 = ((($1)) + 48|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(1);
   $28 = ($27|0)==(1);
   $or$cond22 = $26 & $28;
   if ($or$cond22) {
    $29 = ((($1)) + 54|0);
    HEAP8[$29>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($0) + ($7)|0);
 $9 = ((($5)) + -4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$4>>2] = $2;
 $11 = ((($4)) + 4|0);
 HEAP32[$11>>2] = $0;
 $12 = ((($4)) + 8|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($4)) + 12|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($4)) + 16|0);
 $15 = ((($4)) + 20|0);
 $16 = ((($4)) + 24|0);
 $17 = ((($4)) + 28|0);
 $18 = ((($4)) + 32|0);
 $19 = ((($4)) + 40|0);
 dest=$14; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$14+36>>1]=0|0;HEAP8[$14+38>>0]=0|0;
 $20 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10,$2,0)|0);
 L1: do {
  if ($20) {
   $21 = ((($4)) + 48|0);
   HEAP32[$21>>2] = 1;
   $22 = HEAP32[$10>>2]|0;
   $23 = ((($22)) + 20|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_viiiiii[$24 & 31]($10,$4,$8,$8,1,0);
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(1);
   $$ = $26 ? $8 : 0;
   $$0 = $$;
  } else {
   $27 = ((($4)) + 36|0);
   $28 = HEAP32[$10>>2]|0;
   $29 = ((($28)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_viiiii[$30 & 31]($10,$4,$8,1,0);
   $31 = HEAP32[$27>>2]|0;
   switch ($31|0) {
   case 0:  {
    $32 = HEAP32[$19>>2]|0;
    $33 = ($32|0)==(1);
    $34 = HEAP32[$17>>2]|0;
    $35 = ($34|0)==(1);
    $or$cond = $33 & $35;
    $36 = HEAP32[$18>>2]|0;
    $37 = ($36|0)==(1);
    $or$cond28 = $or$cond & $37;
    $38 = HEAP32[$15>>2]|0;
    $$33 = $or$cond28 ? $38 : 0;
    $$0 = $$33;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   $39 = HEAP32[$16>>2]|0;
   $40 = ($39|0)==(1);
   if (!($40)) {
    $41 = HEAP32[$19>>2]|0;
    $42 = ($41|0)==(0);
    $43 = HEAP32[$17>>2]|0;
    $44 = ($43|0)==(1);
    $or$cond30 = $42 & $44;
    $45 = HEAP32[$18>>2]|0;
    $46 = ($45|0)==(1);
    $or$cond32 = $or$cond30 & $46;
    if (!($or$cond32)) {
     $$0 = 0;
     break;
    }
   }
   $47 = HEAP32[$14>>2]|0;
   $$0 = $47;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($0)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiiiii[$13 & 31]($10,$1,$2,$3,$4,$5);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$037$off038 = 0, $$037$off039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if (!($9)) {
    $43 = ((($0)) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 31]($44,$1,$2,$3,$4);
    break;
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($1)) + 52|0);
     HEAP8[$22>>0] = 0;
     $23 = ((($1)) + 53|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($0)) + 8|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$25>>2]|0;
     $27 = ((($26)) + 20|0);
     $28 = HEAP32[$27>>2]|0;
     FUNCTION_TABLE_viiiiii[$28 & 31]($25,$1,$2,$2,1,$4);
     $29 = HEAP8[$23>>0]|0;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $$037$off038 = 4;
      label = 11;
     } else {
      $31 = HEAP8[$22>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if ($32) {
       $$037$off038 = 3;
       label = 11;
      } else {
       $$037$off039 = 3;
      }
     }
     if ((label|0) == 11) {
      HEAP32[$13>>2] = $2;
      $33 = ((($1)) + 40|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (($34) + 1)|0;
      HEAP32[$33>>2] = $35;
      $36 = ((($1)) + 36|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)==(1);
      if ($38) {
       $39 = ((($1)) + 24|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = ($40|0)==(2);
       if ($41) {
        $42 = ((($1)) + 54|0);
        HEAP8[$42>>0] = 1;
        $$037$off039 = $$037$off038;
       } else {
        $$037$off039 = $$037$off038;
       }
      } else {
       $$037$off039 = $$037$off038;
      }
     }
     HEAP32[$19>>2] = $$037$off039;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 if ($6) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
 } else {
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viiii[$11 & 127]($8,$1,$2,$3);
 }
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((8860|0),(127|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(7893,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _free($0);
 $1 = HEAP32[2215]|0;
 $2 = (_pthread_setspecific(($1|0),(0|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _abort_message(7943,$vararg_buffer);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 48|0);
   $5 = $4;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $7 & -256;
   $12 = ($11|0)==(1126902528);
   $13 = ($10|0)==(1129074247);
   $14 = $12 & $13;
   if ($14) {
    $15 = ((($2)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    __ZSt11__terminatePFvvE($16);
    // unreachable;
   }
  }
 }
 $17 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($17);
 // unreachable;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$0 & 127]();
 _abort_message(7996,$vararg_buffer);
 // unreachable;
}
function __ZSt13get_terminatev() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[437]|0;
 $1 = (($0) + 0)|0;
 HEAP32[437] = $1;
 $2 = $0;
 return ($2|0);
}
function __ZNSt9exceptionD2Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = (1840);
 $1 = ((($0)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($1);
 return;
}
function __ZNSt11logic_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNKSt11logic_error4whatEv($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = (__ZNKSt3__218__libcpp_refstring5c_strEv($1)|0);
 return ($2|0);
}
function __ZNKSt3__218__libcpp_refstring5c_strEv($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt3__218__libcpp_refstringD2Ev($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($0)|0);
 if ($1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_331($2)|0);
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + -1)|0;
  HEAP32[$4>>2] = $6;
  $7 = (($5) + -1)|0;
  $8 = ($7|0)<(0);
  if ($8) {
   __ZdlPv($3);
  }
 }
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_331($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -12|0);
 return ($1|0);
}
function __ZNSt12length_errorD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 return ($3|0);
}
function __ZN10__cxxabiv119__pointer_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$2>>2] = $5;
 $6 = (__ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,0)|0);
 if ($6) {
  $$4 = 1;
 } else {
  $7 = ($1|0)==(0|0);
  if ($7) {
   $$4 = 0;
  } else {
   $8 = (___dynamic_cast($1,592,680,0)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$4 = 0;
   } else {
    $10 = ((($8)) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($0)) + 8|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13 ^ -1;
    $15 = $11 & $14;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = ((($0)) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($8)) + 12|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($18,$20,0)|0);
     if ($21) {
      $$4 = 1;
     } else {
      $22 = HEAP32[$17>>2]|0;
      $23 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($22,712,0)|0);
      if ($23) {
       $$4 = 1;
      } else {
       $24 = HEAP32[$17>>2]|0;
       $25 = ($24|0)==(0|0);
       if ($25) {
        $$4 = 0;
       } else {
        $26 = (___dynamic_cast($24,592,576,0)|0);
        $27 = ($26|0)==(0|0);
        if ($27) {
         $$4 = 0;
        } else {
         $28 = HEAP32[$19>>2]|0;
         $29 = ($28|0)==(0|0);
         if ($29) {
          $$4 = 0;
         } else {
          $30 = (___dynamic_cast($28,592,576,0)|0);
          $31 = ($30|0)==(0|0);
          if ($31) {
           $$4 = 0;
          } else {
           $32 = ((($3)) + 4|0);
           dest=$32; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
           HEAP32[$3>>2] = $30;
           $33 = ((($3)) + 8|0);
           HEAP32[$33>>2] = $26;
           $34 = ((($3)) + 12|0);
           HEAP32[$34>>2] = -1;
           $35 = ((($3)) + 48|0);
           HEAP32[$35>>2] = 1;
           $36 = HEAP32[$30>>2]|0;
           $37 = ((($36)) + 28|0);
           $38 = HEAP32[$37>>2]|0;
           $39 = HEAP32[$2>>2]|0;
           FUNCTION_TABLE_viiii[$38 & 127]($30,$3,$39,1);
           $40 = ((($3)) + 24|0);
           $41 = HEAP32[$40>>2]|0;
           $42 = ($41|0)==(1);
           if ($42) {
            $43 = ((($3)) + 16|0);
            $44 = HEAP32[$43>>2]|0;
            HEAP32[$2>>2] = $44;
            $$0 = 1;
           } else {
            $$0 = 0;
           }
           $$4 = $$0;
          }
         }
        }
       }
      }
     }
    } else {
     $$4 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$4|0);
}
function __ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 if ($3) {
  $$0 = 1;
 } else {
  $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($1,720,0)|0);
  $$0 = $4;
 }
 return ($$0|0);
}
function __ZN10__cxxabiv116__enum_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$1,0)|0);
 return ($3|0);
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
 __ZdlPv($0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$7,$5)|0);
 if ($8) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$1,$2,$3,$4);
 } else {
  $9 = ((($1)) + 52|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ((($1)) + 53|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ((($0)) + 16|0);
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (((($0)) + 16|0) + ($15<<3)|0);
  HEAP8[$9>>0] = 0;
  HEAP8[$11>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($13,$1,$2,$3,$4,$5);
  $17 = ($15|0)>(1);
  L4: do {
   if ($17) {
    $18 = ((($0)) + 24|0);
    $19 = ((($1)) + 24|0);
    $20 = ((($0)) + 8|0);
    $21 = ((($1)) + 54|0);
    $$0 = $18;
    while(1) {
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)==(0);
     if (!($23)) {
      break L4;
     }
     $24 = HEAP8[$9>>0]|0;
     $25 = ($24<<24>>24)==(0);
     if ($25) {
      $31 = HEAP8[$11>>0]|0;
      $32 = ($31<<24>>24)==(0);
      if (!($32)) {
       $33 = HEAP32[$20>>2]|0;
       $34 = $33 & 1;
       $35 = ($34|0)==(0);
       if ($35) {
        break L4;
       }
      }
     } else {
      $26 = HEAP32[$19>>2]|0;
      $27 = ($26|0)==(1);
      if ($27) {
       break L4;
      }
      $28 = HEAP32[$20>>2]|0;
      $29 = $28 & 2;
      $30 = ($29|0)==(0);
      if ($30) {
       break L4;
      }
     }
     HEAP8[$9>>0] = 0;
     HEAP8[$11>>0] = 0;
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0,$1,$2,$3,$4,$5);
     $36 = ((($$0)) + 8|0);
     $37 = ($36>>>0)<($16>>>0);
     if ($37) {
      $$0 = $36;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$9>>0] = $10;
  HEAP8[$11>>0] = $12;
 }
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$6,$4)|0);
 L1: do {
  if ($7) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$1,$2,$3);
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$8,$4)|0);
   if (!($9)) {
    $56 = ((($0)) + 16|0);
    $57 = ((($0)) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (((($0)) + 16|0) + ($58<<3)|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($56,$1,$2,$3,$4);
    $60 = ((($0)) + 24|0);
    $61 = ($58|0)>(1);
    if (!($61)) {
     break;
    }
    $62 = ((($0)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $63 & 2;
    $65 = ($64|0)==(0);
    if ($65) {
     $66 = ((($1)) + 36|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(1);
     if (!($68)) {
      $74 = $63 & 1;
      $75 = ($74|0)==(0);
      if ($75) {
       $78 = ((($1)) + 54|0);
       $$2 = $60;
       while(1) {
        $87 = HEAP8[$78>>0]|0;
        $88 = ($87<<24>>24)==(0);
        if (!($88)) {
         break L1;
        }
        $89 = HEAP32[$66>>2]|0;
        $90 = ($89|0)==(1);
        if ($90) {
         break L1;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2,$1,$2,$3,$4);
        $91 = ((($$2)) + 8|0);
        $92 = ($91>>>0)<($59>>>0);
        if ($92) {
         $$2 = $91;
        } else {
         break L1;
        }
       }
      }
      $76 = ((($1)) + 24|0);
      $77 = ((($1)) + 54|0);
      $$1 = $60;
      while(1) {
       $79 = HEAP8[$77>>0]|0;
       $80 = ($79<<24>>24)==(0);
       if (!($80)) {
        break L1;
       }
       $81 = HEAP32[$66>>2]|0;
       $82 = ($81|0)==(1);
       if ($82) {
        $83 = HEAP32[$76>>2]|0;
        $84 = ($83|0)==(1);
        if ($84) {
         break L1;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1,$1,$2,$3,$4);
       $85 = ((($$1)) + 8|0);
       $86 = ($85>>>0)<($59>>>0);
       if ($86) {
        $$1 = $85;
       } else {
        break L1;
       }
      }
     }
    }
    $69 = ((($1)) + 54|0);
    $$0 = $60;
    while(1) {
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(0);
     if (!($71)) {
      break L1;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0,$1,$2,$3,$4);
     $72 = ((($$0)) + 8|0);
     $73 = ($72>>>0)<($59>>>0);
     if ($73) {
      $$0 = $72;
     } else {
      break L1;
     }
    }
   }
   $10 = ((($1)) + 16|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==($2|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==($2|0);
    if (!($15)) {
     $18 = ((($1)) + 32|0);
     HEAP32[$18>>2] = $3;
     $19 = ((($1)) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)==(4);
     if ($21) {
      break;
     }
     $22 = ((($0)) + 16|0);
     $23 = ((($0)) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (((($0)) + 16|0) + ($24<<3)|0);
     $26 = ((($1)) + 52|0);
     $27 = ((($1)) + 53|0);
     $28 = ((($1)) + 54|0);
     $29 = ((($0)) + 8|0);
     $30 = ((($1)) + 24|0);
     $$081$off0 = 0;$$084 = $22;$$085$off0 = 0;
     L32: while(1) {
      $31 = ($$084>>>0)<($25>>>0);
      if (!($31)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      HEAP8[$26>>0] = 0;
      HEAP8[$27>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084,$1,$2,$2,1,$4);
      $32 = HEAP8[$28>>0]|0;
      $33 = ($32<<24>>24)==(0);
      if (!($33)) {
       $$283$off0 = $$081$off0;
       label = 18;
       break;
      }
      $34 = HEAP8[$27>>0]|0;
      $35 = ($34<<24>>24)==(0);
      do {
       if ($35) {
        $$182$off0 = $$081$off0;$$186$off0 = $$085$off0;
       } else {
        $36 = HEAP8[$26>>0]|0;
        $37 = ($36<<24>>24)==(0);
        if ($37) {
         $43 = HEAP32[$29>>2]|0;
         $44 = $43 & 1;
         $45 = ($44|0)==(0);
         if ($45) {
          $$283$off0 = 1;
          label = 18;
          break L32;
         } else {
          $$182$off0 = 1;$$186$off0 = $$085$off0;
          break;
         }
        }
        $38 = HEAP32[$30>>2]|0;
        $39 = ($38|0)==(1);
        if ($39) {
         label = 23;
         break L32;
        }
        $40 = HEAP32[$29>>2]|0;
        $41 = $40 & 2;
        $42 = ($41|0)==(0);
        if ($42) {
         label = 23;
         break L32;
        } else {
         $$182$off0 = 1;$$186$off0 = 1;
        }
       }
      } while(0);
      $46 = ((($$084)) + 8|0);
      $$081$off0 = $$182$off0;$$084 = $46;$$085$off0 = $$186$off0;
     }
     do {
      if ((label|0) == 18) {
       if (!($$085$off0)) {
        HEAP32[$13>>2] = $2;
        $47 = ((($1)) + 40|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = (($48) + 1)|0;
        HEAP32[$47>>2] = $49;
        $50 = ((($1)) + 36|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = ($51|0)==(1);
        if ($52) {
         $53 = HEAP32[$30>>2]|0;
         $54 = ($53|0)==(2);
         if ($54) {
          HEAP8[$28>>0] = 1;
          if ($$283$off0) {
           label = 23;
           break;
          } else {
           $55 = 4;
           break;
          }
         }
        }
       }
       if ($$283$off0) {
        label = 23;
       } else {
        $55 = 4;
       }
      }
     } while(0);
     if ((label|0) == 23) {
      $55 = 3;
     }
     HEAP32[$19>>2] = $55;
     break;
    }
   }
   $16 = ($3|0)==(1);
   if ($16) {
    $17 = ((($1)) + 32|0);
    HEAP32[$17>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0,$5,0)|0);
 L1: do {
  if ($6) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$1,$2,$3);
  } else {
   $7 = ((($0)) + 16|0);
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (((($0)) + 16|0) + ($9<<3)|0);
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($7,$1,$2,$3);
   $11 = ($9|0)>(1);
   if ($11) {
    $12 = ((($0)) + 24|0);
    $13 = ((($1)) + 54|0);
    $$0 = $12;
    while(1) {
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0,$1,$2,$3);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(0);
     if (!($15)) {
      break L1;
     }
     $16 = ((($$0)) + 8|0);
     $17 = ($16>>>0)<($10>>>0);
     if ($17) {
      $$0 = $16;
     } else {
      break;
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >> 8;
 $7 = $5 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = $6;
 } else {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + ($6)|0);
  $11 = HEAP32[$10>>2]|0;
  $$0 = $11;
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($2) + ($$0)|0);
 $17 = $5 & 2;
 $18 = ($17|0)!=(0);
 $19 = $18 ? $3 : 2;
 FUNCTION_TABLE_viiii[$15 & 127]($12,$1,$16,$19);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 >> 8;
 $9 = $7 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = $8;
 } else {
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP32[$12>>2]|0;
  $$0 = $13;
 }
 $14 = HEAP32[$0>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($3) + ($$0)|0);
 $19 = $7 & 2;
 $20 = ($19|0)!=(0);
 $21 = $20 ? $4 : 2;
 FUNCTION_TABLE_viiiiii[$17 & 31]($14,$1,$2,$18,$21,$5);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 >> 8;
 $8 = $6 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = $7;
 } else {
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + ($7)|0);
  $12 = HEAP32[$11>>2]|0;
  $$0 = $12;
 }
 $13 = HEAP32[$0>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($2) + ($$0)|0);
 $18 = $6 & 2;
 $19 = ($18|0)!=(0);
 $20 = $19 ? $3 : 2;
 FUNCTION_TABLE_viiiii[$16 & 31]($13,$1,$17,$20,$4);
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2216]|0;
 $1 = (($0) + 0)|0;
 HEAP32[2216] = $1;
 $2 = $0;
 return ($2|0);
}
function ___cxa_can_catch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $4;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiii[$7 & 127]($0,$1,$3)|0);
 $9 = $8&1;
 if ($8) {
  $10 = HEAP32[$3>>2]|0;
  HEAP32[$2>>2] = $10;
 }
 STACKTOP = sp;return ($9|0);
}
function ___cxa_is_pointer_type($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $3 = 0;
 } else {
  $2 = (___dynamic_cast($0,592,680,0)|0);
  $phitmp = ($2|0)!=(0|0);
  $phitmp1 = $phitmp&1;
  $3 = $phitmp1;
 }
 return ($3|0);
}
function runPostSets() {
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _llvm_ctlz_i64(l, h, isZeroUndef) {
    l = l | 0;
    h = h | 0;
    isZeroUndef = isZeroUndef | 0;
    var ret = 0;
    ret = Math_clz32(h) | 0;
    if ((ret | 0) == 32) ret = ret + (Math_clz32(l) | 0) | 0;
    tempRet0 = 0;
    return ret | 0;
}
function _llvm_ctpop_i32(x) {
    // http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel
    // http://bits.stephan-brumme.com/countBits.html
    x = x | 0;
    x = x - ((x >>> 1) & 0x55555555) | 0;
    x = (x & 0x33333333) + ((x >>> 2) & 0x33333333) | 0;
    return (Math_imul((x + (x >>> 4) & 252645135 /* 0xF0F0F0F, but hits uglify parse bug? */), 0x1010101) >>> 24) | 0;
}
function _llvm_ctpop_i64(l, h) {
    l = l | 0;
    h = h | 0;
    return (_llvm_ctpop_i32(l) | 0) + (_llvm_ctpop_i32(h) | 0) | 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      196608
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        SIMD_Int32x4_store(HEAPU8, dest, SIMD_Int32x4_load(HEAPU8, src));
        SIMD_Int32x4_store(HEAPU8, dest+16, SIMD_Int32x4_load(HEAPU8, src+16));
        SIMD_Int32x4_store(HEAPU8, dest+32, SIMD_Int32x4_load(HEAPU8, src+32));
        SIMD_Int32x4_store(HEAPU8, dest+48, SIMD_Int32x4_load(HEAPU8, src+48));
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    var value16 = SIMD_Int32x4(0,0,0,0);
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      value16 = SIMD_Int32x4_splat(value4);

      while((ptr|0) <= (block_aligned_end|0)) {
        SIMD_Int32x4_store(HEAPU8, ptr, value16);
        SIMD_Int32x4_store(HEAPU8, ptr+16, value16);
        SIMD_Int32x4_store(HEAPU8, ptr+32, value16);
        SIMD_Int32x4_store(HEAPU8, ptr+48, value16);
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&63]()|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&127](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&127](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iiiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&127]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&127](a1|0,a2|0,a3|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&127](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b0() {
 ; nullFunc_i(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_ii(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(2);return 0;
}
function b3(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(3);return 0;
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0;
}
function b5(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(5);return 0;
}
function b6(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(6);return 0;
}
function b7(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(7);return 0;
}
function b8() {
 ; nullFunc_v(8);
}
function b9(p0) {
 p0 = p0|0; nullFunc_vi(9);
}
function b10(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(10);
}
function b11(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(11);
}
function b12(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(12);
}
function b13(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(13);
}
function b14(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(14);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,__ZN10emscripten8internal12operator_newINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEEEPT_DpOT0_,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN10emscripten8internal12operator_newINSt3__26vectorIjNS2_9allocatorIjEEEEJEEEPT_DpOT0_,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_ii = [b1,___stdio_close,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNKSt11logic_error4whatEv,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,__ZN10emscripten8internal13getActualTypeINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEPKvPT_,b1,__ZN10emscripten8internal7InvokerIPNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEJEE6invokeEPFSC_vE,b1,b1,b1,b1,b1,__ZNKSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE4sizeEv,b1,b1,b1,b1,b1,__ZN10emscripten8internal13getActualTypeINSt3__26vectorIjNS2_9allocatorIjEEEEEEPKvPT_,b1,__ZN10emscripten8internal7InvokerIPNSt3__26vectorIjNS2_9allocatorIjEEEEJEE6invokeEPFS7_vE,b1,b1,b1,b1,b1,__ZNKSt3__26vectorIjNS_9allocatorIjEEE4sizeEv,b1,b1,b1,b1
,b1,__ZN10emscripten8internal13getActualTypeIN4surf4SuRFEEEPKvPT_,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK4surf4SuRF9getHeightEv,b1,__ZNK4surf4SuRF19getSparseStartLevelEv,b1,b1,__ZN10emscripten8internal13getActualTypeIN4surf4SuRF4IterEEEPKvPT_,b1,__ZNK4surf4SuRF4Iter7isValidEv,b1,b1,b1,b1,b1,b1,b1
,b1,__ZN10emscripten8internal13getActualTypeIN4surf16SuRFAccessHelperEEEPKvPT_,b1,b1,__ZN10emscripten8internal12operator_newIN4surf16SuRFAccessHelperEJRKNS2_4SuRFEEEEPT_DpOT0_,__ZNK4surf16SuRFAccessHelper14serializedSizeEv,b1,__ZNK4surf16SuRFAccessHelper14getMemoryUsageEv,__ZN10emscripten8internal13getActualTypeIN4surf11SuRFBuilderEEEPKvPT_,b1,b1,b1,b1,b1,__ZNK4surf11SuRFBuilder13getTreeHeightEv,b1,__ZNK4surf11SuRFBuilder19getSparseStartLevelEv,__ZNK4surf11SuRFBuilder13getSuffixTypeEv,b1,__ZNK4surf11SuRFBuilder12getSuffixLenEv,__ZNK4surf11SuRFBuilder16getHashSuffixLenEv,__ZNK4surf11SuRFBuilder16getRealSuffixLenEv,__ZN10emscripten8internal13getActualTypeIN4surf23SuRFBuilderAccessHelperEEEPKvPT_,b1,b1,__ZN10emscripten8internal12operator_newIN4surf23SuRFBuilderAccessHelperEJRKNS2_11SuRFBuilderEEEEPT_DpOT0_,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEKFjvEjPKSB_JEE6invokeERKSD_SF_,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIjNS2_9allocatorIjEEEEKFjvEjPKS6_JEE6invokeERKS8_SA_,b2,b2,b2
,b2,b2,b2,b2,b2,__ZNK4surf4SuRF9lookupKeyERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,b2,b2,b2,b2,b2,__ZN10emscripten8internal13MethodInvokerIMN4surf4SuRFEKFNS3_4IterEvES4_PKS3_JEE6invokeERKS6_S8_,b2,b2,b2,b2,__ZN10emscripten8internal13MethodInvokerIMN4surf4SuRFEKFjvEjPKS3_JEE6invokeERKS5_S7_,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal13MethodInvokerIMN4surf4SuRF4IterEKFbvEbPKS4_JEE6invokeERKS6_S8_,__ZNK4surf4SuRF4Iter7compareERKNSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b2,b2,__ZN10emscripten8internal13MethodInvokerIMN4surf4SuRF4IterEKFNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEvESB_PKS4_JEE6invokeERKSD_SF_,__ZN4surf4SuRF4IterppEi,b2
,__ZN4surf4SuRF4ItermmEi,b2,b2,__ZN10emscripten8internal7InvokerIPN4surf16SuRFAccessHelperEJRKNS2_4SuRFEEE6invokeEPFS4_S7_EPS5_,b2,b2,__ZN10emscripten8internal13MethodInvokerIMN4surf16SuRFAccessHelperEKFjvEjPKS3_JEE6invokeERKS5_S7_,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10emscripten8internal13MethodInvokerIMN4surf11SuRFBuilderEKFjvEjPKS3_JEE6invokeERKS5_S7_,b2,b2,__ZN10emscripten8internal13MethodInvokerIMN4surf11SuRFBuilderEKFNS2_10SuffixTypeEvES4_PKS3_JEE6invokeERKS6_S8_,b2,b2,b2,b2,b2,__ZN10emscripten8internal7InvokerIPN4surf23SuRFBuilderAccessHelperEJRKNS2_11SuRFBuilderEEE6invokeEPFS4_S7_EPS5_,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iiii = [b3,b3,___stdout_write,___stdio_seek,___stdio_write,b3,b3,b3,b3,b3,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b3,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,b3,__ZNK10__cxxabiv116__enum_type_info9can_catchEPKNS_16__shim_type_infoERPv,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEEjES2_SE_JjEE6invokeEPSG_PSC_j,__ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3setERSB_jRKS9_,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__26vectorIjNS3_9allocatorIjEEEEjES2_S9_JjEE6invokeEPSB_PS7_j,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIjNS2_9allocatorIjEEEEE3setERS6_jRKj
,b3,b3,b3,b3,b3,b3,__ZN10emscripten8internal13MethodInvokerIMN4surf4SuRFEKFbRKNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEbPKS3_JSC_EE6invokeERKSE_SG_PNS0_11BindingTypeISA_EUt_E,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10emscripten8internal13MethodInvokerIMN4surf4SuRF4IterEKFiRKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEiPKS4_JSD_EE6invokeERKSF_SH_PNS0_11BindingTypeISB_EUt_E,b3,b3,b3,__ZN10emscripten8internal13MethodInvokerIMN4surf4SuRF4IterEFbiEbPS4_JiEE6invokeERKS6_S7_i
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEjRKS9_EbSC_JjSE_EE6invokeEPSG_PSB_jPNS0_11BindingTypeIS9_EUt_E,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__26vectorIjNS2_9allocatorIjEEEEjRKjEbS7_JjS9_EE6invokeEPSB_PS6_jj,b4,b4,b4,b4,b4,b4,b4,__ZN10emscripten8internal13MethodInvokerIMN4surf4SuRFEKFNS3_4IterERKNSt3__212basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEbES4_PKS3_JSD_bEE6invokeERKSF_SH_PNS0_11BindingTypeISB_EUt_Eb,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN4surf4SuRF11lookupRangeERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbS9_b,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN10emscripten8internal12operator_newIN4surf11SuRFBuilderEJbjNS2_10SuffixTypeEjjEEEPT_DpOT0_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_iiiiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,__ZN10emscripten8internal12operator_newIN4surf4SuRFEJKNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEKbKjKNS2_10SuffixTypeESG_SG_EEEPT_DpOT0_,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN10emscripten8internal13MethodInvokerIMN4surf4SuRFEFbRKNSt3__212basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEbSC_bEbPS3_JSC_bSC_bEE6invokeERKSE_SF_PNS0_11BindingTypeISA_EUt_EbSM_b,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZN10emscripten8internal7InvokerIPN4surf11SuRFBuilderEJObOjONS2_10SuffixTypeES6_S6_EE6invokeEPFS4_S5_S6_S8_S6_S6_EbjS7_jj,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_iiiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,__ZN10emscripten8internal7InvokerIPN4surf4SuRFEJOKNSt3__26vectorINS5_12basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEENSA_ISC_EEEEOKbOKjOKNS2_10SuffixTypeESK_SK_EE6invokeEPFS4_SG_SI_SK_SN_SK_SK_EPSE_bjSL_jj,b7];
var FUNCTION_TABLE_v = [b8,b8,b8,b8,b8,__ZL25default_terminate_handlerv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b8];
var FUNCTION_TABLE_vi = [b9,b9,b9,b9,b9,b9,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b9,b9,b9,b9,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b9,b9,b9,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b9,__ZNSt12length_errorD0Ev,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b9,__ZN10__cxxabiv119__pointer_type_infoD0Ev,b9,__ZN10__cxxabiv116__enum_type_infoD0Ev,b9,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev
,b9,b9,b9,b9,__ZN10emscripten8internal14raw_destructorINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEEEvPT_,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN10emscripten8internal14raw_destructorINSt3__26vectorIjNS2_9allocatorIjEEEEEEvPT_,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,__ZN10emscripten8internal14raw_destructorIN4surf4SuRFEEEvPT_,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN4surf4SuRF7destroyEv,b9,b9,__ZN10emscripten8internal14raw_destructorIN4surf4SuRF4IterEEEvPT_,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,__ZN10emscripten8internal14raw_destructorIN4surf16SuRFAccessHelperEEEvPT_,b9,b9,b9,b9,b9,b9,__ZN10emscripten8internal14raw_destructorIN4surf11SuRFBuilderEEEvPT_,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZN10emscripten8internal14raw_destructorIN4surf23SuRFBuilderAccessHelperEEEvPT_,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv];
var FUNCTION_TABLE_vii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE9push_backERKS6_,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__26vectorIjNS_9allocatorIjEEE9push_backERKj,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK4surf4SuRF11moveToFirstEv,b10,__ZNK4surf4SuRF10moveToLastEv,b10,b10,b10,b10,b10,b10,__ZN10emscripten8internal13MethodInvokerIMN4surf4SuRFEFvvEvPS3_JEE6invokeERKS5_S6_,b10,b10,b10,b10,b10,b10,__ZNK4surf4SuRF4Iter6getKeyEv,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZN4surf11SuRFBuilder5buildERKNSt3__26vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEE,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,__ZNK4surf23SuRFBuilderAccessHelper15getSuffixCountsERNSt3__26vectorIjNS1_9allocatorIjEEEE,b10,__ZNK4surf23SuRFBuilderAccessHelper13getNodeCountsERNSt3__26vectorIjNS1_9allocatorIjEEEE,b10,b10];
var FUNCTION_TABLE_viii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvRKS9_EvPSB_JSD_EE6invokeERKSF_SG_PNS0_11BindingTypeIS9_EUt_E,__ZNSt3__26vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE6resizeEjRKS6_,b11,b11,b11,__ZN10emscripten8internal12VectorAccessINSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEE3getERKSB_j,b11,b11,b11,b11,b11,b11,b11,b11,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIjNS2_9allocatorIjEEEEFvRKjEvPS6_JS8_EE6invokeERKSA_SB_j,__ZNSt3__26vectorIjNS_9allocatorIjEEE6resizeEjRKj,b11,b11,b11,__ZN10emscripten8internal12VectorAccessINSt3__26vectorIjNS2_9allocatorIjEEEEE3getERKS6_j,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN10emscripten8internal13MethodInvokerIMN4surf11SuRFBuilderEFvRKNSt3__26vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEvPS3_JSF_EE6invokeERKSH_SI_PSD_,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNK4surf23SuRFBuilderAccessHelper15getBitmapLabelsERNSt3__26vectorIjNS1_9allocatorIjEEEES6_,b11,__ZNK4surf23SuRFBuilderAccessHelper27getBitmapChildIndicatorBitsERNSt3__26vectorIjNS1_9allocatorIjEEEES6_,__ZNK4surf23SuRFBuilderAccessHelper25getPrefixkeyIndicatorBitsERNSt3__26vectorIjNS1_9allocatorIjEEEES6_
,__ZNK4surf23SuRFBuilderAccessHelper9getLabelsERNSt3__26vectorIjNS1_9allocatorIjEEEES6_,__ZNK4surf23SuRFBuilderAccessHelper21getChildIndicatorBitsERNSt3__26vectorIjNS1_9allocatorIjEEEES6_,__ZNK4surf23SuRFBuilderAccessHelper12getLoudsBitsERNSt3__26vectorIjNS1_9allocatorIjEEEES6_,__ZNK4surf23SuRFBuilderAccessHelper11getSuffixesERNSt3__26vectorIjNS1_9allocatorIjEEEES6_,b11,__ZN10emscripten8internal13MethodInvokerIMN4surf23SuRFBuilderAccessHelperEKFvRNSt3__26vectorIjNS4_9allocatorIjEEEEEvPKS3_JS9_EE6invokeERKSB_SD_PS8_,b11,b11,b11];
var FUNCTION_TABLE_viiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b12,b12,b12,b12,b12,b12,b12,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEEFvjRKS9_EvPSB_JjSD_EE6invokeERKSF_SG_jPNS0_11BindingTypeIS9_EUt_E,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN10emscripten8internal13MethodInvokerIMNSt3__26vectorIjNS2_9allocatorIjEEEEFvjRKjEvPS6_JjS8_EE6invokeERKSA_SB_jj,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,__ZNK4surf4SuRF20moveToKeyGreaterThanERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEb,b12,__ZNK4surf4SuRF17moveToKeyLessThanERKNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEb,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZN10emscripten8internal13MethodInvokerIMN4surf23SuRFBuilderAccessHelperEKFvRNSt3__26vectorIjNS4_9allocatorIjEEEES9_EvPKS3_JS9_S9_EE6invokeERKSB_SD_PS8_SH_,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_viiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b13,b13,b13,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b13];
var FUNCTION_TABLE_viiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b14,b14,b14,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b14,b14];

  return { __GLOBAL__sub_I_bind_cpp: __GLOBAL__sub_I_bind_cpp, __GLOBAL__sub_I_js_cpp: __GLOBAL__sub_I_js_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___getTypeName: ___getTypeName, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _llvm_ctlz_i64: _llvm_ctlz_i64, _llvm_ctpop_i64: _llvm_ctpop_i64, _llvm_cttz_i32: _llvm_cttz_i32, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_js_cpp = asm["__GLOBAL__sub_I_js_cpp"]; asm["__GLOBAL__sub_I_js_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_js_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____getTypeName.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__llvm_ctlz_i64 = asm["_llvm_ctlz_i64"]; asm["_llvm_ctlz_i64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_ctlz_i64.apply(null, arguments);
};

var real__llvm_ctpop_i64 = asm["_llvm_ctpop_i64"]; asm["_llvm_ctpop_i64"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_ctpop_i64.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_cttz_i32.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = asm["__GLOBAL__sub_I_bind_cpp"];
var __GLOBAL__sub_I_js_cpp = Module["__GLOBAL__sub_I_js_cpp"] = asm["__GLOBAL__sub_I_js_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___getTypeName = Module["___getTypeName"] = asm["___getTypeName"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _llvm_ctlz_i64 = Module["_llvm_ctlz_i64"] = asm["_llvm_ctlz_i64"];
var _llvm_ctpop_i64 = Module["_llvm_ctpop_i64"] = asm["_llvm_ctpop_i64"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}


Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



